<?xml version="1.0" encoding="ISO-8859-1"?>
<pmd-cpd>
<duplication lines="330" tokens="1783">
<file line="419" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_Filter.java"/>
<file line="433" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_Quest_Filter.java"/>
<codefragment>
<![CDATA[
            jPanel2.setLayout(new AnchorLayout());
            jPanel2.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
            jPanel2.setBackground(new java.awt.Color(192, 192, 192));
            jPanel2.add(getJSeparator2(), new AnchorConstraint(112, 987, 166, 20, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel2.add(getJLabel3(), new AnchorConstraint(-200, 951, -61, -166, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel2.add(getJLabel4(), new AnchorConstraint(-19, 985, 128, 4, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel2.add(getJCheckBox1(), new AnchorConstraint(877, 948, 948, 79, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel2.add(getJCheckBox2(), new AnchorConstraint(751, 948, 827, 79, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel2.add(getJCheckBox3(), new AnchorConstraint(625, 948, 702, 79, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel2.add(getJCheckBox4(), new AnchorConstraint(505, 948, 581, 79, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel2.add(getJCheckBox5(), new AnchorConstraint(379, 948, 450, 79, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel2.add(getJCheckBox6(), new AnchorConstraint(254, 948, 325, 79, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel2.add(getJCheckBox7(), new AnchorConstraint(133, 948, 232, 79, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
        }
        return jPanel2;
    }

    /**
     * <p>Getter for the field <code>jLabel3</code>.</p>
     *
     * @return a {@link javax.swing.JLabel} object.
     */
    private JLabel getJLabel3() {
        if (jLabel3 == null) {
            jLabel3 = new JLabel();
            jLabel3.setText("Color");
            jLabel3.setHorizontalAlignment(SwingConstants.CENTER);
            jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14));
            jLabel3.setPreferredSize(new java.awt.Dimension(152, 39));
            jLabel3.setLayout(null);
        }
        return jLabel3;
    }

    /**
     * <p>Getter for the field <code>jLabel4</code>.</p>
     *
     * @return a {@link javax.swing.JLabel} object.
     */
    private JLabel getJLabel4() {
        if (jLabel4 == null) {
            jLabel4 = new JLabel();
            jLabel4.setText("Type");
            jLabel4.setHorizontalAlignment(SwingConstants.CENTER);
            jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14));
            jLabel4.setPreferredSize(new java.awt.Dimension(105, 27));
            jLabel4.setLayout(null);
        }
        return jLabel4;
    }

    /**
     * <p>Getter for the field <code>jSeparator2</code>.</p>
     *
     * @return a {@link javax.swing.JSeparator} object.
     */
    private JSeparator getJSeparator2() {
        if (jSeparator2 == null) {
            jSeparator2 = new JSeparator();
            jSeparator2.setPreferredSize(new java.awt.Dimension(116, 10));
            jSeparator2.setLayout(null);
        }
        return jSeparator2;
    }

    /**
     * <p>getJCheckBox1.</p>
     *
     * @return a {@link javax.swing.JCheckBox} object.
     */
    private JCheckBox getJCheckBox1() {
        if (jCheckBoxSorcery == null) {
            jCheckBoxSorcery = new JCheckBox();
            jCheckBoxSorcery.setLayout(null);
            jCheckBoxSorcery.setText("Sorcery");
            jCheckBoxSorcery.setSelected(true);
            jCheckBoxSorcery.setBackground(new java.awt.Color(192, 192, 192));
            jCheckBoxSorcery.setPreferredSize(new java.awt.Dimension(93, 13));
            jCheckBoxSorcery.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return jCheckBoxSorcery;
    }

    /**
     * <p>getJCheckBox2.</p>
     *
     * @return a {@link javax.swing.JCheckBox} object.
     */
    private JCheckBox getJCheckBox2() {
        if (jCheckBoxPlaneswalker == null) {
            jCheckBoxPlaneswalker = new JCheckBox();
            jCheckBoxPlaneswalker.setLayout(null);
            jCheckBoxPlaneswalker.setText("Planeswalker");
            jCheckBoxPlaneswalker.setSelected(true);
            jCheckBoxPlaneswalker.setBackground(new java.awt.Color(192, 192, 192));
            jCheckBoxPlaneswalker.setPreferredSize(new java.awt.Dimension(93, 14));
            jCheckBoxPlaneswalker.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return jCheckBoxPlaneswalker;
    }

    /**
     * <p>getJCheckBox3.</p>
     *
     * @return a {@link javax.swing.JCheckBox} object.
     */
    private JCheckBox getJCheckBox3() {
        if (jCheckBoxLand == null) {
            jCheckBoxLand = new JCheckBox();
            jCheckBoxLand.setLayout(null);
            jCheckBoxLand.setText("Land");
            jCheckBoxLand.setSelected(true);
            jCheckBoxLand.setBackground(new java.awt.Color(192, 192, 192));
            jCheckBoxLand.setPreferredSize(new java.awt.Dimension(93, 14));
            jCheckBoxLand.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return jCheckBoxLand;
    }

    /**
     * <p>getJCheckBox4.</p>
     *
     * @return a {@link javax.swing.JCheckBox} object.
     */
    private JCheckBox getJCheckBox4() {
        if (jCheckBoxInstant == null) {
            jCheckBoxInstant = new JCheckBox();
            jCheckBoxInstant.setLayout(null);
            jCheckBoxInstant.setText("Instant");
            jCheckBoxInstant.setSelected(true);
            jCheckBoxInstant.setBackground(new java.awt.Color(192, 192, 192));
            jCheckBoxInstant.setPreferredSize(new java.awt.Dimension(93, 14));
            jCheckBoxInstant.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return jCheckBoxInstant;
    }

    /**
     * <p>getJCheckBox5.</p>
     *
     * @return a {@link javax.swing.JCheckBox} object.
     */
    private JCheckBox getJCheckBox5() {
        if (jCheckBoxEnchant == null) {
            jCheckBoxEnchant = new JCheckBox();
            jCheckBoxEnchant.setLayout(null);
            jCheckBoxEnchant.setText("Enchant");
            jCheckBoxEnchant.setSelected(true);
            jCheckBoxEnchant.setBackground(new java.awt.Color(192, 192, 192));
            jCheckBoxEnchant.setPreferredSize(new java.awt.Dimension(93, 13));
            jCheckBoxEnchant.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return jCheckBoxEnchant;
    }

    /**
     * <p>getJCheckBox6.</p>
     *
     * @return a {@link javax.swing.JCheckBox} object.
     */
    private JCheckBox getJCheckBox6() {
        if (jCheckBoxCreature == null) {
            jCheckBoxCreature = new JCheckBox();
            jCheckBoxCreature.setLayout(null);
            jCheckBoxCreature.setText("Creature");
            jCheckBoxCreature.setSelected(true);
            jCheckBoxCreature.setBackground(new java.awt.Color(192, 192, 192));
            jCheckBoxCreature.setPreferredSize(new java.awt.Dimension(93, 13));
            jCheckBoxCreature.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return jCheckBoxCreature;
    }

    /**
     * <p>getJCheckBox7.</p>
     *
     * @return a {@link javax.swing.JCheckBox} object.
     */
    private JCheckBox getJCheckBox7() {
        if (jCheckBoxArtifact == null) {
            jCheckBoxArtifact = new JCheckBox();
            jCheckBoxArtifact.setLayout(null);
            jCheckBoxArtifact.setText("Artifact");
            jCheckBoxArtifact.setSelected(true);
            jCheckBoxArtifact.setBackground(new java.awt.Color(192, 192, 192));
            jCheckBoxArtifact.setPreferredSize(new java.awt.Dimension(93, 18));
            jCheckBoxArtifact.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return jCheckBoxArtifact;
    }

    /**
     * <p>getJTextField1.</p>
     *
     * @return a {@link javax.swing.JTextField} object.
     */
    private JTextField getJTextField1() {
        if (cardText == null) {
            cardText = new JTextField();
            cardText.setPreferredSize(new java.awt.Dimension(168, 30));
            cardText.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return cardText;
    }

    /**
     * <p>Getter for the field <code>jLabel5</code>.</p>
     *
     * @return a {@link javax.swing.JLabel} object.
     */
    private JLabel getJLabel5() {
        if (jLabel5 == null) {
            jLabel5 = new JLabel();
            jLabel5.setText("Card Text:");
            jLabel5.setHorizontalAlignment(SwingConstants.CENTER);
            jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 16));
            jLabel5.setPreferredSize(new java.awt.Dimension(75, 50));
            jLabel5.setLayout(null);
        }
        return jLabel5;
    }

    public class CustomListener implements MouseListener {

        public void mouseClicked(MouseEvent e) {
            FilterCardTable();
        }

        public void mouseEntered(MouseEvent e) {

        }

        public void mouseExited(MouseEvent e) {

        }

        public void mousePressed(MouseEvent e) {

        }

        public void mouseReleased(MouseEvent e) {

        }
    }

    public class WListener implements WindowListener {

        public void windowActivated(WindowEvent arg0) {

        }

        public void windowClosed(WindowEvent arg0) {

        }

        public void windowClosing(WindowEvent arg0) {
]]>
</codefragment>
</duplication>
<duplication lines="274" tokens="1488">
<file line="804" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<file line="792" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<codefragment>
<![CDATA[
                    + " (LEAF weight=0.2 name=humanHand)) "//
                    + "(COLUMN"//
                    + " (LEAF weight=0.5 name=detail)"//
                    + " (LEAF weight=0.5 name=picture)))");
            pane.setModel(model);
        }
        pane.getMultiSplitLayout().setFloatingDividers(false);
        getContentPane().add(pane);

        //adding the individual parts

        if (!Gui_NewGame.useLAFFonts.isSelected()) initFonts(pane);

        initMsgYesNo(pane);
        initOpp(pane);
        initStackCombat(pane);
        initPlayer(pane);
        initZones(pane);
        initCardPicture(pane);
    }

    /**
     * <p>initFonts.</p>
     *
     * @param pane a {@link javax.swing.JPanel} object.
     */
    private void initFonts(JPanel pane) {
        messageArea.setFont(getFont());

        oppLifeLabel.setFont(lifeFont);

        oppPCLabel.setFont(statFont);
        oppLibraryLabel.setFont(statFont);

        oppHandValue.setFont(statFont);
        oppLibraryValue.setFont(statFont);
        oppRemovedValue.setFont(statFont);
        oppGraveValue.setFont(statFont);

        playerLifeLabel.setFont(lifeFont);
        playerPCLabel.setFont(statFont);

        playerHandValue.setFont(statFont);
        playerLibraryValue.setFont(statFont);
        playerRemovedValue.setFont(statFont);
        playerGraveValue.setFont(statFont);
        playerFBValue.setFont(statFont);

        combatArea.setFont(getFont());
    }

    /**
     * <p>initMsgYesNo.</p>
     *
     * @param pane a {@link javax.swing.JPanel} object.
     */
    private void initMsgYesNo(JPanel pane) {
        //messageArea.setBorder(BorderFactory.createEtchedBorder());
        messageArea.setEditable(false);
        messageArea.setLineWrap(true);
        messageArea.setWrapStyleWord(true);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
                okButton.requestFocusInWindow();
            }
        });
        okButton.setText("OK");
        okButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                okButtonActionPerformed(evt);

                if (AllZone.getPhase().isNeedToNextPhase()) {
                    // moves to next turn
                    AllZone.getPhase().setNeedToNextPhase(false);
                    AllZone.getPhase().nextPhase();
                }
                okButton.requestFocusInWindow();
            }
        });
        okButton.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent arg0) {
                // TODO make triggers on escape
                int code = arg0.getKeyCode();
                if (code == KeyEvent.VK_ESCAPE) {
                    cancelButton.doClick();
                }
            }
        });

        okButton.requestFocusInWindow();

        //if(okButton.isEnabled())
        //okButton.doClick();
        JPanel yesNoPanel = new JPanel(new FlowLayout());
        yesNoPanel.setBorder(new EtchedBorder());
        yesNoPanel.add(cancelButton);
        yesNoPanel.add(okButton);

        JPanel panel = new JPanel(new BorderLayout());
        JScrollPane scroll = new JScrollPane(messageArea);
        scroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        panel.add(scroll);
        panel.add(yesNoPanel, BorderLayout.SOUTH);
        pane.add(new ExternalPanel(panel), "info");
    }

    /**
     * <p>initOpp.</p>
     *
     * @param pane a {@link javax.swing.JPanel} object.
     */
    private void initOpp(JPanel pane) {
        //oppLifeLabel.setHorizontalAlignment(SwingConstants.CENTER);

        //oppPCLabel.setHorizontalAlignment(SwingConstants.TOP);
        oppPCLabel.setForeground(greenColor);

        JLabel oppHandLabel = new JLabel(ForgeProps.getLocalized(COMPUTER_HAND.BUTTON), SwingConstants.TRAILING);
        if (!Gui_NewGame.useLAFFonts.isSelected()) oppHandLabel.setFont(statFont);

        JButton oppGraveButton = new JButton(COMPUTER_GRAVEYARD_ACTION);
        oppGraveButton.setText((String) COMPUTER_GRAVEYARD_ACTION.getValue("buttonText"));
        oppGraveButton.setMargin(new Insets(0, 0, 0, 0));
        oppGraveButton.setHorizontalAlignment(SwingConstants.TRAILING);
        if (!Gui_NewGame.useLAFFonts.isSelected()) oppGraveButton.setFont(statFont);


        JPanel gravePanel = new JPanel(new BorderLayout());
        gravePanel.add(oppGraveButton, BorderLayout.EAST);

        JButton oppRemovedButton = new JButton(COMPUTER_REMOVED_ACTION);
        oppRemovedButton.setText((String) COMPUTER_REMOVED_ACTION.getValue("buttonText"));
        oppRemovedButton.setMargin(new Insets(0, 0, 0, 0));
        //removedButton.setHorizontalAlignment(SwingConstants.TRAILING);
        if (!Gui_NewGame.useLAFFonts.isSelected()) oppRemovedButton.setFont(statFont);


        oppHandValue.setHorizontalAlignment(SwingConstants.LEADING);
        oppLibraryValue.setHorizontalAlignment(SwingConstants.LEADING);
        oppGraveValue.setHorizontalAlignment(SwingConstants.LEADING);
        oppRemovedValue.setHorizontalAlignment(SwingConstants.LEADING);

        JPanel oppNumbersPanel = new JPanel(new GridLayout(0, 2, 3, 1));
        oppNumbersPanel.add(oppHandLabel);
        oppNumbersPanel.add(oppHandValue);
        oppNumbersPanel.add(oppRemovedButton);
        oppNumbersPanel.add(oppRemovedValue);
        oppNumbersPanel.add(oppLibraryLabel);
        oppNumbersPanel.add(oppLibraryValue);
        oppNumbersPanel.add(gravePanel);
        oppNumbersPanel.add(oppGraveValue);

        oppLifeLabel.setHorizontalAlignment(SwingConstants.CENTER);

        JPanel oppIconLifePanel = new JPanel(new GridLayout(0, 1, 0, 0));
        oppIconLifePanel.add(oppIconLabel);
        oppIconLifePanel.add(oppLifeLabel);

        JPanel oppPanel = new JPanel();
        oppPanel.setBorder(new TitledBorder(new EtchedBorder(), ForgeProps.getLocalized(COMPUTER_TITLE)));
        oppPanel.setLayout(new BorderLayout());
        oppPanel.add(oppNumbersPanel, BorderLayout.WEST);
        // oppPanel.add(oppIconLabel, BorderLayout.CENTER);
        // oppPanel.add(oppLifeLabel, BorderLayout.EAST);
        oppPanel.add(oppIconLifePanel, BorderLayout.EAST);
        oppPanel.add(oppPCLabel, BorderLayout.AFTER_LAST_LINE);
        pane.add(new ExternalPanel(oppPanel), "compy");
    }

    /**
     * <p>initStackCombat.</p>
     *
     * @param pane a {@link javax.swing.JPanel} object.
     */
    private void initStackCombat(JPanel pane) {
        stackPanel.setLayout(new GridLayout(0, 1, 10, 10));
        JScrollPane stackPane = new JScrollPane(stackPanel);
        stackPane.setBorder(new EtchedBorder());
        pane.add(new ExternalPanel(stackPane), "stack");

        combatArea.setEditable(false);
        combatArea.setLineWrap(true);
        combatArea.setWrapStyleWord(true);

        JScrollPane combatPane = new JScrollPane(combatArea);

        combatPane.setBorder(new TitledBorder(new EtchedBorder(), ForgeProps.getLocalized(COMBAT)));
        pane.add(new ExternalPanel(combatPane), "combat");
    }

    /**
     * <p>initPlayer.</p>
     *
     * @param pane a {@link javax.swing.JPanel} object.
     */
    private void initPlayer(JPanel pane) {
        //int fontSize = 12;
        playerLifeLabel.setHorizontalAlignment(SwingConstants.CENTER);

        playerPCLabel.setForeground(greenColor);

        JLabel playerLibraryLabel = new JLabel(ForgeProps.getLocalized(HUMAN_LIBRARY.BUTTON),
                SwingConstants.TRAILING);
        if (!Gui_NewGame.useLAFFonts.isSelected()) playerLibraryLabel.setFont(statFont);

        JLabel playerHandLabel = new JLabel(ForgeProps.getLocalized(HUMAN_HAND.TITLE), SwingConstants.TRAILING);
        if (!Gui_NewGame.useLAFFonts.isSelected()) playerHandLabel.setFont(statFont);

        //JLabel playerGraveLabel = new JLabel("Grave:", SwingConstants.TRAILING);
        JButton playerGraveButton = new JButton(HUMAN_GRAVEYARD_ACTION);
        playerGraveButton.setText((String) HUMAN_GRAVEYARD_ACTION.getValue("buttonText"));
        playerGraveButton.setMargin(new Insets(0, 0, 0, 0));
        playerGraveButton.setHorizontalAlignment(SwingConstants.TRAILING);
        if (!Gui_NewGame.useLAFFonts.isSelected()) playerGraveButton.setFont(statFont);


        JButton playerFlashBackButton = new JButton(HUMAN_FLASHBACK_ACTION);
        playerFlashBackButton.setText((String) HUMAN_FLASHBACK_ACTION.getValue("buttonText"));
        playerFlashBackButton.setMargin(new Insets(0, 0, 0, 0));
        playerFlashBackButton.setHorizontalAlignment(SwingConstants.TRAILING);
        if (!Gui_NewGame.useLAFFonts.isSelected()) playerFlashBackButton.setFont(statFont);


        JPanel gravePanel = new JPanel(new BorderLayout());
        gravePanel.add(playerGraveButton, BorderLayout.EAST);

        JPanel playerFBPanel = new JPanel(new BorderLayout());
        playerFBPanel.add(playerFlashBackButton, BorderLayout.EAST);

        JButton playerRemovedButton = new JButton(HUMAN_REMOVED_ACTION);
        playerRemovedButton.setText((String) HUMAN_REMOVED_ACTION.getValue("buttonText"));
        playerRemovedButton.setMargin(new Insets(0, 0, 0, 0));
        //removedButton.setHorizontalAlignment(SwingConstants.TRAILING);
        if (!Gui_NewGame.useLAFFonts.isSelected()) playerRemovedButton.setFont(statFont);

        playerHandValue.setHorizontalAlignment(SwingConstants.LEADING);
        playerLibraryValue.setHorizontalAlignment(SwingConstants.LEADING);
        playerGraveValue.setHorizontalAlignment(SwingConstants.LEADING);
        playerFBValue.setHorizontalAlignment(SwingConstants.LEADING);

        //playerRemovedValue.setFont(new Font("MS Sans Serif", 0, fontSize));
        playerRemovedValue.setHorizontalAlignment(SwingConstants.LEADING);

        JPanel playerNumbersPanel = new JPanel(new GridLayout(0, 2, 5, 1));
        playerNumbersPanel.add(playerHandLabel);
        playerNumbersPanel.add(playerHandValue);
        playerNumbersPanel.add(playerRemovedButton);
        playerNumbersPanel.add(playerRemovedValue);
        playerNumbersPanel.add(playerLibraryLabel);
        playerNumbersPanel.add(playerLibraryValue);
        playerNumbersPanel.add(gravePanel);
        playerNumbersPanel.add(playerGraveValue);
        playerNumbersPanel.add(playerFBPanel);
        playerNumbersPanel.add(playerFBValue);

        JPanel playerPanel = new JPanel();
        playerPanel.setBorder(new TitledBorder(new EtchedBorder(), ForgeProps.getLocalized(HUMAN_TITLE)));
        playerPanel.setLayout(new BorderLayout());
        playerPanel.add(playerNumbersPanel, BorderLayout.WEST);
        playerPanel.add(playerLifeLabel, BorderLayout.EAST);
        playerPanel.add(playerPCLabel, BorderLayout.AFTER_LAST_LINE);
        pane.add(new ExternalPanel(playerPanel), "human");
    }

    /**
     * <p>initZones.</p>
     *
     * @param pane a {@link javax.swing.JPanel} object.
     */
    private void initZones(JPanel pane) {
]]>
</codefragment>
</duplication>
<duplication lines="235" tokens="1318">
<file line="182" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_Filter.java"/>
<file line="197" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_Quest_Filter.java"/>
<codefragment>
<![CDATA[
            jPanel1.setLayout(new AnchorLayout());
            jPanel1.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
            jPanel1.setBackground(new java.awt.Color(192, 192, 192));
            jPanel1.add(getJCheckBoxBlack(), new AnchorConstraint(134, 985, 240, 79, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel1.add(getJCheckBoxColorless(), new AnchorConstraint(878, 983, 950, 84,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL));
            jPanel1.add(getJCheckBoxWhite(), new AnchorConstraint(726, 987, 798, 79, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel1.add(getJCheckBoxRed(), new AnchorConstraint(577, 987, 654, 79, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel1.add(getJCheckBoxGreen(), new AnchorConstraint(428, 987, 494, 79, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel1.add(getJCheckBoxBlue(), new AnchorConstraint(279, 987, 356, 79, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel1.add(getJSeparator1(), new AnchorConstraint(107, 987, 139, 12, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
            jPanel1.add(getJLabel2(), new AnchorConstraint(-20, 990, 123, 16, AnchorConstraint.ANCHOR_REL,
                    AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL));
        }
        return jPanel1;
    }

    /**
     * <p>Getter for the field <code>jLabel2</code>.</p>
     *
     * @return a {@link javax.swing.JLabel} object.
     */
    private JLabel getJLabel2() {
        if (jLabel2 == null) {
            jLabel2 = new JLabel();
            jLabel2.setText("Color");
            jLabel2.setHorizontalAlignment(SwingConstants.CENTER);
            jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14));
            jLabel2.setPreferredSize(new java.awt.Dimension(152, 39));
            jLabel2.setLayout(null);
        }
        return jLabel2;
    }

    /**
     * <p>Getter for the field <code>jSeparator1</code>.</p>
     *
     * @return a {@link javax.swing.JSeparator} object.
     */
    private JSeparator getJSeparator1() {
        if (jSeparator1 == null) {
            jSeparator1 = new JSeparator();
            jSeparator1.setPreferredSize(new java.awt.Dimension(117, 6));
            jSeparator1.setLayout(null);
        }
        return jSeparator1;
    }

    /**
     * <p>Getter for the field <code>jCheckBoxBlue</code>.</p>
     *
     * @return a {@link javax.swing.JCheckBox} object.
     */
    private JCheckBox getJCheckBoxBlue() {
        if (jCheckBoxBlue == null) {
            jCheckBoxBlue = new JCheckBox();
            jCheckBoxBlue.setLayout(null);
            jCheckBoxBlue.setText("Blue");
            jCheckBoxBlue.setPreferredSize(new java.awt.Dimension(109, 14));
            jCheckBoxBlue.setSelected(true);
            jCheckBoxBlue.setBackground(new java.awt.Color(192, 192, 192));
            jCheckBoxBlue.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return jCheckBoxBlue;
    }

    /**
     * <p>Getter for the field <code>jCheckBoxGreen</code>.</p>
     *
     * @return a {@link javax.swing.JCheckBox} object.
     */
    private JCheckBox getJCheckBoxGreen() {
        if (jCheckBoxGreen == null) {
            jCheckBoxGreen = new JCheckBox();
            jCheckBoxGreen.setLayout(null);
            jCheckBoxGreen.setText("Green");
            jCheckBoxGreen.setPreferredSize(new java.awt.Dimension(109, 12));
            jCheckBoxGreen.setSelected(true);
            jCheckBoxGreen.setBackground(new java.awt.Color(192, 192, 192));
            jCheckBoxGreen.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return jCheckBoxGreen;
    }

    /**
     * <p>Getter for the field <code>jCheckBoxRed</code>.</p>
     *
     * @return a {@link javax.swing.JCheckBox} object.
     */
    private JCheckBox getJCheckBoxRed() {
        if (jCheckBoxRed == null) {
            jCheckBoxRed = new JCheckBox();
            jCheckBoxRed.setLayout(null);
            jCheckBoxRed.setText("Red");
            jCheckBoxRed.setPreferredSize(new java.awt.Dimension(109, 14));
            jCheckBoxRed.setSelected(true);
            jCheckBoxRed.setBackground(new java.awt.Color(192, 192, 192));
            jCheckBoxRed.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return jCheckBoxRed;
    }

    /**
     * <p>Getter for the field <code>jCheckBoxWhite</code>.</p>
     *
     * @return a {@link javax.swing.JCheckBox} object.
     */
    private JCheckBox getJCheckBoxWhite() {
        if (jCheckBoxWhite == null) {
            jCheckBoxWhite = new JCheckBox();
            jCheckBoxWhite.setLayout(null);
            jCheckBoxWhite.setText("White");
            jCheckBoxWhite.setPreferredSize(new java.awt.Dimension(109, 13));
            jCheckBoxWhite.setSelected(true);
            jCheckBoxWhite.setBackground(new java.awt.Color(192, 192, 192));
            jCheckBoxWhite.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return jCheckBoxWhite;
    }

    /**
     * <p>Getter for the field <code>jCheckBoxColorless</code>.</p>
     *
     * @return a {@link javax.swing.JCheckBox} object.
     */
    private JCheckBox getJCheckBoxColorless() {
        if (jCheckBoxColorless == null) {
            jCheckBoxColorless = new JCheckBox();
            jCheckBoxColorless.setLayout(null);
            jCheckBoxColorless.setText("Colorless");
            jCheckBoxColorless.setPreferredSize(new java.awt.Dimension(80, 15));
            jCheckBoxColorless.setSelected(true);
            jCheckBoxColorless.setBackground(new java.awt.Color(192, 192, 192));
            jCheckBoxColorless.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return jCheckBoxColorless;
    }

    /**
     * <p>Getter for the field <code>jButtonOk</code>.</p>
     *
     * @return a {@link javax.swing.JButton} object.
     */
    private JButton getJButtonOk() {
        if (jButtonOk == null) {
            jButtonOk = new JButton();
            jButtonOk.setLayout(null);
            jButtonOk.setText("OK");
            jButtonOk.setPreferredSize(new java.awt.Dimension(100, 25));
            jButtonOk.addMouseListener(new CustomListener());
        }
        return jButtonOk;
    }

    /**
     * <p>Getter for the field <code>jCheckBoxBlack</code>.</p>
     *
     * @return a {@link javax.swing.JCheckBox} object.
     */
    private JCheckBox getJCheckBoxBlack() {
        if (jCheckBoxBlack == null) {
            jCheckBoxBlack = new JCheckBox();
            jCheckBoxBlack.setLayout(null);
            jCheckBoxBlack.setText("Black");
            jCheckBoxBlack.setPreferredSize(new java.awt.Dimension(97, 20));
            jCheckBoxBlack.setBackground(new java.awt.Color(192, 192, 192));
            jCheckBoxBlack.setSelected(true);
            jCheckBoxBlack.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {

                    if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        FilterCardTable();
                    }
                }
            });
        }
        return jCheckBoxBlack;
    }

    /**
     * <p>Getter for the field <code>jPanel2</code>.</p>
     *
     * @return a {@link javax.swing.JPanel} object.
     */
    private JPanel getJPanel2() {
        if (jPanel2 == null) {
            jPanel2 = new JPanel();
]]>
</codefragment>
</duplication>
<duplication lines="152" tokens="894">
<file line="518" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<file line="511" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<codefragment>
<![CDATA[
                    inputControl.selectCard(c, AllZone.getComputerBattlefield());
                }
            }
        });


    }//addListener()

    /**
     * <p>getCard.</p>
     *
     * @return a {@link forge.Card} object.
     */
    public Card getCard() {
        return detail.getCard();
    }

    /** {@inheritDoc} */
    public void setCard(Card card) {
        detail.setCard(card);
        picture.setCard(card);
    }

    /**
     * <p>addObservers.</p>
     */
    private void addObservers() {
        //Human Hand, Graveyard, and Library totals
        {//make sure to not interfer with anything below, since this is a very long method
            Observer o = new Observer() {
                public void update(Observable a, Object b) {
                    playerHandValue.setText("" + AllZone.getHumanHand().size());
                    playerGraveValue.setText("" + AllZone.getHumanGraveyard().size());
                    playerLibraryValue.setText("" + AllZone.getHumanLibrary().size());
                    playerFBValue.setText("" + CardFactoryUtil.getGraveyardActivationCards(AllZone.getHumanPlayer()).size());
                    playerRemovedValue.setText("" + AllZone.getHumanExile().size());

                }
            };
            AllZone.getHumanHand().addObserver(o);
            AllZone.getHumanGraveyard().addObserver(o);
            AllZone.getHumanLibrary().addObserver(o);
        }

        //opponent Hand, Graveyard, and Library totals
        {//make sure to not interfer with anything below, since this is a very long method
            Observer o = new Observer() {
                public void update(Observable a, Object b) {
                    oppHandValue.setText("" + AllZone.getComputerHand().size());
                    oppGraveValue.setText("" + AllZone.getComputerGraveyard().size());
                    oppLibraryValue.setText("" + AllZone.getComputerLibrary().size());
                    oppRemovedValue.setText("" + AllZone.getComputerExile().size());
                }
            };
            AllZone.getComputerHand().addObserver(o);
            AllZone.getComputerGraveyard().addObserver(o);
            AllZone.getComputerLibrary().addObserver(o);
        }


        //opponent life
        oppLifeLabel.setText("" + AllZone.getComputerPlayer().getLife());
        AllZone.getComputerPlayer().addObserver(new Observer() {
            public void update(Observable a, Object b) {
                int life = AllZone.getComputerPlayer().getLife();
                oppLifeLabel.setText("" + life);
            }
        });
        AllZone.getComputerPlayer().updateObservers();

        if (AllZone.getQuestData() != null) {
            File base = ForgeProps.getFile(IMAGE_ICON);
            String iconName = "";
            if (Constant.Quest.oppIconName[0] != null) {
                iconName = Constant.Quest.oppIconName[0];
                File file = new File(base, iconName);
                ImageIcon icon = new ImageIcon(file.toString());
                oppIconLabel.setIcon(icon);
                oppIconLabel.setAlignmentX(100);

            }
        }

        oppPCLabel.setText("Poison Counters: " + AllZone.getComputerPlayer().getPoisonCounters());
        AllZone.getComputerPlayer().addObserver(new Observer() {
            public void update(Observable a, Object b) {
                int pcs = AllZone.getComputerPlayer().getPoisonCounters();
                oppPCLabel.setText("Poison Counters: " + pcs);
            }
        });
        AllZone.getComputerPlayer().updateObservers();

        //player life
        playerLifeLabel.setText("" + AllZone.getHumanPlayer().getLife());
        AllZone.getHumanPlayer().addObserver(new Observer() {
            public void update(Observable a, Object b) {
                int life = AllZone.getHumanPlayer().getLife();
                playerLifeLabel.setText("" + life);
            }
        });
        AllZone.getHumanPlayer().updateObservers();

        playerPCLabel.setText("Poison Counters: " + AllZone.getHumanPlayer().getPoisonCounters());
        AllZone.getHumanPlayer().addObserver(new Observer() {
            public void update(Observable a, Object b) {
                int pcs = AllZone.getHumanPlayer().getPoisonCounters();
                playerPCLabel.setText("Poison Counters: " + pcs);
            }
        });
        AllZone.getHumanPlayer().updateObservers();

        //stack
        AllZone.getStack().addObserver(new Observer() {
            public void update(Observable a, Object b) {
                stackPanel.removeAll();
                MagicStack stack = AllZone.getStack();
                int count = 1;
                JLabel label;

                for (int i = stack.size() - 1; 0 <= i; i--) {
                    label = new JLabel("" + (count++) + ". " + stack.peekInstance(i).getStackDescription());

                    //update card detail
                    final CardPanel cardPanel = new CardPanel(stack.peekInstance(i).getSourceCard());
                    cardPanel.setLayout(new BorderLayout());
                    cardPanel.add(label);
                    cardPanel.addMouseMotionListener(new MouseMotionAdapter() {

                        @Override
                        public void mouseMoved(MouseEvent me) {
                            setCard(cardPanel.getCard());
                        }//mouseMoved
                    });

                    stackPanel.add(cardPanel);
                }

                stackPanel.revalidate();
                stackPanel.repaint();

                okButton.requestFocusInWindow();

            }
        });
        AllZone.getStack().updateObservers();
        //END, stack


        //self hand
        AllZone.getHumanHand().addObserver(new Observer() {
            public void update(Observable a, Object b) {
                PlayerZone pZone = (PlayerZone) a;
]]>
</codefragment>
</duplication>
<duplication lines="102" tokens="869">
<file line="1668" path="/Users/dhudson/mtg/cardforge/src/forge/GameAction.java"/>
<file line="1807" path="/Users/dhudson/mtg/cardforge/src/forge/GameAction.java"/>
<codefragment>
<![CDATA[
                        if (k[2].equals("Less")) {
                            if (k[7].equals("OnlyOneBonus")) { // Only Works for Color and Type
                                for (int string_no = 5; string_no < 7; string_no++) {
                                    String spilt = k[string_no];
                                    String color_spilt[] = spilt.split("/");

                                    for (int cs_num = 0; cs_num < color_spilt.length; cs_num++) {
                                        k[string_no] = color_spilt[cs_num];
                                        if (string_no == 5 && CardUtil.getColors(sa.getSourceCard()).contains(k[5]))
                                            break;
                                        if (string_no == 6 && (sa.getSourceCard().isType(k[6]))) break;
                                    }
                                }
                            }
                            if (k[7].contains("All Conditions")) { // Only Works for Color and Type
                                for (int string_no = 5; string_no < 7; string_no++) {
                                    String spilt = k[string_no];
                                    String color_spilt[] = spilt.split("/");
                                    for (int cs_num = 0; cs_num < color_spilt.length; cs_num++) {
                                        k[string_no] = color_spilt[cs_num];
                                        if (string_no == 5) {
                                            if (CardUtil.getColors(sa.getSourceCard()).contains(k[5]) || k[5].equals("All")) {
                                            } else {
                                                k[5] = "Nullified";
                                                break;
                                            }
                                        }
                                        if (string_no == 6) {
                                            if (sa.getSourceCard().isType(k[6]) || k[6].equals("All")) {
                                            } else {
                                                k[6] = "Nullified";
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (!k[5].equals("Nullified")) k[5] = "All";
                                if (!k[6].equals("Nullified")) k[6] = "All";
                            }
                            if ((k[1].equals("Player") && card.getController().equals(sa.getSourceCard().getController())
                                    || (k[1].equals("Opponent") && card.getController().equals(sa.getSourceCard().getController().getOpponent())) || k[1].equals("All"))
                                    && ((k[4].equals("Spell") && sa.isSpell() == true) || (k[4].equals("Ability") && sa.isAbility() == true)
                                    || (k[4].startsWith("Ability_Cycling") && sa.isCycling()) || (k[4].equals("Self") && originalCard.equals(card))
                                    || (k[4].equals("Enchanted") && originalCard.getEnchantedBy().contains(card)) || k[4].equals("All"))
                                    && ((CardUtil.getColors(sa.getSourceCard()).contains(k[5])) || k[5].equals("All"))
                                    /**
                                     *  Chris added a test for Changeling.
                                     *  This appears to reduce the cost correctly.
                                     *  Works for both the computer and the human.
                                     */
                                    && ((sa.getSourceCard().isType(k[6]))

                                    || (!(sa.getSourceCard().isType(k[6])) && k[7].contains("NonType")) || k[6].equals("All"))) {
                                if (k[7].contains("CardIsTapped")) {
                                    if (card.isTapped() == false) k[3] = "0";
                                }
                                if (k[7].contains("TargetInPlay")) {
                                    if (!Player_Play.contains(sa.getSourceCard())) k[3] = "0";
                                }
                                if (k[7].contains("TargetInHand")) {
                                    if (!Player_Hand.contains(sa.getSourceCard())) k[3] = "0";
                                }
                                if (k[7].contains("NonType")) {
                                    if (originalCard.isType(k[6])) k[3] = "0";
                                }
                                if (k[7].contains("OpponentTurn")) {
                                    if (AllZone.getPhase().isPlayerTurn(originalCard.getController())) k[3] = "0";
                                }
                                if (k[7].contains("Affinity")) {
                                    String spilt = k[7];
                                    String color_spilt[] = spilt.split("/");
                                    k[7] = color_spilt[1];
                                    CardList PlayerList = AllZoneUtil.getPlayerCardsInPlay(originalCard.getController());
                                    PlayerList = PlayerList.getType(k[7]);
                                    k[3] = String.valueOf(PlayerList.size());
                                }

                                String[] Numbers = new String[Max];
                                /*if("X".equals(k[3])) {
                                            for(int no = 0; no < Max; no ++) Numbers[no] = String.valueOf(no);
                                            String Number_ManaCost = " ";
                                            if(Mana.toString().length() == 1) {
                                                Number_ManaCost = Mana.toString().substring(0, 1);
                                            }
                                            else if(Mana.toString().length() == 0) {
                                                Number_ManaCost = "0"; // Should Never Occur
                                            }
                                            else {
                                                Number_ManaCost = Mana.toString().substring(0, 2);
                                            }
                                            Number_ManaCost = Number_ManaCost.trim();
                                            for(int check = 0; check < Max; check ++) {
                                                if(Number_ManaCost.equals(Numbers[check])) {
                                                    int xValue = CardFactoryUtil.xCount(card, card.getSVar("X"));
                                                    //if((spell.isXCost()) || (spell.isMultiKicker()) && (check - Integer.valueOf(k[3])) < 0) XBonus = XBonus - check + Integer.valueOf(k[3]);
                                                    Mana = Mana.replaceFirst(String.valueOf(check),String.valueOf(check - xValue));
                                                }
                                                if(Mana.equals("")) Mana = "0";
                                                manaCost = new ManaCost(Mana);
                                            }
                                        }*/
                                if (!"WUGRB".contains(k[3])) {
]]>
</codefragment>
</duplication>
<duplication lines="109" tokens="634">
<file line="102" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<file line="104" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<codefragment>
<![CDATA[
        new Gui_MultipleBlockers4(attacker, blockers, damage, this);
    }

    /**
     * <p>setupActions.</p>
     */
    private void setupActions() {
        HUMAN_GRAVEYARD_ACTION = new ZoneAction(AllZone.getHumanGraveyard(), HUMAN_GRAVEYARD);
        HUMAN_REMOVED_ACTION = new ZoneAction(AllZone.getHumanExile(), HUMAN_REMOVED);
        HUMAN_FLASHBACK_ACTION = new ZoneAction(AllZone.getHumanExile(), HUMAN_FLASHBACK) {

            private static final long serialVersionUID = 8120331222693706164L;

            @Override
            protected Card[] getCards() {
                return CardFactoryUtil.getGraveyardActivationCards(AllZone.getHumanPlayer()).toArray();
            }

            @Override
            protected void doAction(Card c) {
                if (!c.isLand()) {
                    SpellAbility[] sa = c.getSpellAbility();
                    sa[1].setActivatingPlayer(AllZone.getHumanPlayer());
                    if (sa[1].canPlay() && !c.isUnCastable()) AllZone.getGameAction().playSpellAbility(sa[1]);
                } else    // PlayLand checks if the land can be played
                    AllZone.getHumanPlayer().playLand(c);
            }
        };
        COMPUTER_GRAVEYARD_ACTION = new ZoneAction(AllZone.getComputerGraveyard(), COMPUTER_GRAVEYARD);
        COMPUTER_REMOVED_ACTION = new ZoneAction(AllZone.getComputerExile(), COMPUTER_REMOVED);
        CONCEDE_ACTION = new ConcedeAction();
    }

    /**
     * <p>addMenu.</p>
     */
    private void addMenu() {
        // Game Menu Creation
        Object[] obj = {
                HUMAN_GRAVEYARD_ACTION, HUMAN_REMOVED_ACTION, HUMAN_FLASHBACK_ACTION, COMPUTER_GRAVEYARD_ACTION,
                COMPUTER_REMOVED_ACTION, new JSeparator(),
                playsoundCheckboxForMenu, new JSeparator(), ErrorViewer.ALL_THREADS_ACTION,
                CONCEDE_ACTION};

        JMenu gameMenu = new JMenu(ForgeProps.getLocalized(MENU_BAR.MENU.TITLE));
        for (Object o : obj) {
            if (o instanceof ForgeAction) gameMenu.add(((ForgeAction) o).setupButton(new JMenuItem()));
            else if (o instanceof Action) gameMenu.add((Action) o);
            else if (o instanceof Component) gameMenu.add((Component) o);
            else throw new AssertionError();
        }

        // Phase Menu Creation
        JMenu gamePhases = new JMenu(ForgeProps.getLocalized(MENU_BAR.PHASE.TITLE));

        JMenuItem aiLabel = new JMenuItem("Computer");
        JMenuItem humanLabel = new JMenuItem("Human");

        Component[] objPhases = {aiLabel, cbAIUpkeep, cbAIDraw, cbAIBeginCombat,
                cbAIEndCombat, cbAIEndOfTurn, new JSeparator(),
                humanLabel, cbHumanUpkeep, cbHumanDraw, cbHumanBeginCombat,
                cbHumanEndCombat, cbHumanEndOfTurn};

        for (Component cmp : objPhases) {
            gamePhases.add(cmp);
        }

        // Dev Mode Creation
        JMenu devMenu = new JMenu(ForgeProps.getLocalized(MENU_BAR.DEV.TITLE));

        devMenu.setEnabled(Constant.Runtime.DevMode[0]);

        if (Constant.Runtime.DevMode[0]) {
            canLoseByDecking.setSelected(Constant.Runtime.Mill[0]);

            Action viewAIHand = new ZoneAction(AllZone.getComputerHand(), COMPUTER_HAND.BASE);
            Action viewAILibrary = new ZoneAction(AllZone.getComputerLibrary(), COMPUTER_LIBRARY.BASE);
            Action viewHumanLibrary = new ZoneAction(AllZone.getHumanLibrary(), HUMAN_LIBRARY.BASE);
            ForgeAction generateMana = new ForgeAction(MANAGEN) {
                private static final long serialVersionUID = 7171104690016706405L;

                public void actionPerformed(ActionEvent arg0) {
                    GuiDisplayUtil.devModeGenerateMana();
                }
            };

            // + Battlefield setup +
            ForgeAction setupBattleField = new ForgeAction(SETUPBATTLEFIELD) {
                private static final long serialVersionUID = -6660930759092583160L;

                public void actionPerformed(ActionEvent arg0) {
                    GuiDisplayUtil.devSetupGameState();
                }
            };
            // - Battlefield setup -

            //DevMode Tutor
            ForgeAction tutor = new ForgeAction(TUTOR) {
                private static final long serialVersionUID = 2003222642609217705L;

                public void actionPerformed(ActionEvent arg0) {
                    GuiDisplayUtil.devModeTutor();
                }
            };
            //end DevMode Tutor
            
            //DevMode AddCounter
            ForgeAction addCounter = new ForgeAction(ADDCOUNTER) {
				private static final long serialVersionUID = 3136264111882855268L;
]]>
</codefragment>
</duplication>
<duplication lines="89" tokens="551">
<file line="56" path="/Users/dhudson/mtg/cardforge/src/forge/ReadBoosterPack.java"/>
<file line="35" path="/Users/dhudson/mtg/cardforge/src/forge/ReadDraftBoosterPack.java"/>
<codefragment>
<![CDATA[
    public ReadDraftBoosterPack() {
        setup();
    }

    //returns "common", "uncommon", or "rare"
    /**
     * <p>getRarity.</p>
     *
     * @param cardName a {@link java.lang.String} object.
     * @return a {@link java.lang.String} object.
     */
    public String getRarity(String cardName) {
        if (commonList.containsName(cardName)) return "Common";
        if (uncommonList.containsName(cardName)) return "Uncommon";
        if (rareList.containsName(cardName)) return "Rare";

        ArrayList<String> land = new ArrayList<String>();
        land.add("Forest");
        land.add("Plains");
        land.add("Swamp");
        land.add("Mountain");
        land.add("Island");
        land.add("Terramorphic Expanse");
        land.add("Snow-Covered Forest");
        land.add("Snow-Covered Plains");
        land.add("Snow-Covered Swamp");
        land.add("Snow-Covered Mountain");
        land.add("Snow-Covered Island");
        if (land.contains(cardName)) return "Land";

        return "error";
    }

    /**
     * <p>getBoosterPack5.</p>
     *
     * @return a {@link forge.CardList} object.
     */
    public CardList getBoosterPack5() {
        CardList list = new CardList();
        for (int i = 0; i < 5; i++)
            list.addAll(getBoosterPack());

        for (int i = 0; i < 20; i++) {
            list.add(AllZone.getCardFactory().getCard("Forest", AllZone.getHumanPlayer()));
            list.add(AllZone.getCardFactory().getCard("Island", AllZone.getHumanPlayer()));
            list.add(AllZone.getCardFactory().getCard("Plains", AllZone.getHumanPlayer()));
            list.add(AllZone.getCardFactory().getCard("Mountain", AllZone.getHumanPlayer()));
            list.add(AllZone.getCardFactory().getCard("Swamp", AllZone.getHumanPlayer()));
            list.add(AllZone.getCardFactory().getCard("Snow-Covered Forest", AllZone.getHumanPlayer()));
            list.add(AllZone.getCardFactory().getCard("Snow-Covered Island", AllZone.getHumanPlayer()));
            list.add(AllZone.getCardFactory().getCard("Snow-Covered Plains", AllZone.getHumanPlayer()));
            list.add(AllZone.getCardFactory().getCard("Snow-Covered Mountain", AllZone.getHumanPlayer()));
            list.add(AllZone.getCardFactory().getCard("Snow-Covered Swamp", AllZone.getHumanPlayer()));
        }

        for (int i = 0; i < 4; i++)
            list.add(AllZone.getCardFactory().getCard("Terramorphic Expanse", AllZone.getHumanPlayer()));

        return list;
    }//getBoosterPack5()

    /**
     * <p>getBoosterPack.</p>
     *
     * @return a {@link forge.CardList} object.
     */
    public CardList getBoosterPack() {
        CardList pack = new CardList();

        pack.add(getRandomCard(rareList));

        for (int i = 0; i < 3; i++)
            pack.add(getRandomCard(uncommonList));

        //11 commons, 7 creature 4 noncreature
        CardList variety;
        for (int i = 0; i < 7; i++) {
            variety = getVariety(commonCreatureList);
            pack.add(getRandomCard(variety));
        }

        for (int i = 0; i < 4; i++) {
            variety = getVariety(commonNonCreatureList);
            pack.add(getRandomCard(variety));
        }

        if (pack.size() != 15)
            throw new RuntimeException("ReadDraftBoosterPack : getBoosterPack() error, pack is not 15 cards - "
]]>
</codefragment>
</duplication>
<duplication lines="79" tokens="523">
<file line="275" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/Generate2ColorDeck.java"/>
<file line="300" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/Generate3ColorDeck.java"/>
<codefragment>
<![CDATA[
                throw new RuntimeException("Generate3ColorDeck : get3ColorDeck -- looped too much -- DL");

            tDeck.add(AllZone.getCardFactory().getCard(s, AllZone.getHumanPlayer()));
            int n = CardCounts.get(s);
            CardCounts.put(s, n + 1);
            tmpDeck += s + "\n";
        }

        numLands -= nDLands;

        if (numLands > 0)    // attempt to optimize basic land counts according to color representation
        {
            CCnt ClrCnts[] = {new CCnt("Plains", 0),
                    new CCnt("Island", 0),
                    new CCnt("Swamp", 0),
                    new CCnt("Mountain", 0),
                    new CCnt("Forest", 0)};

            // count each card color using mana costs
            // TODO: count hybrid mana differently?
            for (int i = 0; i < tDeck.size(); i++) {
                String mc = tDeck.get(i).getManaCost();

                // count each mana symbol in the mana cost
                for (int j = 0; j < mc.length(); j++) {
                    char c = mc.charAt(j);

                    if (c == 'W')
                        ClrCnts[0].Count++;
                    else if (c == 'U')
                        ClrCnts[1].Count++;
                    else if (c == 'B')
                        ClrCnts[2].Count++;
                    else if (c == 'R')
                        ClrCnts[3].Count++;
                    else if (c == 'G')
                        ClrCnts[4].Count++;
                }
            }

            // total of all ClrCnts
            int totalColor = 0;
            for (int i = 0; i < 5; i++) {
                totalColor += ClrCnts[i].Count;
                tmpDeck += ClrCnts[i].Color + ":" + ClrCnts[i].Count + "\n";
            }

            tmpDeck += "totalColor:" + totalColor + "\n";

            for (int i = 0; i < 5; i++) {
                if (ClrCnts[i].Count > 0) {    // calculate number of lands for each color
                    p = (float) ClrCnts[i].Count / (float) totalColor;
                    int nLand = (int) ((float) numLands * p);
                    tmpDeck += "nLand-" + ClrCnts[i].Color + ":" + nLand + "\n";

                    // just to prevent a null exception by the deck size fixing code
                    CardCounts.put(ClrCnts[i].Color, nLand);

                    for (int j = 0; j <= nLand; j++)
                        tDeck.add(AllZone.getCardFactory().getCard(ClrCnts[i].Color, AllZone.getComputerPlayer()));
                }
            }
        }
        tmpDeck += "DeckSize:" + tDeck.size() + "\n";

        // fix under-sized or over-sized decks, due to integer arithmetic
        if (tDeck.size() < Size) {
            int diff = Size - tDeck.size();

            for (int i = 0; i < diff; i++) {
                Card c = tDeck.get(r.nextInt(tDeck.size()));

                lc = 0;
                while (CardCounts.get(c.getName()) > 3 || lc > Size) {
                    c = tDeck.get(r.nextInt(tDeck.size()));
                    lc++;
                }
                if (lc > Size)
                    throw new RuntimeException("Generate3ColorDeck : get3ColorDeck -- looped too much -- undersize");
]]>
</codefragment>
</duplication>
<duplication lines="80" tokens="519">
<file line="825" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_Filter.java"/>
<file line="810" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_Quest_Filter.java"/>
<codefragment>
<![CDATA[
                        deckDisplay.updateDisplay(g.stCardList, deckDisplay.getBottom());
                    } else {
                        if (jCheckBoxBlack.isSelected() == false) {
                            filterCardList = filter.CardListColorFilter(filterCardList, "black");
                            g.blackCheckBox.setSelected(false);
                            g.blackCheckBox.setEnabled(false);
                        }
                        if (jCheckBoxBlue.isSelected() == false) {
                            filterCardList = filter.CardListColorFilter(filterCardList, "blue");
                            g.blueCheckBox.setSelected(false);
                            g.blueCheckBox.setEnabled(false);
                        }
                        if (jCheckBoxGreen.isSelected() == false) {
                            filterCardList = filter.CardListColorFilter(filterCardList, "green");
                            g.greenCheckBox.setSelected(false);
                            g.greenCheckBox.setEnabled(false);
                        }
                        if (jCheckBoxRed.isSelected() == false) {
                            filterCardList = filter.CardListColorFilter(filterCardList, "red");
                            g.redCheckBox.setSelected(false);
                            g.redCheckBox.setEnabled(false);
                        }
                        if (jCheckBoxWhite.isSelected() == false) {
                            filterCardList = filter.CardListColorFilter(filterCardList, "white");
                            g.whiteCheckBox.setSelected(false);
                            g.whiteCheckBox.setEnabled(false);
                        }
                        if (jCheckBoxColorless.isSelected() == false) {
                            filterCardList = filter.CardListColorFilter(filterCardList, "colorless");
                            g.colorlessCheckBox.setSelected(false);
                            g.colorlessCheckBox.setEnabled(false);
                        }
                        if (jCheckBoxArtifact.isSelected() == false) {
                            filterCardList = filter.CardListTypeFilter(filterCardList, "artifact");
                            g.artifactCheckBox.setSelected(false);
                            g.artifactCheckBox.setEnabled(false);
                        }
                        if (jCheckBoxCreature.isSelected() == false) {
                            filterCardList = filter.CardListTypeFilter(filterCardList, "creature");
                            g.creatureCheckBox.setSelected(false);
                            g.creatureCheckBox.setEnabled(false);
                        }
                        if (jCheckBoxEnchant.isSelected() == false) {
                            filterCardList = filter.CardListTypeFilter(filterCardList, "enchantment");
                            g.enchantmentCheckBox.setSelected(false);
                            g.enchantmentCheckBox.setEnabled(false);
                        }
                        if (jCheckBoxInstant.isSelected() == false) {
                            filterCardList = filter.CardListTypeFilter(filterCardList, "instant");
                            g.instantCheckBox.setSelected(false);
                            g.instantCheckBox.setEnabled(false);
                        }
                        if (jCheckBoxLand.isSelected() == false) {
                            filterCardList = filter.CardListTypeFilter(filterCardList, "land");
                            g.landCheckBox.setSelected(false);
                            g.landCheckBox.setEnabled(false);
                        }
                        if (jCheckBoxPlaneswalker.isSelected() == false) {
                            filterCardList = filter.CardListTypeFilter(filterCardList, "planeswalker");
                            g.planeswalkerCheckBox.setSelected(false);
                            g.planeswalkerCheckBox.setEnabled(false);
                        }
                        if (jCheckBoxSorcery.isSelected() == false) {
                            filterCardList = filter.CardListTypeFilter(filterCardList, "sorcery");
                            g.sorceryCheckBox.setSelected(false);
                            g.sorceryCheckBox.setEnabled(false);
                        }

                        deckDisplay.updateDisplay(filterCardList, deckDisplay.getBottom());
                    }
                }
            }

        }

        dispose();

    }

}
]]>
</codefragment>
</duplication>
<duplication lines="122" tokens="516">
<file line="1022" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<file line="877" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor.java"/>
<codefragment>
<![CDATA[
            Gui_Quest_DeckEditor g = Gui_Quest_DeckEditor.this;
            GUI_DeckAnalysis dAnalysis = new GUI_DeckAnalysis(g, bottomModel);
            dAnalysis.setVisible(true);
            g.setEnabled(false);
        }
    }

    /**
     * <p>changePictureButton_actionPerformed.</p>
     *
     * @param e a {@link java.awt.event.ActionEvent} object.
     */
    void changePictureButton_actionPerformed(ActionEvent e) {
        if (cCardHQ != null) {
            File file = getImportFilename();
            if (file != null) {
                String fileName = GuiDisplayUtil.cleanString(cCardHQ.getName()) + ".jpg";
                File base = ForgeProps.getFile(IMAGE_BASE);
                File f = new File(base, fileName);
                f.delete();

                try {

                    f.createNewFile();
                    FileOutputStream fos = new FileOutputStream(f);
                    FileInputStream fis = new FileInputStream(file);
                    byte[] buff = new byte[32 * 1024];
                    int length;
                    while (fis.available() > 0) {
                        length = fis.read(buff);
                        if (length > 0) fos.write(buff, 0, length);
                    }
                    fos.flush();
                    fis.close();
                    fos.close();
                    setCard(cCardHQ);

                } catch (IOException e1) {
                    e1.printStackTrace();
                }

            }
        }
    }

    /**
     * <p>getImportFilename.</p>
     *
     * @return a {@link java.io.File} object.
     */
    private File getImportFilename() {
        JFileChooser chooser = new JFileChooser(previousDirectory);
        ImagePreviewPanel preview = new ImagePreviewPanel();
        chooser.setAccessory(preview);
        chooser.addPropertyChangeListener(preview);
        chooser.addChoosableFileFilter(dckFilter);
        int returnVal = chooser.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            previousDirectory = file.getParentFile();
            return file;
        }


        return null;

    }

    private FileFilter dckFilter = new FileFilter() {

        @Override
        public boolean accept(File f) {
            return f.getName().endsWith(".jpg") || f.isDirectory();
        }

        @Override
        public String getDescription() {
            return "*.jpg";
        }

    };


    /**
     * <p>removePictureButton_actionPerformed.</p>
     *
     * @param e a {@link java.awt.event.ActionEvent} object.
     */
    void removePictureButton_actionPerformed(ActionEvent e) {
        if (cCardHQ != null) {
            String options[] = {"Yes", "No"};
            int value = JOptionPane.showOptionDialog(null,
                    "Do you want delete " + cCardHQ.getName() + " picture?", "Delete picture",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
            if (value == 0) {
                String fileName = GuiDisplayUtil.cleanString(cCardHQ.getName()) + ".jpg";
                File base = ForgeProps.getFile(IMAGE_BASE);
                File f = new File(base, fileName);
                f.delete();
                JOptionPane.showMessageDialog(null, "Picture " + cCardHQ.getName() + " deleted.",
                        "Delete picture", JOptionPane.INFORMATION_MESSAGE);
                setCard(cCardHQ);
            }
        }

    }


    /**
     * <p>removeButton_actionPerformed.</p>
     *
     * @param e a {@link java.awt.event.ActionEvent} object.
     */
    void removeButton_actionPerformed(ActionEvent e) {
        setTitle("Deck Editor : " + customMenu.getDeckName() + " : unsaved");

        int n = bottomTable.getSelectedRow();
        if (n != -1) {
            Card c = bottomModel.rowToCard(n);
            bottomModel.removeCard(c);
            if (filterUsed == true) {
]]>
</codefragment>
</duplication>
<duplication lines="136" tokens="513">
<file line="132" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadSetPictures_LQ.java"/>
<file line="134" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MigrateLocalMWSSetPictures_HQ.java"/>
<codefragment>
<![CDATA[
                new Thread(Gui_MigrateLocalMWSSetPictures_HQ.this).start();
                b.setEnabled(false);
            }
        });
//        p0.add(b);

        p0.add(Box.createVerticalStrut(5));

        //Progress
        p0.add(bar);
        bar.setStringPainted(true);
        //bar.setString(ForgeProps.getLocalized(BAR_BEFORE_START));
        bar.setString(card + "/" + cards.length);
        //bar.setString(String.format(ForgeProps.getLocalized(card == cards.length? BAR_CLOSE:BAR_WAIT), this.card, cards.length));
        Dimension d = bar.getPreferredSize();
        d.width = 300;
        bar.setPreferredSize(d);

        //JOptionPane
        Object[] options = {b, close = new JButton(ForgeProps.getLocalized(BUTTONS.CANCEL))};
        dlg = new JOptionPane(p0, DEFAULT_OPTION, PLAIN_MESSAGE, null, options, options[1]);
    }

    /** {@inheritDoc} */
    @Override
    public int getMinimum() {
        return 0;
    }

    /** {@inheritDoc} */
    @Override
    public int getValue() {
        return card;
    }

    /** {@inheritDoc} */
    @Override
    public int getExtent() {
        return 0;
    }

    /** {@inheritDoc} */
    @Override
    public int getMaximum() {
        return cards == null ? 0 : cards.length;
    }

    /**
     * <p>update.</p>
     *
     * @param card a int.
     */
    private void update(int card) {
        this.card = card;

        final class Worker implements Runnable {
            private int card;

            Worker(int card) {
                this.card = card;
            }

            public void run() {
                fireStateChanged();

                StringBuilder sb = new StringBuilder();

                int a = getAverageTimePerCard();

                if (card != cards.length) {
                    sb.append(card + "/" + cards.length + " - ");

                    long t2Go = (cards.length - card) * a;

                    boolean secOnly = true;
                    if (t2Go > 3600000) {
                        sb.append(String.format("%02d:", t2Go / 3600000));
                        t2Go = t2Go % 3600000;
                        secOnly = false;
                    }
                    if (t2Go > 60000) {
                        sb.append(String.format("%02d:", t2Go / 60000));
                        t2Go = t2Go % 60000;
                        secOnly = false;
                    }
                    if (!secOnly)
                        sb.append(String.format("%02d remaining.", t2Go / 1000));
                    else
                        sb.append(String.format("0:%02d remaining.", t2Go / 1000));
                } else
                    sb.append(String.format(ForgeProps.getLocalized(BAR_CLOSE), card, cards.length));

                bar.setString(sb.toString());
                //bar.setString(String.format(ForgeProps.getLocalized(card == cards.length? BAR_CLOSE:BAR_WAIT), card,
                //        cards.length));
                System.out.println(card + "/" + cards.length + " - " + a);
            }
        }
        ;
        EventQueue.invokeLater(new Worker(card));
    }

    /**
     * <p>Getter for the field <code>dlg</code>.</p>
     *
     * @param frame a {@link javax.swing.JFrame} object.
     * @return a {@link javax.swing.JDialog} object.
     */
    public JDialog getDlg(JFrame frame) {
        final JDialog dlg = this.dlg.createDialog(frame, ForgeProps.getLocalized(TITLE));
        close.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dlg.setVisible(false);
            }
        });
        return dlg;
    }

    /**
     * <p>Setter for the field <code>cancel</code>.</p>
     *
     * @param cancel a boolean.
     */
    public void setCancel(boolean cancel) {
        this.cancel = cancel;
    }


    /**
     * <p>run.</p>
     */
    public void run() {
        BufferedInputStream in;
        BufferedOutputStream out;

        File base = ForgeProps.getFile(IMAGE_BASE);
]]>
</codefragment>
</duplication>
<duplication lines="92" tokens="486">
<file line="1099" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<file line="1093" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<codefragment>
<![CDATA[
        picturePanel.setCardPanel(picture);
    }

    /**
     * <p>cancelButtonActionPerformed.</p>
     *
     * @param evt a {@link java.awt.event.ActionEvent} object.
     */
    private void cancelButtonActionPerformed(ActionEvent evt) {
        inputControl.selectButtonCancel();
    }

    /**
     * <p>okButtonActionPerformed.</p>
     *
     * @param evt a {@link java.awt.event.ActionEvent} object.
     */
    private void okButtonActionPerformed(ActionEvent evt) {
        inputControl.selectButtonOK();
    }

    /**
     * Exit the Application
     */
    private void concede() {
        savePrefs();
        dispose();
        Constant.Runtime.matchState.addLose();
        if (!Constant.Quest.fantasyQuest[0])
            new Gui_WinLose();
        else {
            //new Gui_WinLose(Constant.Quest.humanList[0], Constant.Quest.computerList[0],Constant.Quest.humanLife[0], Constant.Quest.computerLife[0]);
            CardList humanList = forge.quest.data.QuestUtil.getHumanPlantAndPet(AllZone.getQuestData(), AllZone.getQuestAssignment());
            CardList computerList = forge.quest.data.QuestUtil.getComputerCreatures(AllZone.getQuestData(), AllZone.getQuestAssignment());

            int humanLife = AllZone.getQuestData().getLife();
            int computerLife = 20;

            if (AllZone.getQuestAssignment() != null)
                computerLife = AllZone.getQuestAssignment().getComputerLife();
            new Gui_WinLose(humanList, computerList, humanLife, computerLife);
        }
    }

    // ********** Phase stuff in Display ******************
    /** {@inheritDoc} */
    public boolean stopAtPhase(Player turn, String phase) {
        if (turn.isComputer()) {
            if (phase.equals(Constant.Phase.End_Of_Turn))
                return cbAIEndOfTurn.isSelected();
            else if (phase.equals(Constant.Phase.Upkeep))
                return cbAIUpkeep.isSelected();
            else if (phase.equals(Constant.Phase.Draw))
                return cbAIDraw.isSelected();
            else if (phase.equals(Constant.Phase.Combat_Begin))
                return cbAIBeginCombat.isSelected();
            else if (phase.equals(Constant.Phase.Combat_End))
                return cbAIEndCombat.isSelected();
        } else {
            if (phase.equals(Constant.Phase.End_Of_Turn))
                return cbHumanEndOfTurn.isSelected();
            else if (phase.equals(Constant.Phase.Upkeep))
                return cbHumanUpkeep.isSelected();
            else if (phase.equals(Constant.Phase.Draw))
                return cbHumanDraw.isSelected();
            else if (phase.equals(Constant.Phase.Combat_Begin))
                return cbHumanBeginCombat.isSelected();
            else if (phase.equals(Constant.Phase.Combat_End))
                return cbHumanEndCombat.isSelected();
        }
        return true;
    }

    /**
     * <p>loadPrefs.</p>
     *
     * @return a boolean.
     */
    public boolean loadPrefs() {
        ForgePreferences fp = Gui_NewGame.preferences;

        cbAIUpkeep.setSelected(fp.bAIUpkeep);
        cbAIDraw.setSelected(fp.bAIDraw);
        cbAIEndOfTurn.setSelected(fp.bAIEOT);
        cbAIBeginCombat.setSelected(fp.bAIBeginCombat);
        cbAIEndCombat.setSelected(fp.bAIEndCombat);

        cbHumanUpkeep.setSelected(fp.bHumanUpkeep);
        cbHumanDraw.setSelected(fp.bHumanDraw);
        cbHumanEndOfTurn.setSelected(fp.bHumanEOT);
        cbHumanBeginCombat.setSelected(fp.bHumanBeginCombat);
        cbHumanEndCombat.setSelected(fp.bHumanEndCombat);
]]>
</codefragment>
</duplication>
<duplication lines="108" tokens="486">
<file line="275" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<file line="276" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<codefragment>
<![CDATA[
        return canLoseByDecking.isSelected();
    }

    /**
     * <p>getButtonOK.</p>
     *
     * @return a {@link forge.MyButton} object.
     */
    public MyButton getButtonOK() {
        MyButton ok = new MyButton() {
            public void select() {
                inputControl.selectButtonOK();
            }

            public boolean isSelectable() {
                return okButton.isEnabled();
            }

            public void setSelectable(boolean b) {
                okButton.setEnabled(b);
            }

            public String getText() {
                return okButton.getText();
            }

            public void setText(String text) {
                okButton.setText(text);
            }

            public void reset() {
                okButton.setText("OK");
            }
        };

        return ok;
    }//getButtonOK()

    /**
     * <p>getButtonCancel.</p>
     *
     * @return a {@link forge.MyButton} object.
     */
    public MyButton getButtonCancel() {
        MyButton cancel = new MyButton() {
            public void select() {
                inputControl.selectButtonCancel();
            }

            public boolean isSelectable() {
                return cancelButton.isEnabled();
            }

            public void setSelectable(boolean b) {
                cancelButton.setEnabled(b);
            }

            public String getText() {
                return cancelButton.getText();
            }

            public void setText(String text) {
                cancelButton.setText(text);
            }

            public void reset() {
                cancelButton.setText("Cancel");
            }
        };
        return cancel;
    }//getButtonCancel()

    /** {@inheritDoc} */
    public void showCombat(String message) {
        combatArea.setText(message);
    }

    /** {@inheritDoc} */
    public void showMessage(String s) {
        messageArea.setText(s);

        Border border = null;
        int thickness = 3;

        if (AllZone.getStack().size() > 0 && AllZone.getStack().peekInstance().getActivatingPlayer().isComputer())
            border = BorderFactory.createLineBorder(new Color(0, 255, 255), thickness);
        else if (s.contains("Main"))
            border = BorderFactory.createLineBorder(new Color(30, 0, 255), thickness);
        else if (s.contains("To Block"))
            border = BorderFactory.createLineBorder(new Color(13, 179, 0), thickness);
        else if (s.contains("Play Instants and Abilities") || s.contains("Combat") || s.contains("Damage"))
            border = BorderFactory.createLineBorder(new Color(255, 174, 0), thickness);
        else if (s.contains("Declare Attackers"))
            border = BorderFactory.createLineBorder(new Color(255, 0, 0), thickness);
        else if (s.contains("Upkeep") || s.contains("Draw") || s.contains("End of Turn"))
            border = BorderFactory.createLineBorder(new Color(200, 0, 170), thickness);
        else
            border = new EmptyBorder(1, 1, 1, 1);

        messageArea.setBorder(border);
    }

    /**
     * <p>addListeners.</p>
     */
    private void addListeners() {
        //mouse Card Detail
        playerHandPanel.addMouseMotionListener(new MouseMotionAdapter() {
]]>
</codefragment>
</duplication>
<duplication lines="52" tokens="450">
<file line="336" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Animate.java"/>
<file line="730" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Animate.java"/>
<codefragment>
<![CDATA[
        HashMap<String, String> params = af.getMapParams();
        Card host = af.getHostCard();
        Hashtable<String, String> svars = host.getSVars();

        //AF specific params
        int power = -1;
        if (params.containsKey("Power")) power = AbilityFactory.calculateAmount(host, params.get("Power"), sa);
        int toughness = -1;
        if (params.containsKey("Toughness"))
            toughness = AbilityFactory.calculateAmount(host, params.get("Toughness"), sa);

        boolean permanent = params.containsKey("Permanent") ? true : false;

        final ArrayList<String> types = new ArrayList<String>();
        if (params.containsKey("Types")) types.addAll(Arrays.asList(params.get("Types").split(",")));

        //allow ChosenType - overrides anything else specified
        if (types.contains("ChosenType")) {
            types.clear();
            types.add(host.getChosenType());
        }

        final ArrayList<String> keywords = new ArrayList<String>();
        if (params.containsKey("Keywords")) keywords.addAll(Arrays.asList(params.get("Keywords").split(" & ")));
        //allow SVar substitution for keywords
        for (int i = 0; i < keywords.size(); i++) {
            String k = keywords.get(i);
            if (svars.containsKey(k)) {
                keywords.add(svars.get(k));
                keywords.remove(k);
            }
        }

        //colors to be added or changed to
        String tmpDesc = "";
        if (params.containsKey("Colors")) {
            String colors = params.get("Colors");
            if (colors.equals("ChosenColor")) {
                tmpDesc = CardUtil.getShortColorsString(new ArrayList<String>(Arrays.asList(host.getChosenColor().split(","))));
            } else {
                tmpDesc = CardUtil.getShortColorsString(new ArrayList<String>(Arrays.asList(colors.split(","))));
            }
        }
        final String finalDesc = tmpDesc;

        //abilities to add to the animated being
        ArrayList<String> abilities = new ArrayList<String>();
        if (params.containsKey("Abilities")) abilities.addAll(Arrays.asList(params.get("Abilities").split(",")));

        //triggers to add to the animated being
        ArrayList<String> triggers = new ArrayList<String>();
        if (params.containsKey("Triggers")) triggers.addAll(Arrays.asList(params.get("Triggers").split(",")));
]]>
</codefragment>
</duplication>
<duplication lines="62" tokens="444">
<file line="84" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_Filter.java"/>
<file line="81" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_Quest_Filter.java"/>
<codefragment>
<![CDATA[
            getContentPane().setLayout(new AnchorLayout());
            {
                NameText = new JTextField();
                getContentPane().add(
                        getJPanel2(),
                        new AnchorConstraint(293, 972, 837, 534, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL));
                getContentPane().add(
                        getJButtonOk(),
                        new AnchorConstraint(873, 638, 965, 384, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL));
                getContentPane().add(
                        getJPanel1(),
                        new AnchorConstraint(293, 483, 837, 45, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL));
                getContentPane().add(
                        NameText,
                        new AnchorConstraint(38, 969, 126, 362, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL));
                NameText.setPreferredSize(new java.awt.Dimension(148, 24));
                NameText.addKeyListener(new java.awt.event.KeyAdapter() {
                    @Override
                    public void keyPressed(java.awt.event.KeyEvent e) {

                        if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                            FilterCardTable();
                        }
                    }
                });
            }
            {
                jLabel1 = new JLabel();
                getContentPane().add(
                        jLabel1,
                        new AnchorConstraint(4, 313, 153, 41, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL));
                getContentPane().add(
                        getJTextField1(),
                        new AnchorConstraint(159, 969, 248, 360, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL));
                getContentPane().add(
                        getJLabel5(),
                        new AnchorConstraint(126, 313, 275, 41, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL, AnchorConstraint.ANCHOR_REL,
                                AnchorConstraint.ANCHOR_REL));
                jLabel1.setText("Name:");
                jLabel1.setPreferredSize(new java.awt.Dimension(75, 50));
                jLabel1.setLayout(null);
                jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 16));
                jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
            }
            setVisible(true);
            this.setPreferredSize(new java.awt.Dimension(280, 300));

            Dimension screen = getToolkit().getScreenSize();
            int x = (screen.width - 280) / 2;
]]>
</codefragment>
</duplication>
<duplication lines="129" tokens="434">
<file line="382" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<file line="231" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor.java"/>
<codefragment>
<![CDATA[
    }

    /**
     * <p>filterByColor.</p>
     *
     * @param c a {@link forge.Card} object.
     * @return a boolean.
     */
    private boolean filterByColor(Card c) {
        boolean filterOut = false;

        if (!whiteCheckBox.isSelected()) {
            if (CardUtil.getColors(c).contains(Constant.Color.White)) {
                filterOut = true;
            }
        }

        if (!blueCheckBox.isSelected()) {
            if (CardUtil.getColors(c).contains(Constant.Color.Blue)) {
                filterOut = true;
            }
        }

        if (!blackCheckBox.isSelected()) {
            if (CardUtil.getColors(c).contains(Constant.Color.Black)) {
                filterOut = true;
            }
        }

        if (!redCheckBox.isSelected()) {
            if (CardUtil.getColors(c).contains(Constant.Color.Red)) {
                filterOut = true;
            }
        }

        if (!greenCheckBox.isSelected()) {
            if (CardUtil.getColors(c).contains(Constant.Color.Green)) {
                filterOut = true;
            }
        }

        if (!colorlessCheckBox.isSelected()) {
            if (CardUtil.getColors(c).contains(Constant.Color.Colorless)) {
                filterOut = true;
            }
        }

        return filterOut;
    }

    /**
     * <p>filterByType.</p>
     *
     * @param c a {@link forge.Card} object.
     * @return a boolean.
     */
    private boolean filterByType(Card c) {
        boolean filterOut = false;

        if (!landCheckBox.isSelected() && c.isLand()) {
            filterOut = true;
        }

        if (!creatureCheckBox.isSelected() && c.isCreature()) {
            filterOut = true;
        }

        if (!sorceryCheckBox.isSelected() && c.isSorcery()) {
            filterOut = true;
        }

        if (!instantCheckBox.isSelected() && c.isInstant()) {
            filterOut = true;
        }

        if (!planeswalkerCheckBox.isSelected() && c.isPlaneswalker()) {
            filterOut = true;
        }

        if (!artifactCheckBox.isSelected() && c.isArtifact()) {
            filterOut = true;
        }

        if (!enchantmentCheckBox.isSelected() && c.isEnchantment()) {
            filterOut = true;
        }

        return filterOut;
    }

    /**
     * <p>getTopTableModel.</p>
     *
     * @return a {@link forge.TableModel} object.
     */
    public TableModel getTopTableModel() {
        return topModel;
    }


    //top shows available card pool
    /**
     * <p>Getter for the field <code>top</code>.</p>
     *
     * @return a {@link forge.CardList} object.
     */
    public CardList getTop() {
        return topModel.getCards();
    }

    //bottom shows cards that the user has chosen for his library
    /**
     * <p>Getter for the field <code>bottom</code>.</p>
     *
     * @return a {@link forge.CardList} object.
     */
    public CardList getBottom() {
        return bottomModel.getCards();
    }


    /**
     * <p>show.</p>
     *
     * @param exitCommand a {@link forge.Command} object.
     */
    public void show(final Command exitCommand) {
        final Command exit = new Command() {
            private static final long serialVersionUID = -7428793574300520612L;
]]>
</codefragment>
</duplication>
<duplication lines="54" tokens="428">
<file line="92" path="/Users/dhudson/mtg/cardforge/src/forge/QuestData_Prefs.java"/>
<file line="114" path="/Users/dhudson/mtg/cardforge/src/forge/quest/data/QuestPreferences.java"/>
<codefragment>
<![CDATA[
                else if (split[0].equals("winsForHardAI"))
                    setWinsForHardAI(split[1]);
                else if (split[0].equals("startingBasicLand"))
                    setStartingBasic(split[1]);
                else if (split[0].equals("startingSnowBasicLand"))
                    setStartingSnowBasic(split[1]);
                else if (split[0].equals("startingCommons"))
                    setStartingCommons(split[1]);
                else if (split[0].equals("startingUncommons"))
                    setStartingUncommons(split[1]);
                else if (split[0].equals("startingRares"))
                    setStartingRares(split[1]);
                else if (split[0].equals("startingCredits"))
                    setStartingCredits(split[1]);
                else if (split[0].equals("boosterPackCommon"))
                    setNumCommon(split[1]);
                else if (split[0].equals("boosterPackUncommon"))
                    setNumUncommon(split[1]);
                else if (split[0].equals("boosterPackRare"))
                    setNumRares(split[1]);
                else if (split[0].equals("matchRewardBase"))
                    setMatchRewardBase(split[1]);
                else if (split[0].equals("matchRewardTotalWins"))
                    setMatchRewardTotalWins(split[1]);
                else if (split[0].equals("matchRewardNoLosses"))
                    setMatchRewardNoLosses(split[1]);
                else if (split[0].equals("matchRewardMilledWinBonus"))
                    setMatchRewardMilledWinBonus(split[1]);
                else if (split[0].equals("matchRewardPoisonWinBonus"))
                    setMatchRewardPoisonWinBonus(split[1]);
                else if (split[0].equals("matchRewardAltWinBonus"))
                    setMatchRewardAltWinBonus(split[1]);
                else if (split[0].equals("matchRewardWinOnFirstTurn"))
                    setMatchRewardWinFirst(split[1]);
                else if (split[0].equals("matchRewardWinByTurnFive"))
                    setMatchRewardWinByFifth(split[1]);
                else if (split[0].equals("matchRewardWinByTurnTen"))
                    setMatchRewardWinByTen(split[1]);
                else if (split[0].equals("matchRewardWinByTurnFifteen"))
                    setMatchRewardWinByFifteen(split[1]);
                else if (split[0].equals("matchRewardMullToZero"))
                    setMatchMullToZero(split[1]);
            }
        } catch (Exception e) {
            System.out.println("Trouble grabbing quest data preferences. Using default values.");
        }
    }

    /**
     * <p>getDifficulty.</p>
     *
     * @return an array of {@link java.lang.String} objects.
     */
    public static String[] getDifficulty() {
]]>
</codefragment>
</duplication>
<duplication lines="50" tokens="419">
<file line="34" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/Generate2ColorDeck.java"/>
<file line="36" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/Generate3ColorDeck.java"/>
<codefragment>
<![CDATA[
    public Generate3ColorDeck(String Clr1, String Clr2, String Clr3) {
        r = MyRandom.random;

        CardCounts = new HashMap<String, Integer>();

        ClrMap = new HashMap<String, String>();
        ClrMap.put("white", "W");
        ClrMap.put("blue", "U");
        ClrMap.put("black", "B");
        ClrMap.put("red", "R");
        ClrMap.put("green", "G");

        notColors = new ArrayList<String>();
        notColors.add("white");
        notColors.add("blue");
        notColors.add("black");
        notColors.add("red");
        notColors.add("green");

        DualLands = new ArrayList<DLnd>();
        DualLands.add(new DLnd("Tundra", "WU"));
        DualLands.add(new DLnd("Hallowed Fountain", "WU"));
        DualLands.add(new DLnd("Underground Sea", "UB"));
        DualLands.add(new DLnd("Watery Grave", "UB"));
        DualLands.add(new DLnd("Badlands", "BR"));
        DualLands.add(new DLnd("Blood Crypt", "BR"));
        DualLands.add(new DLnd("Taiga", "RG"));
        DualLands.add(new DLnd("Stomping Ground", "RG"));
        DualLands.add(new DLnd("Savannah", "GW"));
        DualLands.add(new DLnd("Temple Garden", "GW"));
        DualLands.add(new DLnd("Scrubland", "WB"));
        DualLands.add(new DLnd("Godless Shrine", "WB"));
        DualLands.add(new DLnd("Volcanic Island", "UR"));
        DualLands.add(new DLnd("Steam Vents", "UR"));
        DualLands.add(new DLnd("Bayou", "BG"));
        DualLands.add(new DLnd("Overgrown Tomb", "BG"));
        DualLands.add(new DLnd("Plateau", "RW"));
        DualLands.add(new DLnd("Sacred Foundry", "RW"));
        DualLands.add(new DLnd("Tropical Island", "GU"));
        DualLands.add(new DLnd("Breeding Pool", "GU"));

        if (Clr1.equals("AI")) {
            // choose first color
            color1 = notColors.get(r.nextInt(5));

            // choose second color
            String c2 = notColors.get(r.nextInt(5));
            while (c2.equals(color1))
                c2 = notColors.get(r.nextInt(5));
            color2 = c2;
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="361">
<file line="1232" path="/Users/dhudson/mtg/cardforge/src/forge/CombatUtil.java"/>
<file line="1289" path="/Users/dhudson/mtg/cardforge/src/forge/CombatUtil.java"/>
<codefragment>
<![CDATA[
        ArrayList<Trigger> registeredTriggers = AllZone.getTriggerHandler().getRegisteredTriggers();
        for (Trigger trigger : registeredTriggers) {
            HashMap<String, String> trigParams = trigger.getMapParams();
            Card source = trigger.getHostCard();

            if (!combatTriggerWillTrigger(attacker, defender, trigger, null) || !trigParams.containsKey("Execute"))
                continue;
            String ability = source.getSVar(trigParams.get("Execute"));
            AbilityFactory AF = new AbilityFactory();
            HashMap<String, String> abilityParams = AF.getMapParams(ability, source);
            if (abilityParams.containsKey("ValidTgts") || abilityParams.containsKey("Tgt"))
                continue; //targeted pumping not supported
            if (abilityParams.containsKey("AB") && !abilityParams.get("AB").equals("Pump") && !abilityParams.get("AB").equals("PumpAll"))
                continue;
            if (abilityParams.containsKey("DB") && !abilityParams.get("DB").equals("Pump") && !abilityParams.get("DB").equals("PumpAll"))
                continue;
            ArrayList<Card> list = new ArrayList<Card>();
            if (!abilityParams.containsKey("ValidCards")) //no pumpAll
                list = AbilityFactory.getDefinedCards(source, abilityParams.get("Defined"), null);
            if (abilityParams.containsKey("Defined") && abilityParams.get("Defined").equals("TriggeredAttacker"))
                list.add(attacker);
            if (abilityParams.containsKey("ValidCards"))
                if (attacker.isValidCard(abilityParams.get("ValidCards").split(","), source.getController(), source)
                        || attacker.isValidCard(abilityParams.get("ValidCards").replace("attacking+", "").split(",")
                        , source.getController(), source))
                    list.add(attacker);
            if (list.isEmpty()) continue;
            if (!list.contains(attacker)) continue;
            if (!abilityParams.containsKey("NumDef")) continue;
]]>
</codefragment>
</duplication>
<duplication lines="72" tokens="334">
<file line="162" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadPictures_LQ.java"/>
<file line="229" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MigrateLocalMWSSetPictures_HQ.java"/>
<codefragment>
<![CDATA[
                System.out.println(card + "/" + cards.length + " - " + a);
            }
        }
        ;
        EventQueue.invokeLater(new Worker(card));
    }

    /**
     * <p>Getter for the field <code>dlg</code>.</p>
     *
     * @param frame a {@link javax.swing.JFrame} object.
     * @return a {@link javax.swing.JDialog} object.
     */
    public JDialog getDlg(JFrame frame) {
        final JDialog dlg = this.dlg.createDialog(frame, ForgeProps.getLocalized(TITLE));
        close.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dlg.setVisible(false);
            }
        });
        return dlg;
    }

    /**
     * <p>Setter for the field <code>cancel</code>.</p>
     *
     * @param cancel a boolean.
     */
    public void setCancel(boolean cancel) {
        this.cancel = cancel;
    }


    /**
     * <p>run.</p>
     */
    public void run() {
        BufferedInputStream in;
        BufferedOutputStream out;

        File base = ForgeProps.getFile(IMAGE_BASE);

        //Random r = MyRandom.random;

        Proxy p = null;
        if (type == 0) p = Proxy.NO_PROXY;
        else try {
            p = new Proxy(types[type], new InetSocketAddress(addr.getText(), parseInt(port.getText())));
        } catch (Exception ex) {
            ErrorViewer.showError(ex, ForgeProps.getLocalized(ERRORS.PROXY_CONNECT), addr.getText(),
                    port.getText());
            //throw new RuntimeException("Gui_DownloadPictures : error 1 - " +ex);
            return;
        }

        if (p != null) {
            byte[] buf = new byte[1024];
            int len;
            System.out.println("basedir: " + base);
            for (update(0); card < cards.length && !cancel; update(card + 1)) {
                try {
                    String url = cards[card].url;
                    String cName;
                    if (cards[card].name.substring(0, 3).equals("[T]")) {
                        base = ForgeProps.getFile(IMAGE_TOKEN);
                        cName = cards[card].name.substring(3, cards[card].name.length());
                    } else {
                        base = ForgeProps.getFile(IMAGE_BASE);
                        cName = cards[card].name;
                    }

                    File f = new File(base, cName);
]]>
</codefragment>
</duplication>
<duplication lines="73" tokens="316">
<file line="72" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MultipleBlockers3.java"/>
<file line="76" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MultipleBlockers4.java"/>
<codefragment>
<![CDATA[
    public Gui_MultipleBlockers4() {
        try {
            jbInit();
        } catch (Exception ex) {
            ErrorViewer.showError(ex);
        }
        //    setSize(470, 280);
        //    show();
    }

    /**
     * <p>jbInit.</p>
     *
     * @throws java.lang.Exception if any.
     */
    private void jbInit() throws Exception {
        this.getContentPane().setLayout(borderLayout1);
        this.setTitle("Multiple Blockers");
        mainPanel.setLayout(null);
        numberLabel.setHorizontalAlignment(SwingConstants.CENTER);
        numberLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        numberLabel.setText("Assign");
        numberLabel.setBounds(new Rectangle(52, 30, 343, 24));
        jPanel3.setLayout(borderLayout3);
        jPanel3.setBounds(new Rectangle(26, 75, 399, 114));
        creaturePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                creaturePanel_mousePressed(e);
            }
        });
        creaturePanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                creaturePanel_mouseMoved(e);
            }
        });
        mainPanel.add(jPanel3, null);
        jPanel3.add(jScrollPane1, BorderLayout.CENTER);
        mainPanel.add(numberLabel, null);
        jScrollPane1.getViewport().add(creaturePanel, null);
        this.getContentPane().add(mainPanel, BorderLayout.CENTER);
    }

    /**
     * <p>okButton_actionPerformed.</p>
     *
     * @param e a {@link java.awt.event.ActionEvent} object.
     */
    void okButton_actionPerformed(ActionEvent e) {
        dispose();
    }

    /**
     * <p>creaturePanel_mousePressed.</p>
     *
     * @param e a {@link java.awt.event.MouseEvent} object.
     */
    void creaturePanel_mousePressed(MouseEvent e) {
        Object o = creaturePanel.getComponentAt(e.getPoint());
        if (o instanceof CardPanel) {

            boolean assignedDamage = true;

            CardContainer cardPanel = (CardContainer) o;
            Card c = cardPanel.getCard();
            //c.setAssignedDamage(c.getAssignedDamage() + 1);
            CardList cl = new CardList();
            cl.add(att);

            boolean assignedLethalDamageToAllBlockers = true;
            for (Card crd : blockers) {
                if (crd.getLethalDamage() > 0
]]>
</codefragment>
</duplication>
<duplication lines="119" tokens="299">
<file line="95" path="/Users/dhudson/mtg/cardforge/src/forge/CardShopTableModel.java"/>
<file line="107" path="/Users/dhudson/mtg/cardforge/src/forge/TableModel.java"/>
<codefragment>
<![CDATA[
                column.setMinWidth(30);
            }
        }//for

        /*for(int j = 0; j < table.getColumnCount(); j++) {
            column = table.getColumnModel().getColumn(j);
            //System.out.println("col Width:" + column.getPreferredWidth());
        }*/
    }

    /**
     * <p>clear.</p>
     */
    public void clear() {
        dataNoCopies.clear();
        dataCopies.clear();
        //fireTableDataChanged();
    }

    /**
     * <p>getCards.</p>
     *
     * @return a {@link forge.CardList} object.
     */
    public CardList getCards() {
        CardList all = new CardList();
        all.addAll(dataCopies);
        all.addAll(dataNoCopies);

        return all;
    }

    /**
     * <p>removeCard.</p>
     *
     * @param c a {@link forge.Card} object.
     */
    public void removeCard(Card c) {
        //remove card from "dataCopies",
        //if not found there, remove card from "dataNoCopies"
        int index = findCardName(c.getName(), dataCopies);

        if (index != -1) //found card name
            dataCopies.remove(index);
        else {
            index = findCardName(c.getName(), dataNoCopies);
            dataNoCopies.remove(index);
        }

        fireTableDataChanged();
    }

    /**
     * <p>findCardName.</p>
     *
     * @param name a {@link java.lang.String} object.
     * @param list a {@link forge.CardList} object.
     * @return a int.
     */
    private int findCardName(String name, CardList list) {
        for (int i = 0; i < list.size(); i++)
            if (list.get(i).getName().equals(name)) return i;

        return -1;
    }

    /**
     * <p>addCard.</p>
     *
     * @param c a {@link forge.Card} object.
     */
    public void addCard(Card c) {
        if (0 == countQuantity(c, dataNoCopies)) dataNoCopies.add(c);
        else dataCopies.add(c);
    }

    /**
     * <p>addCard.</p>
     *
     * @param c a {@link forge.CardList} object.
     */
    public void addCard(CardList c) {
        for (int i = 0; i < c.size(); i++)
            addCard(c.get(i));

        fireTableDataChanged();
    }

    /**
     * <p>rowToCard.</p>
     *
     * @param row a int.
     * @return a {@link forge.Card} object.
     */
    public Card rowToCard(int row) {
        return dataNoCopies.get(row);
    }

    /**
     * <p>countQuantity.</p>
     *
     * @param c a {@link forge.Card} object.
     * @return a int.
     */
    private int countQuantity(Card c) {
        return countQuantity(c, dataNoCopies) + countQuantity(c, dataCopies);
    }

    //CardList data is either class members "dataNoCopies" or "dataCopies"
    /**
     * <p>countQuantity.</p>
     *
     * @param c a {@link forge.Card} object.
     * @param data a {@link forge.CardList} object.
     * @return a int.
     */
    private int countQuantity(Card c, CardList data) {
        int count = 0;
        for (int i = 0; i < data.size(); i++) {
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="295">
<file line="182" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_ImportPicture.java"/>
<file line="278" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_ImportPicture.java"/>
<codefragment>
<![CDATA[
                        if (jCheckBox.isSelected()) {
                            filesForCopy = ff.getFilesNumber();
                            jLabelTotalFiles.setText("Total files for copying: " + filesForCopy);
                            jLabelNeedSpace.setText("HDD Need Space: " + ff.getDirectorySize() / 1024 / 1024
                                    + " MB");
                            jProgressBar.setValue(0);
                            if ((freeSpaceM > (ff.getDirectorySize() / 1024 / 1024)) && (filesForCopy > 0)) {
                                jButtonStart.setEnabled(true);
                            }
                        } else {

                            String fName;
                            int start;
                            long filesToCopySize;
                            filesForCopy = 0;
                            filesToCopySize = 0;
                            fileCopyList = new ArrayList<File>();

                            for (int i = 0; i < listFiles.size(); i++) {

                                fName = listFiles.get(i).getName();
                                start = fName.indexOf("full");
                                fName = fName.substring(0, start - 1)
                                        + fName.substring(start + 4, fName.length() - 4);
                                fName = GuiDisplayUtil.cleanString(fName) + ".jpg";
                                File file = new File(ForgeProps.getFile(IMAGE_BASE), fName);
                                if (!file.exists()) {
                                    filesForCopy = filesForCopy + 1;
                                    filesToCopySize = filesToCopySize + listFiles.get(i).length();
                                    fileCopyList.add(listFiles.get(i));
                                }
                            }
                            jLabelTotalFiles.setText("Total files for copying: " + filesForCopy);
                            jLabelNeedSpace.setText("HDD Need Space: " + filesToCopySize / 1024 / 1024 + " MB");
                            jProgressBar.setValue(0);
                            if ((freeSpaceM > (filesToCopySize / 1024 / 1024)) && (filesForCopy > 0)) {
                                jButtonStart.setEnabled(true);
                            }
                        }
                    }
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="286">
<file line="396" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Animate.java"/>
<file line="791" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Animate.java"/>
<codefragment>
<![CDATA[
        for (final Card c : list) {
            final ArrayList<String> originalTypes = c.getType();
            final int origPower = c.getBaseAttack();
            final int origToughness = c.getBaseDefense();

            final long timestamp = doAnimate(c, af, power, toughness, types, finalDesc, keywords);

            //give abilities
            final ArrayList<SpellAbility> addedAbilities = new ArrayList<SpellAbility>();
            if (abilities.size() > 0) {
                for (String s : abilities) {
                    AbilityFactory newAF = new AbilityFactory();
                    String actualAbility = host.getSVar(s);
                    SpellAbility grantedAbility = newAF.getAbility(actualAbility, c);
                    addedAbilities.add(grantedAbility);
                    c.addSpellAbility(grantedAbility);
                }
            }

            //Grant triggers
            final ArrayList<Trigger> addedTriggers = new ArrayList<Trigger>();
            if (triggers.size() > 0) {
                for (String s : triggers) {
                    String actualTrigger = host.getSVar(s);
                    Trigger parsedTrigger = TriggerHandler.parseTrigger(actualTrigger, c);
                    addedTriggers.add(c.addTrigger(parsedTrigger));
                    AllZone.getTriggerHandler().registerTrigger(parsedTrigger);
                }
            }

            final Command unanimate = new Command() {
                private static final long serialVersionUID = -5861759814760561373L;

                public void execute() {
                    doUnanimate(c, origPower, origToughness, originalTypes, finalDesc, keywords, addedAbilities, addedTriggers, timestamp);
                }
            };

            if (!permanent) {
                if (params.containsKey("UntilEndOfCombat")) AllZone.getEndOfCombat().addUntil(unanimate);
                else AllZone.getEndOfTurn().addUntil(unanimate);
            }
        }
    }//animateAllResolve
]]>
</codefragment>
</duplication>
<duplication lines="65" tokens="282">
<file line="459" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplayUtil.java"/>
<file line="643" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplayUtil.java"/>
<codefragment>
<![CDATA[
                if (startANewStack) {
                    setupConnectedCards(connectedCards);
                    connectedCards.clear();

                    // Fixed distance if last was a stack, looks a bit nicer
                    if (atInStack > 1) {
                        x += Math.max(addPanel.getPreferredSize().width, addPanel.getPreferredSize().height)
                                + marginX;
                    } else {
                        x = nextXIfNotStacked;
                    }

                    atInStack = 0;
                } else {
                    if (i != 0) {
                        x += cardOffset;
                    }
                }

                nextXIfNotStacked = x + marginX + addPanel.getPreferredSize().width;

                int xLoc = x;

                int yLoc = marginY;
                yLoc += atInStack * cardOffset;

                addPanel.setLocation(new Point(xLoc, yLoc));
                addPanel.setSize(addPanel.getPreferredSize());


                cards.add(addPanel);

                connectedCards.add((CardPanel) addPanel);

                atInStack++;
                prevCard = c;
            }

            setupConnectedCards(connectedCards);
            connectedCards.clear();


            for (int i = cards.size() - 1; i >= 0; i--) {
                JPanel card = cards.get(i);
                //maxX = Math.max(maxX, card.getLocation().x + card.getSize().width + marginX);
                maxY = Math.max(maxY, card.getLocation().y + card.getSize().height + marginY);
                p.add(card);
            }

            maxX = nextXIfNotStacked;

            if (maxX > 0 && maxY > 0) { //p.getSize().width || maxY > p.getSize().height) {
                p.setPreferredSize(new Dimension(maxX, maxY));
            }

        } else {
            JPanel addPanel;
            for (int i = 0; i < list.size(); i++) {
                c = list.get(i);
                addPanel = new CardPanel(c);

                p.add(addPanel);
            }
        }
    }//setupPanel()
]]>
</codefragment>
</duplication>
<duplication lines="68" tokens="275">
<file line="352" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<file line="548" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<codefragment>
<![CDATA[
        gPBW.dispose();
    }//show(Command)

    /**
     * <p>addListeners.</p>
     */
    private void addListeners() {
        MouseInputListener l = new MouseInputListener() {
            public void mouseReleased(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mousePressed(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseExited(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseEntered(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseClicked(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseMoved(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseDragged(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            private void redispatchMouseEvent(MouseEvent e) {
                Container content = getContentPane();
                Point glassPoint = e.getPoint();
                Point contentPoint = SwingUtilities.convertPoint(glassPane, glassPoint, content);

                Component component = SwingUtilities.getDeepestComponentAt(content, contentPoint.x, contentPoint.y);
                if (component == null || !SwingUtilities.isDescendingFrom(component, picture)) {
                    glassPane.setVisible(false);
                }
            }
        };

        glassPane.addMouseMotionListener(l);
        glassPane.addMouseListener(l);

        picture.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                Card c = picture.getCard();
                if (c == null) return;
                Image i = ImageCache.getOriginalImage(c);
                if (i == null) return;
                if (i.getWidth(null) < 300) return;
                glassPane.setVisible(true);
            }
        });
    }//addListeners()

    /**
     * <p>setup.</p>
     */
    private void setup() {
]]>
</codefragment>
</duplication>
<duplication lines="90" tokens="275">
<file line="278" path="/Users/dhudson/mtg/cardforge/src/forge/CardShopTableModel.java"/>
<file line="323" path="/Users/dhudson/mtg/cardforge/src/forge/TableModel.java"/>
<codefragment>
<![CDATA[
            default:
                return "error";
        }
    }

    /**
     * <p>addListeners.</p>
     *
     * @param table a {@link javax.swing.JTable} object.
     */
    public void addListeners(final JTable table) {
        //updates card detail, listens to any key strokes
        table.addKeyListener(new KeyListener() {
            public void keyPressed(KeyEvent ev) {
            }

            public void keyTyped(KeyEvent ev) {
            }

            public void keyReleased(KeyEvent ev) {
                int row = table.getSelectedRow();
                if (row != -1) {
                    cardDetail.setCard(dataNoCopies.get(row));
                }
            }
        });
        //updates card detail, listens to any mouse clicks
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                int row = table.getSelectedRow();
                if (row != -1) {
                    cardDetail.setCard(dataNoCopies.get(row));
                }
            }
        });

        //sorts
        MouseListener mouse = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                TableColumnModel columnModel = table.getColumnModel();
                int viewColumn = columnModel.getColumnIndexAtX(e.getX());
                int column = table.convertColumnIndexToModel(viewColumn);


                if (column != -1) {
                    //sort ascending
                    @SuppressWarnings("unused")
                    boolean change = sort(column, true);

                    //if(! change)
                    //  sort(column, false);//sort descending

                    //fireTableDataChanged();
                }
            }//mousePressed()
        };//MouseListener
        table.getTableHeader().addMouseListener(mouse);
    }//addCardListener()

    //called by the GUI when a card is added to re-sort
    /**
     * <p>resort.</p>
     */
    public void resort() {
        sort(recentSortedColumn, recentAscending);
        //this.fireTableDataChanged();
    }

    //returns true if any data changed positions
    // @SuppressWarnings("unchecked")
    // Arrays.sort
    /**
     * <p>sort.</p>
     *
     * @param column a int.
     * @param ascending a boolean.
     * @return a boolean.
     */
    public boolean sort(int column, boolean ascending) {
        //used by addCard() to resort the cards
        recentSortedColumn = column;
        recentAscending = ascending;

        CardList all = new CardList();
        all.addAll(dataNoCopies);
        all.addAll(dataCopies);

        TableSorter sorter = new TableSorter(all, column, ascending, true);
]]>
</codefragment>
</duplication>
<duplication lines="61" tokens="266">
<file line="351" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<file line="421" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor.java"/>
<codefragment>
<![CDATA[
        topModel.sort(3, true);//then sort by color

        bottomModel.sort(1, true);
    }//show(Command)

    /**
     * <p>addListeners.</p>
     */
    private void addListeners() {
        MouseInputListener l = new MouseInputListener() {
            public void mouseReleased(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mousePressed(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseExited(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseEntered(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseClicked(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseMoved(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseDragged(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            private void redispatchMouseEvent(MouseEvent e) {
                Container content = getContentPane();
                Point glassPoint = e.getPoint();
                Point contentPoint = SwingUtilities.convertPoint(glassPane, glassPoint, content);

                Component component = SwingUtilities.getDeepestComponentAt(content, contentPoint.x, contentPoint.y);
                if (component == null || !SwingUtilities.isDescendingFrom(component, picture)) {
                    glassPane.setVisible(false);
                }
            }
        };

        glassPane.addMouseMotionListener(l);
        glassPane.addMouseListener(l);

        picture.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                Card c = picture.getCard();
                if (c == null) return;
                Image i = ImageCache.getOriginalImage(c);
                if (i == null) return;
                if (i.getWidth(null) < 200) return;
]]>
</codefragment>
</duplication>
<duplication lines="57" tokens="263">
<file line="141" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<file line="161" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor.java"/>
<codefragment>
<![CDATA[
            c.setRarity(c.getSVar("Rarity"));

            //String PC = c.getSVar("PicCount");
            Random r = MyRandom.random;
            //int n = 0;
            //if (!PC.equals("")){
            //	if (PC.matches("[0-9][0-9]?"))
            //		n = Integer.parseInt(PC);
            //	if (n > 1)
            //		c.setRandomPicture(r.nextInt(n));
            //}

            if (c.getCurSetCode().equals(""))
                c.setCurSetCode(c.getMostRecentSet());

            if (!c.getCurSetCode().equals("")) {
                int n = SetInfoUtil.getSetInfo_Code(c.getSets(), c.getCurSetCode()).PicCount;
                if (n > 1)
                    c.setRandomPicture(r.nextInt(n - 1) + 1);

                c.setImageFilename(CardUtil.buildFilename(c));
            }

            bottomModel.addCard(c);
        }//for

        topModel.resort();
        bottomModel.resort();
    }//updateDisplay

    /**
     * <p>updateDisplay.</p>
     */
    public void updateDisplay() {
        //updateDisplay(this.top, this.bottom);

        topModel.clear();

        if (AllZone.getNameChanger().shouldChangeCardName()) {
            top = new CardList(AllZone.getNameChanger().changeCard(top.toArray()));
            bottom = new CardList(AllZone.getNameChanger().changeCard(bottom.toArray()));
        }

        Card c;
        String cardName;
        ReadBoosterPack pack = new ReadBoosterPack();

        // update top
        for (int i = 0; i < top.size(); i++) {
            c = top.get(i);

            // add rarity to card if this is a sealed card pool

            cardName = AllZone.getNameChanger().getOriginalName(c.getName());
            if (!pack.getRarity(cardName).equals("error")) {
                c.setRarity(pack.getRarity(cardName));
            }
]]>
</codefragment>
</duplication>
<duplication lines="42" tokens="260">
<file line="609" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Destroy.java"/>
<file line="583" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Sacrifice.java"/>
<codefragment>
<![CDATA[
        computerlist = computerlist.getValidCards(Valid.split(","), source.getController(), source);

        if (abCost != null) {
            // AI currently disabled for some costs
            if (abCost.getSacCost()) {
                //OK
            }
            if (abCost.getLifeCost()) {
                if (AllZone.getComputerPlayer().getLife() - abCost.getLifeAmount() < 4)
                    return false;
            }
            if (abCost.getDiscardCost()) ;//OK

            if (abCost.getSubCounter()) {
                // OK
            }
        }

        if (!ComputerUtil.canPayCost(sa))
            return false;

        // prevent run-away activations - first time will always return true
        boolean chance = r.nextFloat() <= Math.pow(.6667, source.getAbilityUsed());

        // if only creatures are affected evaluate both lists and pass only if human creatures are more valuable
        if (humanlist.getNotType("Creature").size() == 0 && computerlist.getNotType("Creature").size() == 0) {
            if (CardFactoryUtil.evaluateCreatureList(computerlist) + 200 >= CardFactoryUtil.evaluateCreatureList(humanlist))
                return false;
        }//only lands involved
        else if (humanlist.getNotType("Land").size() == 0 && computerlist.getNotType("Land").size() == 0) {
            if (CardFactoryUtil.evaluatePermanentList(computerlist) + 1 >= CardFactoryUtil.evaluatePermanentList(humanlist))
                return false;
        } // otherwise evaluate both lists by CMC and pass only if human permanents are more valuable
        else if (CardFactoryUtil.evaluatePermanentList(computerlist) + 3 >= CardFactoryUtil.evaluatePermanentList(humanlist))
            return false;

        Ability_Sub subAb = sa.getSubAbility();
        if (subAb != null)
            chance &= subAb.chkAI_Drawback();

        return ((r.nextFloat() < .9667) && chance);
    }
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="259">
<file line="391" path="/Users/dhudson/mtg/cardforge/src/forge/BoosterDraftAI.java"/>
<file line="332" path="/Users/dhudson/mtg/cardforge/src/forge/SealedDeck.java"/>
<codefragment>
<![CDATA[
                    String mc = deck.get(i).getManaCost();

                    // count each mana symbol in the mana cost
                    for (int j = 0; j < mc.length(); j++) {
                        char c = mc.charAt(j);

                        if (c == 'W')
                            ClrCnts[0].Count++;
                        else if (c == 'U')
                            ClrCnts[1].Count++;
                        else if (c == 'B')
                            ClrCnts[2].Count++;
                        else if (c == 'R')
                            ClrCnts[3].Count++;
                        else if (c == 'G')
                            ClrCnts[4].Count++;
                    }
                }

                // total of all ClrCnts
                int totalColor = 0;
                for (i = 0; i < 5; i++) {
                    totalColor += ClrCnts[i].Count;
                }

                for (i = 0; i < 5; i++) {
                    if (ClrCnts[i].Count > 0) {    // calculate number of lands for each color
                        float p = (float) ClrCnts[i].Count / (float) totalColor;
                        int nLand = (int) ((float) landsNeeded * p) + 1;
                        //tmpDeck += "nLand-" + ClrCnts[i].Color + ":" + nLand + "\n";
                        if (Constant.Runtime.DevMode[0])
                            System.out.println("Basics[" + ClrCnts[i].Color + "]:" + nLand);

                        for (int j = 0; j <= nLand; j++) {
                            Card c = AllZone.getCardFactory().getCard(ClrCnts[i].Color, AllZone.getComputerPlayer());
                            c.setCurSetCode(this.LandSetCode[0]);
]]>
</codefragment>
</duplication>
<duplication lines="59" tokens="256">
<file line="548" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<file line="423" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor.java"/>
<codefragment>
<![CDATA[
        bottomModel.sort(1, true);
    }//show(Command)

    /**
     * <p>addListeners.</p>
     */
    private void addListeners() {
        MouseInputListener l = new MouseInputListener() {
            public void mouseReleased(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mousePressed(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseExited(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseEntered(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseClicked(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseMoved(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            public void mouseDragged(MouseEvent e) {
                redispatchMouseEvent(e);
            }

            private void redispatchMouseEvent(MouseEvent e) {
                Container content = getContentPane();
                Point glassPoint = e.getPoint();
                Point contentPoint = SwingUtilities.convertPoint(glassPane, glassPoint, content);

                Component component = SwingUtilities.getDeepestComponentAt(content, contentPoint.x, contentPoint.y);
                if (component == null || !SwingUtilities.isDescendingFrom(component, picture)) {
                    glassPane.setVisible(false);
                }
            }
        };

        glassPane.addMouseMotionListener(l);
        glassPane.addMouseListener(l);

        picture.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                Card c = picture.getCard();
                if (c == null) return;
                Image i = ImageCache.getOriginalImage(c);
                if (i == null) return;
                if (i.getWidth(null) < 200) return;
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="254">
<file line="285" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/Generate2ColorDeck.java"/>
<file line="178" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/GenerateThemeDeck.java"/>
<codefragment>
<![CDATA[
        if (numBLands > 0)    // attempt to optimize basic land counts according to color representation
        {
            CCnt ClrCnts[] = {new CCnt("Plains", 0),
                    new CCnt("Island", 0),
                    new CCnt("Swamp", 0),
                    new CCnt("Mountain", 0),
                    new CCnt("Forest", 0)};

            // count each instance of a color in mana costs
            // TODO: count hybrid mana differently?
            for (int i = 0; i < tDeck.size(); i++) {
                String mc = tDeck.get(i).getManaCost();

                for (int j = 0; j < mc.length(); j++) {
                    char c = mc.charAt(j);

                    if (c == 'W')
                        ClrCnts[0].Count++;
                    else if (c == 'U')
                        ClrCnts[1].Count++;
                    else if (c == 'B')
                        ClrCnts[2].Count++;
                    else if (c == 'R')
                        ClrCnts[3].Count++;
                    else if (c == 'G')
                        ClrCnts[4].Count++;
                }
            }

            int totalColor = 0;
            for (int i = 0; i < 5; i++) {
                totalColor += ClrCnts[i].Count;
                tmpDeck += ClrCnts[i].Color + ":" + ClrCnts[i].Count + "\n";
            }

            tmpDeck += "totalColor:" + totalColor + "\n";

            for (int i = 0; i < 5; i++) {
                if (ClrCnts[i].Count > 0) {    // calculate number of lands for each color
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="249">
<file line="1118" path="/Users/dhudson/mtg/cardforge/src/forge/CombatUtil.java"/>
<file line="1171" path="/Users/dhudson/mtg/cardforge/src/forge/CombatUtil.java"/>
<codefragment>
<![CDATA[
        toughness += defender.getKeywordMagnitude("Bushido");

        ArrayList<Trigger> registeredTriggers = AllZone.getTriggerHandler().getRegisteredTriggers();
        for (Trigger trigger : registeredTriggers) {
            HashMap<String, String> trigParams = trigger.getMapParams();
            Card source = trigger.getHostCard();

            if (!combatTriggerWillTrigger(attacker, defender, trigger, null) || !trigParams.containsKey("Execute"))
                continue;
            String ability = source.getSVar(trigParams.get("Execute"));
            AbilityFactory AF = new AbilityFactory();
            HashMap<String, String> abilityParams = AF.getMapParams(ability, source);
            if (abilityParams.containsKey("AB") && !abilityParams.get("AB").equals("Pump"))
                continue;
            if (abilityParams.containsKey("DB") && !abilityParams.get("DB").equals("Pump"))
                continue;
            if (abilityParams.containsKey("ValidTgts") || abilityParams.containsKey("Tgt"))
                continue; //targeted pumping not supported
            ArrayList<Card> list = AbilityFactory.getDefinedCards(source, abilityParams.get("Defined"), null);
            if (abilityParams.containsKey("Defined") && abilityParams.get("Defined").equals("TriggeredBlocker"))
                list.add(defender);
            if (list.isEmpty()) continue;
            if (!list.contains(defender)) continue;
            if (!abilityParams.containsKey("NumDef")) continue;
]]>
</codefragment>
</duplication>
<duplication lines="57" tokens="248">
<file line="68" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MultipleBlockers.java"/>
<file line="76" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MultipleBlockers3.java"/>
<codefragment>
<![CDATA[
            ErrorViewer.showError(ex);
        }
//    setSize(470, 280);
//    show();
    }

    /**
     * <p>jbInit.</p>
     *
     * @throws java.lang.Exception if any.
     */
    private void jbInit() throws Exception {
        this.getContentPane().setLayout(borderLayout1);
        this.setTitle("Multiple Blockers");
        mainPanel.setLayout(null);
        numberLabel.setHorizontalAlignment(SwingConstants.CENTER);
        numberLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        numberLabel.setText("Assign");
        numberLabel.setBounds(new Rectangle(52, 30, 343, 24));
        jPanel3.setLayout(borderLayout3);
        jPanel3.setBounds(new Rectangle(26, 75, 399, 114));
        creaturePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                creaturePanel_mousePressed(e);
            }
        });
        creaturePanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                creaturePanel_mouseMoved(e);
            }
        });
        mainPanel.add(jPanel3, null);
        jPanel3.add(jScrollPane1, BorderLayout.CENTER);
        mainPanel.add(numberLabel, null);
        jScrollPane1.getViewport().add(creaturePanel, null);
        this.getContentPane().add(mainPanel, BorderLayout.CENTER);
    }

    /**
     * <p>okButton_actionPerformed.</p>
     *
     * @param e a {@link java.awt.event.ActionEvent} object.
     */
    void okButton_actionPerformed(ActionEvent e) {
        dispose();
    }

    /**
     * <p>creaturePanel_mousePressed.</p>
     *
     * @param e a {@link java.awt.event.MouseEvent} object.
     */
    void creaturePanel_mousePressed(MouseEvent e) {
        Object o = creaturePanel.getComponentAt(e.getPoint());
        if (o instanceof CardPanel) {
]]>
</codefragment>
</duplication>
<duplication lines="82" tokens="244">
<file line="135" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay2.java"/>
<file line="273" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<codefragment>
<![CDATA[
        menuBar.add(devMenu);
        menuBar.add(new MenuItem_HowToPlay());
        this.setJMenuBar(menuBar);
    }//addMenu()

    /**
     * <p>getButtonOK.</p>
     *
     * @return a {@link forge.MyButton} object.
     */
    public MyButton getButtonOK() {
        MyButton ok = new MyButton() {
            public void select() {
                inputControl.selectButtonOK();
            }

            public boolean isSelectable() {
                return okButton.isEnabled();
            }

            public void setSelectable(boolean b) {
                okButton.setEnabled(b);
            }

            public String getText() {
                return okButton.getText();
            }

            public void setText(String text) {
                okButton.setText(text);
            }

            public void reset() {
                okButton.setText("OK");
            }
        };

        return ok;
    }//getButtonOK()

    /**
     * <p>getButtonCancel.</p>
     *
     * @return a {@link forge.MyButton} object.
     */
    public MyButton getButtonCancel() {
        MyButton cancel = new MyButton() {
            public void select() {
                inputControl.selectButtonCancel();
            }

            public boolean isSelectable() {
                return cancelButton.isEnabled();
            }

            public void setSelectable(boolean b) {
                cancelButton.setEnabled(b);
            }

            public String getText() {
                return cancelButton.getText();
            }

            public void setText(String text) {
                cancelButton.setText(text);
            }

            public void reset() {
                cancelButton.setText("Cancel");
            }
        };
        return cancel;
    }//getButtonCancel()

    /** {@inheritDoc} */
    public void showCombat(String message) {
        combatArea.setText(message);
    }

    /** {@inheritDoc} */
    public void showMessage(String s) {
        messageArea.setText(s);
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="242">
<file line="94" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor_Menu.java"/>
<file line="163" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor_Menu.java"/>
<codefragment>
<![CDATA[
        clearfilter.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ev) {

                Gui_Quest_DeckEditor g = (Gui_Quest_DeckEditor) deckDisplay;
                if (g.stCardList == null) {
                    g.blackCheckBox.setSelected(true);
                    g.blackCheckBox.setEnabled(true);
                    g.blueCheckBox.setSelected(true);
                    g.blueCheckBox.setEnabled(true);
                    g.greenCheckBox.setSelected(true);
                    g.greenCheckBox.setEnabled(true);
                    g.redCheckBox.setSelected(true);
                    g.redCheckBox.setEnabled(true);
                    g.whiteCheckBox.setSelected(true);
                    g.whiteCheckBox.setEnabled(true);
                    g.colorlessCheckBox.setSelected(true);
                    g.colorlessCheckBox.setEnabled(true);
                    g.artifactCheckBox.setSelected(true);
                    g.artifactCheckBox.setEnabled(true);
                    g.creatureCheckBox.setSelected(true);
                    g.creatureCheckBox.setEnabled(true);
                    g.enchantmentCheckBox.setSelected(true);
                    g.enchantmentCheckBox.setEnabled(true);
                    g.instantCheckBox.setSelected(true);
                    g.instantCheckBox.setEnabled(true);
                    g.landCheckBox.setSelected(true);
                    g.landCheckBox.setEnabled(true);
                    g.planeswalkerCheckBox.setSelected(true);
                    g.planeswalkerCheckBox.setEnabled(true);
                    g.sorceryCheckBox.setSelected(true);
                    g.sorceryCheckBox.setEnabled(true);
                    g.filterUsed = false;
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="231">
<file line="746" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Sorceries.java"/>
<file line="1931" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Sorceries.java"/>
<codefragment>
<![CDATA[
                int damage = 3;
                Card check;

                @Override
                public boolean canPlayAI() {
                    if (AllZone.getHumanPlayer().getLife() <= damage) return true;

                    check = getFlying();
                    return check != null;
                }

                @Override
                public void chooseTargetAI() {
                    if (AllZone.getHumanPlayer().getLife() <= damage) {
                        setTargetPlayer(AllZone.getHumanPlayer());
                        return;
                    }

                    Card c = getFlying();
                    if ((c == null) || (!check.equals(c))) throw new RuntimeException(card
                            + " error in chooseTargetAI() - Card c is " + c + ",  Card check is " + check);

                    setTargetCard(c);
                }//chooseTargetAI()

                //uses "damage" variable
                Card getFlying() {
                    CardList flying = CardFactoryUtil.AI_getHumanCreature("Flying", card, true);
                    for (int i = 0; i < flying.size(); i++)
                        if (flying.get(i).getNetDefense() <= damage) return flying.get(i);

                    return null;
                }

                @Override
                public void resolve() {

                    int damage = getDamage();

                    if (getTargetCard() != null) {
                        if (AllZoneUtil.isCardInPlay(getTargetCard())
                                && CardFactoryUtil.canTarget(card, getTargetCard())) {
                            javax.swing.JOptionPane.showMessageDialog(null, cardName + " causes " + damage
]]>
</codefragment>
</duplication>
<duplication lines="80" tokens="229">
<file line="137" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay2.java"/>
<file line="276" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<codefragment>
<![CDATA[
        return canLoseByDecking.isSelected();
    }

    /**
     * <p>getButtonOK.</p>
     *
     * @return a {@link forge.MyButton} object.
     */
    public MyButton getButtonOK() {
        MyButton ok = new MyButton() {
            public void select() {
                inputControl.selectButtonOK();
            }

            public boolean isSelectable() {
                return okButton.isEnabled();
            }

            public void setSelectable(boolean b) {
                okButton.setEnabled(b);
            }

            public String getText() {
                return okButton.getText();
            }

            public void setText(String text) {
                okButton.setText(text);
            }

            public void reset() {
                okButton.setText("OK");
            }
        };

        return ok;
    }//getButtonOK()

    /**
     * <p>getButtonCancel.</p>
     *
     * @return a {@link forge.MyButton} object.
     */
    public MyButton getButtonCancel() {
        MyButton cancel = new MyButton() {
            public void select() {
                inputControl.selectButtonCancel();
            }

            public boolean isSelectable() {
                return cancelButton.isEnabled();
            }

            public void setSelectable(boolean b) {
                cancelButton.setEnabled(b);
            }

            public String getText() {
                return cancelButton.getText();
            }

            public void setText(String text) {
                cancelButton.setText(text);
            }

            public void reset() {
                cancelButton.setText("Cancel");
            }
        };
        return cancel;
    }//getButtonCancel()

    /** {@inheritDoc} */
    public void showCombat(String message) {
        combatArea.setText(message);
    }

    /** {@inheritDoc} */
    public void showMessage(String s) {
        messageArea.setText(s);
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="225">
<file line="308" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Instants.java"/>
<file line="654" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Sorceries.java"/>
<codefragment>
<![CDATA[
                @Override
                public boolean canPlayAI() {
                    CardList c = getCreature();
                    if (c.isEmpty()) return false;
                    else {
                        setTargetCard(c.get(0));
                        return true;
                    }
                }//canPlayAI()

                CardList getCreature() {
                    CardList out = new CardList();
                    CardList list = CardFactoryUtil.AI_getHumanCreature("Flying", card, true);
                    list.shuffle();

                    for (int i = 0; i < list.size(); i++)
                        if ((list.get(i).getNetAttack() >= 2) && (list.get(i).getNetDefense() <= 2))
                            out.add(list.get(i));

                    //in case human player only has a few creatures in play, target anything
                    if (out.isEmpty() && 0 < CardFactoryUtil.AI_getHumanCreature(2, card, true).size()
                            && 3 > CardFactoryUtil.AI_getHumanCreature(card, true).size()) {
                        out.addAll(CardFactoryUtil.AI_getHumanCreature(2, card, true));
                        CardListUtil.sortFlying(out);
                    }
                    return out;
                }//getCreature()


                @Override
                public void resolve() {
                    if (AllZoneUtil.isCardInPlay(getTargetCard())
                            && CardFactoryUtil.canTarget(card, getTargetCard())) {
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="221">
<file line="204" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadPictures_LQ.java"/>
<file line="271" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadSetPictures_LQ.java"/>
<codefragment>
<![CDATA[
        Proxy p = null;
        if (type == 0) p = Proxy.NO_PROXY;
        else try {
            p = new Proxy(types[type], new InetSocketAddress(addr.getText(), parseInt(port.getText())));
        } catch (Exception ex) {
            ErrorViewer.showError(ex, ForgeProps.getLocalized(ERRORS.PROXY_CONNECT), addr.getText(),
                    port.getText());
//            throw new RuntimeException("Gui_DownloadPictures : error 1 - " +ex);
            return;
        }

        if (p != null) {
            byte[] buf = new byte[1024];
            int len;
            System.out.println("basedir: " + base);
            for (update(0); card < cards.length && !cancel; update(card + 1)) {
                try {
                    String url = cards[card].url;
                    String cName;
                    if (cards[card].name.substring(0, 3).equals("[T]")) {
                        base = ForgeProps.getFile(IMAGE_TOKEN);
                        cName = cards[card].name.substring(3, cards[card].name.length());
                    } else {
                        base = ForgeProps.getFile(IMAGE_BASE);
                        cName = cards[card].name;
                    }
]]>
</codefragment>
</duplication>
<duplication lines="50" tokens="220">
<file line="386" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_PermanentState.java"/>
<file line="849" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_PermanentState.java"/>
<codefragment>
<![CDATA[
        for (Card c : tgt.getTargetCards())
            tapList.remove(c);

        if (tapList.size() == 0)
            return false;

        while (tgt.getNumTargeted() < tgt.getMaxTargets(source, sa)) {
            Card choice = null;

            if (tapList.size() == 0) {
                if (tgt.getNumTargeted() < tgt.getMinTargets(source, sa) || tgt.getNumTargeted() == 0) {
                    if (!mandatory)
                        tgt.resetTargets();
                    return false;
                } else {
                    // TODO is this good enough? for up to amounts?
                    break;
                }
            }

            if (tapList.getNotType("Creature").size() == 0)
                choice = CardFactoryUtil.AI_getBestCreature(tapList); //if only creatures take the best
            else
                choice = CardFactoryUtil.AI_getMostExpensivePermanent(tapList, af.getHostCard(), false);

            if (choice == null) {    // can't find anything left
                if (tgt.getNumTargeted() < tgt.getMinTargets(sa.getSourceCard(), sa) || tgt.getNumTargeted() == 0) {
                    if (!mandatory)
                        tgt.resetTargets();
                    return false;
                } else {
                    // TODO is this good enough? for up to amounts?
                    break;
                }
            }

            tapList.remove(choice);
            tgt.addTarget(choice);
        }

        return true;
    }

    /**
     * <p>tapResolve.</p>
     *
     * @param af a {@link forge.card.abilityFactory.AbilityFactory} object.
     * @param sa a {@link forge.card.spellability.SpellAbility} object.
     */
    private static void tapResolve(final AbilityFactory af, final SpellAbility sa) {
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="218">
<file line="240" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_WinLose.java"/>
<file line="274" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_WinLose.java"/>
<codefragment>
<![CDATA[
        if (!Constant.Quest.fantasyQuest[0])
            AllZone.getGameAction().newGame(Constant.Runtime.HumanDeck[0], Constant.Runtime.ComputerDeck[0]);
        else {
            int extraLife = 0;
            //AllZone.getGameAction().newGame(Constant.Runtime.HumanDeck[0], Constant.Runtime.ComputerDeck[0], humanList, computerList, humanLife, computerLife);
            if (AllZone.getQuestAssignment() != null) {
                forge.quest.data.QuestUtil.setupQuest(AllZone.getQuestAssignment());
                if (AllZone.getQuestData().getInventory().hasItem("Zeppelin"))
                    extraLife = 3;
            }

            CardList humanList = forge.quest.data.QuestUtil.getHumanPlantAndPet(AllZone.getQuestData(), AllZone.getQuestAssignment());
            //CardList computerList = QuestUtil.getComputerCreatures(AllZone.getQuestData(), AllZone.getQuestAssignment());
            CardList computerList = new CardList();

            int humanLife = AllZone.getQuestData().getLife() + extraLife;
            int computerLife = 20;

            if (AllZone.getQuestAssignment() != null)
                computerLife = AllZone.getQuestAssignment().getComputerLife();

            AllZone.getGameAction().newGame(Constant.Runtime.HumanDeck[0], Constant.Runtime.ComputerDeck[0], humanList, computerList, humanLife, computerLife, AllZone.getQuestAssignment());
        }
        AllZone.getDisplay().setVisible(true);

        dispose();
    }
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="216">
<file line="786" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_Filter.java"/>
<file line="117" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor_Menu.java"/>
<codefragment>
<![CDATA[
                deckDisplay.updateDisplay(deckDisplay.getTop(), deckDisplay.getBottom());
                Gui_DeckEditor g = (Gui_DeckEditor) deckDisplay;
                g.blackCheckBox.setSelected(true);
                g.blackCheckBox.setEnabled(true);
                g.blueCheckBox.setSelected(true);
                g.blueCheckBox.setEnabled(true);
                g.greenCheckBox.setSelected(true);
                g.greenCheckBox.setEnabled(true);
                g.redCheckBox.setSelected(true);
                g.redCheckBox.setEnabled(true);
                g.whiteCheckBox.setSelected(true);
                g.whiteCheckBox.setEnabled(true);
                g.colorlessCheckBox.setSelected(true);
                g.colorlessCheckBox.setEnabled(true);
                g.artifactCheckBox.setSelected(true);
                g.artifactCheckBox.setEnabled(true);
                g.creatureCheckBox.setSelected(true);
                g.creatureCheckBox.setEnabled(true);
                g.enchantmentCheckBox.setSelected(true);
                g.enchantmentCheckBox.setEnabled(true);
                g.instantCheckBox.setSelected(true);
                g.instantCheckBox.setEnabled(true);
                g.landCheckBox.setSelected(true);
                g.landCheckBox.setEnabled(true);
                g.planeswalkerCheckBox.setSelected(true);
                g.planeswalkerCheckBox.setEnabled(true);
                g.sorceryCheckBox.setSelected(true);
                g.sorceryCheckBox.setEnabled(true);
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="214">
<file line="167" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor_Menu.java"/>
<file line="195" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor_Menu.java"/>
<codefragment>
<![CDATA[
                } else {
                    g.blackCheckBox.setSelected(true);
                    g.blackCheckBox.setEnabled(true);
                    g.blueCheckBox.setSelected(true);
                    g.blueCheckBox.setEnabled(true);
                    g.greenCheckBox.setSelected(true);
                    g.greenCheckBox.setEnabled(true);
                    g.redCheckBox.setSelected(true);
                    g.redCheckBox.setEnabled(true);
                    g.whiteCheckBox.setSelected(true);
                    g.whiteCheckBox.setEnabled(true);
                    g.colorlessCheckBox.setSelected(true);
                    g.colorlessCheckBox.setEnabled(true);
                    g.artifactCheckBox.setSelected(true);
                    g.artifactCheckBox.setEnabled(true);
                    g.creatureCheckBox.setSelected(true);
                    g.creatureCheckBox.setEnabled(true);
                    g.enchantmentCheckBox.setSelected(true);
                    g.enchantmentCheckBox.setEnabled(true);
                    g.instantCheckBox.setSelected(true);
                    g.instantCheckBox.setEnabled(true);
                    g.landCheckBox.setSelected(true);
                    g.landCheckBox.setEnabled(true);
                    g.planeswalkerCheckBox.setSelected(true);
                    g.planeswalkerCheckBox.setEnabled(true);
                    g.sorceryCheckBox.setSelected(true);
                    g.sorceryCheckBox.setEnabled(true);
                    g.filterUsed = false;
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="211">
<file line="97" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor_Menu.java"/>
<file line="195" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor_Menu.java"/>
<codefragment>
<![CDATA[
                } else {
                    g.blackCheckBox.setSelected(true);
                    g.blackCheckBox.setEnabled(true);
                    g.blueCheckBox.setSelected(true);
                    g.blueCheckBox.setEnabled(true);
                    g.greenCheckBox.setSelected(true);
                    g.greenCheckBox.setEnabled(true);
                    g.redCheckBox.setSelected(true);
                    g.redCheckBox.setEnabled(true);
                    g.whiteCheckBox.setSelected(true);
                    g.whiteCheckBox.setEnabled(true);
                    g.colorlessCheckBox.setSelected(true);
                    g.colorlessCheckBox.setEnabled(true);
                    g.artifactCheckBox.setSelected(true);
                    g.artifactCheckBox.setEnabled(true);
                    g.creatureCheckBox.setSelected(true);
                    g.creatureCheckBox.setEnabled(true);
                    g.enchantmentCheckBox.setSelected(true);
                    g.enchantmentCheckBox.setEnabled(true);
                    g.instantCheckBox.setSelected(true);
                    g.instantCheckBox.setEnabled(true);
                    g.landCheckBox.setSelected(true);
                    g.landCheckBox.setEnabled(true);
                    g.planeswalkerCheckBox.setSelected(true);
                    g.planeswalkerCheckBox.setEnabled(true);
                    g.sorceryCheckBox.setSelected(true);
                    g.sorceryCheckBox.setEnabled(true);
                    g.filterUsed = false;
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="210">
<file line="788" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_Filter.java"/>
<file line="98" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor_Menu.java"/>
<codefragment>
<![CDATA[
                    g.blackCheckBox.setSelected(true);
                    g.blackCheckBox.setEnabled(true);
                    g.blueCheckBox.setSelected(true);
                    g.blueCheckBox.setEnabled(true);
                    g.greenCheckBox.setSelected(true);
                    g.greenCheckBox.setEnabled(true);
                    g.redCheckBox.setSelected(true);
                    g.redCheckBox.setEnabled(true);
                    g.whiteCheckBox.setSelected(true);
                    g.whiteCheckBox.setEnabled(true);
                    g.colorlessCheckBox.setSelected(true);
                    g.colorlessCheckBox.setEnabled(true);
                    g.artifactCheckBox.setSelected(true);
                    g.artifactCheckBox.setEnabled(true);
                    g.creatureCheckBox.setSelected(true);
                    g.creatureCheckBox.setEnabled(true);
                    g.enchantmentCheckBox.setSelected(true);
                    g.enchantmentCheckBox.setEnabled(true);
                    g.instantCheckBox.setSelected(true);
                    g.instantCheckBox.setEnabled(true);
                    g.landCheckBox.setSelected(true);
                    g.landCheckBox.setEnabled(true);
                    g.planeswalkerCheckBox.setSelected(true);
                    g.planeswalkerCheckBox.setEnabled(true);
                    g.sorceryCheckBox.setSelected(true);
                    g.sorceryCheckBox.setEnabled(true);
                    g.stCardList = g.getTop();
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="209">
<file line="97" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor_Menu.java"/>
<file line="129" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor_Menu.java"/>
<codefragment>
<![CDATA[
                } else {
                    g.blackCheckBox.setSelected(true);
                    g.blackCheckBox.setEnabled(true);
                    g.blueCheckBox.setSelected(true);
                    g.blueCheckBox.setEnabled(true);
                    g.greenCheckBox.setSelected(true);
                    g.greenCheckBox.setEnabled(true);
                    g.redCheckBox.setSelected(true);
                    g.redCheckBox.setEnabled(true);
                    g.whiteCheckBox.setSelected(true);
                    g.whiteCheckBox.setEnabled(true);
                    g.colorlessCheckBox.setSelected(true);
                    g.colorlessCheckBox.setEnabled(true);
                    g.artifactCheckBox.setSelected(true);
                    g.artifactCheckBox.setEnabled(true);
                    g.creatureCheckBox.setSelected(true);
                    g.creatureCheckBox.setEnabled(true);
                    g.enchantmentCheckBox.setSelected(true);
                    g.enchantmentCheckBox.setEnabled(true);
                    g.instantCheckBox.setSelected(true);
                    g.instantCheckBox.setEnabled(true);
                    g.landCheckBox.setSelected(true);
                    g.landCheckBox.setEnabled(true);
                    g.planeswalkerCheckBox.setSelected(true);
                    g.planeswalkerCheckBox.setEnabled(true);
                    g.sorceryCheckBox.setSelected(true);
                    g.sorceryCheckBox.setEnabled(true);
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="208">
<file line="788" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_Filter.java"/>
<file line="130" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor_Menu.java"/>
<codefragment>
<![CDATA[
                    g.blackCheckBox.setSelected(true);
                    g.blackCheckBox.setEnabled(true);
                    g.blueCheckBox.setSelected(true);
                    g.blueCheckBox.setEnabled(true);
                    g.greenCheckBox.setSelected(true);
                    g.greenCheckBox.setEnabled(true);
                    g.redCheckBox.setSelected(true);
                    g.redCheckBox.setEnabled(true);
                    g.whiteCheckBox.setSelected(true);
                    g.whiteCheckBox.setEnabled(true);
                    g.colorlessCheckBox.setSelected(true);
                    g.colorlessCheckBox.setEnabled(true);
                    g.artifactCheckBox.setSelected(true);
                    g.artifactCheckBox.setEnabled(true);
                    g.creatureCheckBox.setSelected(true);
                    g.creatureCheckBox.setEnabled(true);
                    g.enchantmentCheckBox.setSelected(true);
                    g.enchantmentCheckBox.setEnabled(true);
                    g.instantCheckBox.setSelected(true);
                    g.instantCheckBox.setEnabled(true);
                    g.landCheckBox.setSelected(true);
                    g.landCheckBox.setEnabled(true);
                    g.planeswalkerCheckBox.setSelected(true);
                    g.planeswalkerCheckBox.setEnabled(true);
                    g.sorceryCheckBox.setSelected(true);
                    g.sorceryCheckBox.setEnabled(true);
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="207">
<file line="59" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadPictures_LQ.java"/>
<file line="93" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadSetPictures_LQ.java"/>
<codefragment>
<![CDATA[
    private Gui_DownloadSetPictures_LQ(mCard[] c) {
        this.cards = c;
        addr = new JTextField(ForgeProps.getLocalized(PROXY_ADDRESS));
        port = new JTextField(ForgeProps.getLocalized(PROXY_PORT));
        bar = new JProgressBar(this);

        JPanel p0 = new JPanel();
        p0.setLayout(new BoxLayout(p0, BoxLayout.Y_AXIS));

        //Proxy Choice
        ButtonGroup bg = new ButtonGroup();
        String[] labels = {
                ForgeProps.getLocalized(NO_PROXY), ForgeProps.getLocalized(HTTP_PROXY),
                ForgeProps.getLocalized(SOCKS_PROXY)};
        for (int i = 0; i < types.length; i++) {
            JRadioButton rb = new JRadioButton(labels[i]);
            rb.addChangeListener(new ProxyHandler(i));
            bg.add(rb);
            p0.add(rb);
            if (i == 0) rb.setSelected(true);
        }

        //Proxy config
        p0.add(addr);
        p0.add(port);
//        JTextField[] tfs = {addr, port};
//        String[] labels = {"Address", "Port"};
//        for(int i = 0; i < labels.length; i++) {
//            JPanel p1 = new JPanel(new BorderLayout());
//            p0.add(p1);
////            p1.add(new JLabel(labels[i]), WEST);
//            p1.add(tfs[i]);
//        }

        //Start
        final JButton b = new JButton(ForgeProps.getLocalized(BUTTONS.START));
        b.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                new Thread(Gui_DownloadSetPictures_LQ.this).start();
]]>
</codefragment>
</duplication>
<duplication lines="61" tokens="206">
<file line="194" path="/Users/dhudson/mtg/cardforge/src/forge/ReadBoosterPack.java"/>
<file line="159" path="/Users/dhudson/mtg/cardforge/src/forge/ReadDraftBoosterPack.java"/>
<codefragment>
<![CDATA[
        return list;
    }

    //return CardList of 5 or 6 cards, one for each color and maybe an artifact
    /**
     * <p>getVariety.</p>
     *
     * @param in a {@link forge.CardList} object.
     * @return a {@link forge.CardList} object.
     */
    private CardList getVariety(CardList in) {
        CardList out = new CardList();

        String color[] = Constant.Color.Colors;
        Card check;
        in.shuffle();

        for (int i = 0; i < color.length; i++) {
            check = findColor(in, color[i]);
            if (check != null) out.add(check);
        }

        return out;
    }//getVariety()

    /**
     * <p>findColor.</p>
     *
     * @param in a {@link forge.CardList} object.
     * @param color a {@link java.lang.String} object.
     * @return a {@link forge.Card} object.
     */
    private Card findColor(CardList in, String color) {
        for (int i = 0; i < in.size(); i++)
            if (CardUtil.getColors(in.get(i)).contains(color)) return in.get(i);

        return null;
    }


    /**
     * <p>getRandomCard.</p>
     *
     * @param list a {@link forge.CardList} object.
     * @return a {@link forge.Card} object.
     */
    private Card getRandomCard(CardList list) {
        for (int i = 0; i < 10; i++)
            list.shuffle();

        int index = MyRandom.random.nextInt(list.size());

        Card c = AllZone.getCardFactory().copyCard(list.get(index));
        c.setRarity("rare");
        return c;
    }//getRandomCard()

    /**
     * <p>setup.</p>
     */
    private void setup() {
]]>
</codefragment>
</duplication>
<duplication lines="55" tokens="205">
<file line="1285" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<file line="1284" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<codefragment>
<![CDATA[
    JLayeredPane layeredPane = SwingUtilities.getRootPane(this).getLayeredPane();

    private class ZoneAction extends ForgeAction {
        private static final long serialVersionUID = -5822976087772388839L;
        private PlayerZone zone;
        private String title;

        public ZoneAction(PlayerZone zone, String property) {
            super(property);
            title = ForgeProps.getLocalized(property + "/title");
            this.zone = zone;
        }

        public void actionPerformed(ActionEvent e) {
            /**
             * <p>main.</p>
             *
             * @param args an array of {@link java.lang.String} objects.
             */
            Card[] c = getCards();

            if (AllZone.getNameChanger().shouldChangeCardName()) c = AllZone.getNameChanger().changeCard(c);

            if (c.length == 0) GuiUtils.getChoiceOptional(title, new String[]{"no cards"});
            else {
                Card choice = GuiUtils.getChoiceOptional(title, c);
                if (choice != null) doAction(choice);
            }
        }

        /*
        protected PlayerZone getZone() {
            return zone;
        }
        */
        protected Card[] getCards() {
            return AllZoneUtil.getCardsInZone(zone).toArray();
        }

        protected void doAction(Card c) {
        }
    }

    private class ConcedeAction extends ForgeAction {

        private static final long serialVersionUID = -6976695235601916762L;

        public ConcedeAction() {
            super(CONCEDE);
        }

        public void actionPerformed(ActionEvent e) {
            concede();
        }
    }
]]>
</codefragment>
</duplication>
<duplication lines="51" tokens="203">
<file line="387" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_PermanentState.java"/>
<file line="756" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_PermanentState.java"/>
<codefragment>
<![CDATA[
        tapList = tapList.getTargetableCards(source);

        if (tapList.size() == 0)
            return false;

        while (tgt.getNumTargeted() < tgt.getMaxTargets(source, sa)) {
            Card choice = null;

            if (tapList.size() == 0) {
                if (tgt.getNumTargeted() < tgt.getMinTargets(source, sa) || tgt.getNumTargeted() == 0) {
                    if (!mandatory)
                        tgt.resetTargets();
                    return false;
                } else {
                    // TODO is this good enough? for up to amounts?
                    break;
                }
            }

            if (tapList.getNotType("Creature").size() == 0)
                choice = CardFactoryUtil.AI_getBestCreature(tapList); //if only creatures take the best
            else
                choice = CardFactoryUtil.AI_getMostExpensivePermanent(tapList, af.getHostCard(), false);

            if (choice == null) {    // can't find anything left
                if (tgt.getNumTargeted() < tgt.getMinTargets(sa.getSourceCard(), sa) || tgt.getNumTargeted() == 0) {
                    if (!mandatory)
                        tgt.resetTargets();
                    return false;
                } else {
                    // TODO is this good enough? for up to amounts?
                    break;
                }
            }

            tapList.remove(choice);
            tgt.addTarget(choice);
        }

        return true;
    }

    /**
     * <p>tapUnpreferredTargeting.</p>
     *
     * @param af a {@link forge.card.abilityFactory.AbilityFactory} object.
     * @param sa a {@link forge.card.spellability.SpellAbility} object.
     * @param mandatory a boolean.
     * @return a boolean.
     */
    private static boolean tapUnpreferredTargeting(AbilityFactory af, SpellAbility sa, boolean mandatory) {
]]>
</codefragment>
</duplication>
<duplication lines="60" tokens="198">
<file line="276" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay2.java"/>
<file line="489" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<codefragment>
<![CDATA[
                    okButton.requestFocusInWindow();
                }
            }
        });

        //*****************************************************************
        //computer

        //computer play (land) ---- Mouse
        oppLandPanel.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                Object o = oppLandPanel.getComponentAt(e.getPoint());
                if (o instanceof CardPanel) {
                    CardContainer cardPanel = (CardContainer) o;
                    inputControl.selectCard(cardPanel.getCard(), AllZone.getComputerBattlefield());
                }
            }
        });

        //computer play (no land) ---- Mouse
        oppCreaturePanel.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                Object o = oppCreaturePanel.getComponentAt(e.getPoint());
                if (o instanceof CardPanel) {
                    CardContainer cardPanel = (CardContainer) o;
                    inputControl.selectCard(cardPanel.getCard(), AllZone.getComputerBattlefield());
                }
            }
        });


    }//addListener()

    /**
     * <p>getCard.</p>
     *
     * @return a {@link forge.Card} object.
     */
    public Card getCard() {
        return detail.getCard();
    }

    /** {@inheritDoc} */
    public void setCard(Card card) {
        detail.setCard(card);
        picture.setCard(card);
    }

    /**
     * <p>addObservers.</p>
     */
    private void addObservers() {
        //Human Hand, Graveyard, and Library totals
        {//make sure to not interfer with anything below, since this is a very long method
            Observer o = new Observer() {
                public void update(Observable a, Object b) {
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="196">
<file line="1214" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<file line="1212" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<codefragment>
<![CDATA[
        fp.millingLossCondition = canLoseByDecking.isSelected();

        return true;
    }

    /** Constant <code>playsoundCheckboxForMenu</code> */
    public static JCheckBoxMenuItem playsoundCheckboxForMenu = new JCheckBoxMenuItem("Play Sound", false);

    // Phases
    /** Constant <code>cbAIUpkeep</code> */
    public static JCheckBoxMenuItem cbAIUpkeep = new JCheckBoxMenuItem("Upkeep", true);
    /** Constant <code>cbAIDraw</code> */
    public static JCheckBoxMenuItem cbAIDraw = new JCheckBoxMenuItem("Draw", true);
    /** Constant <code>cbAIEndOfTurn</code> */
    public static JCheckBoxMenuItem cbAIEndOfTurn = new JCheckBoxMenuItem("End of Turn", true);
    /** Constant <code>cbAIBeginCombat</code> */
    public static JCheckBoxMenuItem cbAIBeginCombat = new JCheckBoxMenuItem("Begin Combat", true);
    /** Constant <code>cbAIEndCombat</code> */
    public static JCheckBoxMenuItem cbAIEndCombat = new JCheckBoxMenuItem("End Combat", true);

    /** Constant <code>cbHumanUpkeep</code> */
    public static JCheckBoxMenuItem cbHumanUpkeep = new JCheckBoxMenuItem("Upkeep", true);
    /** Constant <code>cbHumanDraw</code> */
    public static JCheckBoxMenuItem cbHumanDraw = new JCheckBoxMenuItem("Draw", true);
    /** Constant <code>cbHumanEndOfTurn</code> */
    public static JCheckBoxMenuItem cbHumanEndOfTurn = new JCheckBoxMenuItem("End of Turn", true);
    /** Constant <code>cbHumanBeginCombat</code> */
    public static JCheckBoxMenuItem cbHumanBeginCombat = new JCheckBoxMenuItem("Begin Combat", true);
    /** Constant <code>cbHumanEndCombat</code> */
    public static JCheckBoxMenuItem cbHumanEndCombat = new JCheckBoxMenuItem("End Combat", true);

    // ********** End of Phase stuff in Display ******************

    // ****** Developer Mode ******* 

    /** Constant <code>canLoseByDecking</code> */
    public static JCheckBoxMenuItem canLoseByDecking = new JCheckBoxMenuItem("Lose by Decking", true);

    // *****************************


    JXMultiSplitPane pane = new JXMultiSplitPane();
    JButton cancelButton = new JButton();
    JButton okButton = new JButton();
    JTextArea messageArea = new JTextArea(1, 10);
    JTextArea combatArea = new JTextArea();
    JPanel stackPanel = new JPanel();
]]>
</codefragment>
</duplication>
<duplication lines="60" tokens="195">
<file line="34" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadSetPictures_LQ.java"/>
<file line="36" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MigrateLocalMWSSetPictures_HQ.java"/>
<codefragment>
<![CDATA[
public class Gui_MigrateLocalMWSSetPictures_HQ extends DefaultBoundedRangeModel implements Runnable, NewConstants, NewConstants.LANG.Gui_DownloadPictures {

    /** Constant <code>serialVersionUID=-7890794857949935256L</code> */
    private static final long serialVersionUID = -7890794857949935256L;

    /** Constant <code>types</code> */
    public static final Proxy.Type[] types = Proxy.Type.values();

    //proxy
    private int type;
    private JTextField addr, port;

    //progress
    private mCard[] cards;
    private int card;
    private boolean cancel;
    private JProgressBar bar;

    private JOptionPane dlg;
    private JButton close;

    private long times[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    private int tptr = 0;
    private long lTime = System.currentTimeMillis();

    /**
     * <p>getAverageTimePerCard.</p>
     *
     * @return a int.
     */
    private int getAverageTimePerCard() {
        int aTime = 0;
        int nz = 10;

        if (tptr > 9)
            tptr = 0;

        times[tptr] = System.currentTimeMillis() - lTime;
        lTime = System.currentTimeMillis();

        int tTime = 0;
        for (int i = 0; i < 10; i++) {
            tTime += times[i];
            if (times[i] == 0)
                nz--;
        }
        aTime = tTime / nz;

        tptr++;

        return aTime;
    }


    /**
     * <p>Constructor for Gui_MigrateLocalMWSSetPictures_HQ.</p>
     *
     * @param c an array of {@link forge.Gui_MigrateLocalMWSSetPictures_HQ.mCard} objects.
     */
    private Gui_MigrateLocalMWSSetPictures_HQ(mCard[] c) {
]]>
</codefragment>
</duplication>
<duplication lines="48" tokens="194">
<file line="370" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Debuff.java"/>
<file line="519" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Pump.java"/>
<codefragment>
<![CDATA[
        while (tgt.getNumTargeted() < tgt.getMaxTargets(source, sa)) {
            if (pref.isEmpty())
                break;

            Card c;
            if (pref.getNotType("Creature").size() == 0)
                c = CardFactoryUtil.AI_getBestCreature(pref);
            else
                c = CardFactoryUtil.AI_getMostExpensivePermanent(pref, source, true);

            pref.remove(c);

            tgt.addTarget(c);
        }

        while (tgt.getNumTargeted() < tgt.getMinTargets(sa.getSourceCard(), sa)) {
            if (forced.isEmpty())
                break;

            Card c;
            if (forced.getNotType("Creature").size() == 0)
                c = CardFactoryUtil.AI_getWorstCreature(forced);
            else
                c = CardFactoryUtil.AI_getCheapestPermanent(forced, source, true);

            forced.remove(c);

            tgt.addTarget(c);
        }

        if (tgt.getNumTargeted() < tgt.getMinTargets(sa.getSourceCard(), sa)) {
            tgt.resetTargets();
            return false;
        }

        return true;
    }//pumpMandatoryTarget()


    /**
     * <p>pumpTriggerAI.</p>
     *
     * @param af a {@link forge.card.abilityFactory.AbilityFactory} object.
     * @param sa a {@link forge.card.spellability.SpellAbility} object.
     * @param mandatory a boolean.
     * @return a boolean.
     */
    private boolean pumpTriggerAI(AbilityFactory af, SpellAbility sa, boolean mandatory) {
]]>
</codefragment>
</duplication>
<duplication lines="53" tokens="190">
<file line="144" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MultipleBlockers3.java"/>
<file line="149" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MultipleBlockers4.java"/>
<codefragment>
<![CDATA[
                        && (!att.hasKeyword("Deathtouch") || crd.getTotalAssignedDamage() < 1))
                    assignedLethalDamageToAllBlockers = false;
            }


            if (c.getName().equals("Player")
                    && att.hasKeyword("Trample")
                    && assignedLethalDamageToAllBlockers) {
                AllZone.getCombat().addDefendingDamage(1, att);
                c.addAssignedDamage(1, att);
            } else if (!c.getName().equals("Player")) {
                c.addAssignedDamage(1, att);
            } else
                assignedDamage = false;

            if (assignedDamage) {
                assignDamage--;
                updateDamageLabel();
                if (assignDamage == 0) dispose();
            }

            if (guiDisplay != null) {
                guiDisplay.setCard(c);
            }
        }
        //reduce damage, show new user message, exit if necessary

    }//creaturePanel_mousePressed()

    /**
     * <p>updateDamageLabel.</p>
     */
    void updateDamageLabel() {
        numberLabel.setText("Assign " + assignDamage + " damage - click on card to assign damage");
    }

    /**
     * <p>creaturePanel_mouseMoved.</p>
     *
     * @param e a {@link java.awt.event.MouseEvent} object.
     */
    void creaturePanel_mouseMoved(MouseEvent e) {
        Object o = creaturePanel.getComponentAt(e.getPoint());
        if (o instanceof CardPanel) {
            CardContainer cardPanel = (CardContainer) o;
            Card c = cardPanel.getCard();

            if (guiDisplay != null) {
                guiDisplay.setCard(c);
            }
        }
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="188">
<file line="584" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Destroy.java"/>
<file line="561" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Sacrifice.java"/>
<codefragment>
<![CDATA[
    public static boolean sacrificeAllCanPlayAI(final AbilityFactory af, final SpellAbility sa) {
        // AI needs to be expanded, since this function can be pretty complex based on what the expected targets could be
        Random r = MyRandom.random;
        Cost abCost = sa.getPayCosts();
        final Card source = sa.getSourceCard();
        final HashMap<String, String> params = af.getMapParams();
        String Valid = "";

        if (params.containsKey("ValidCards"))
            Valid = params.get("ValidCards");

        if (Valid.contains("X") && source.getSVar("X").equals("Count$xPaid")) {
            // Set PayX here to maximum value.
            int xPay = ComputerUtil.determineLeftoverMana(sa);
            source.setSVar("PayX", Integer.toString(xPay));
            Valid = Valid.replace("X", Integer.toString(xPay));
        }

        CardList humanlist = AllZoneUtil.getPlayerCardsInPlay(AllZone.getHumanPlayer());
        CardList computerlist = AllZoneUtil.getPlayerCardsInPlay(AllZone.getComputerPlayer());

        humanlist = humanlist.getValidCards(Valid.split(","), source.getController(), source);
        computerlist = computerlist.getValidCards(Valid.split(","), source.getController(), source);
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="186">
<file line="331" path="/Users/dhudson/mtg/cardforge/src/forge/card/trigger/Trigger.java"/>
<file line="370" path="/Users/dhudson/mtg/cardforge/src/forge/card/trigger/Trigger.java"/>
<codefragment>
<![CDATA[
                presentPlayer = mapParams.get("PresentPlayer2");
            }
            CardList list = new CardList();
            if (presentPlayer.equals("You") || presentPlayer.equals("Any")) {
                list.addAll(AllZoneUtil.getCardsInZone(presentZone, hostCard.getController()));
            }
            if (presentPlayer.equals("Opponent") || presentPlayer.equals("Any")) {
                list.addAll(AllZoneUtil.getCardsInZone(presentZone, hostCard.getController().getOpponent()));
            }

            list = list.getValidCards(sIsPresent.split(","), hostCard.getController(), hostCard);

            int right = 1;
            String rightString = presentCompare.substring(2);
            if (rightString.equals("X")) {
                right = CardFactoryUtil.xCount(hostCard, hostCard.getSVar("X"));
            } else {
                right = Integer.parseInt(presentCompare.substring(2));
            }
            int left = list.size();

            if (!AllZoneUtil.compare(left, presentCompare, right)) {
                return false;
            }

        }
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="186">
<file line="1268" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_PermanentState.java"/>
<file line="1364" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_PermanentState.java"/>
<codefragment>
<![CDATA[
        Card source = sa.getSourceCard();
        HashMap<String, String> params = af.getMapParams();

        String valid = "";
        if (params.containsKey("ValidCards"))
            valid = params.get("ValidCards");

        CardList validTappables = getTapAllTargets(valid, source);

        Random r = MyRandom.random;
        boolean rr = false;
        if (r.nextFloat() <= Math.pow(.6667, source.getAbilityUsed()))
            rr = true;

        if (validTappables.size() > 0) {
            CardList human = validTappables.filter(new CardListFilter() {
                public boolean addCard(Card c) {
                    return c.getController().isHuman();
                }
            });
            CardList compy = validTappables.filter(new CardListFilter() {
                public boolean addCard(Card c) {
                    return c.getController().isHuman();
                }
            });
            if (human.size() > compy.size()) {
                return rr;
            }
        }

        return false;
    }

    /**
     * <p>tapAllPlayDrawbackAI.</p>
     *
     * @param af a {@link forge.card.abilityFactory.AbilityFactory} object.
     * @param sa a {@link forge.card.spellability.SpellAbility} object.
     * @return a boolean.
     */
    private static boolean tapAllPlayDrawbackAI(final AbilityFactory af, SpellAbility sa) {
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="185">
<file line="1652" path="/Users/dhudson/mtg/cardforge/src/forge/GameAction.java"/>
<file line="1791" path="/Users/dhudson/mtg/cardforge/src/forge/GameAction.java"/>
<codefragment>
<![CDATA[
                for (int i = 0; i < Cards_In_Play.size(); i++) {
                    Card card = Cards_In_Play.get(i);
                    ArrayList<String> a = card.getKeyword();
                    int CostKeywords = 0;
                    int CostKeyword_Number[] = new int[a.size()];
                    for (int x = 0; x < a.size(); x++)
                        if (a.get(x).toString().startsWith("CostChange")) {
                            CostKeyword_Number[CostKeywords] = x;
                            CostKeywords = CostKeywords + 1;
                        }
                    for (int CKeywords = 0; CKeywords < CostKeywords; CKeywords++) {
                        String parse = card.getKeyword().get(CostKeyword_Number[CKeywords]).toString();
                        String k[] = parse.split(":");
                        if (card.equals(originalCard)) {
                            if (!k[4].equals("Self")) k[2] = "Owned";
                        }
                        if (k[2].equals("Less")) {
]]>
</codefragment>
</duplication>
<duplication lines="45" tokens="184">
<file line="641" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_PermanentState.java"/>
<file line="1560" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_PermanentState.java"/>
<codefragment>
<![CDATA[
    private static boolean tapOrUntapCanPlayAI(final AbilityFactory af, SpellAbility sa) {
        // AI cannot use this properly until he can use SAs during Humans turn
        if (!ComputerUtil.canPayCost(sa))
            return false;

        HashMap<String, String> params = af.getMapParams();
        Target tgt = af.getAbTgt();
        Card source = sa.getSourceCard();

        Random r = MyRandom.random;
        boolean randomReturn = r.nextFloat() <= Math.pow(.6667, source.getAbilityUsed());

        if (tgt == null) {
            //assume we are looking to tap human's stuff
            //TODO - check for things with untap abilities, and don't tap those.
            ArrayList<Card> defined = AbilityFactory.getDefinedCards(source, params.get("Defined"), sa);

            boolean bFlag = false;
            for (Card c : defined)
                bFlag |= c.isUntapped();

            if (!bFlag)    // All of the defined stuff is tapped, not very useful
                return false;
        } else {
            tgt.resetTargets();
            if (!tapPrefTargeting(source, tgt, af, sa, false))
                return false;
        }

        Ability_Sub subAb = sa.getSubAbility();
        if (subAb != null)
            randomReturn &= subAb.chkAI_Drawback();

        return randomReturn;
    }

    /**
     * <p>tapOrUntapTrigger.</p>
     *
     * @param af a {@link forge.card.abilityFactory.AbilityFactory} object.
     * @param sa a {@link forge.card.spellability.SpellAbility} object.
     * @param mandatory a boolean.
     * @return a boolean.
     */
    private static boolean tapOrUntapTrigger(AbilityFactory af, SpellAbility sa, boolean mandatory) {
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="183">
<file line="204" path="/Users/dhudson/mtg/cardforge/src/forge/card/spellability/SpellAbility_Condition.java"/>
<file line="190" path="/Users/dhudson/mtg/cardforge/src/forge/card/spellability/SpellAbility_Restriction.java"/>
<codefragment>
<![CDATA[
                right = CardFactoryUtil.xCount(c, c.getSVar("X"));
            } else {
                right = Integer.parseInt(presentCompare.substring(2));
            }
            int left = list.size();

            if (!AllZoneUtil.compare(left, presentCompare, right))
                return false;
        }

        if (lifeTotal != null) {
            int life = 1;
            if (lifeTotal.equals("You")) {
                life = activator.getLife();
            }
            if (lifeTotal.equals("Opponent")) {
                life = activator.getOpponent().getLife();
            }

            int right = 1;
            String rightString = lifeAmount.substring(2);
            if (rightString.equals("X")) {
                right = CardFactoryUtil.xCount(sa.getSourceCard(), sa.getSourceCard().getSVar("X"));
            } else {
                right = Integer.parseInt(lifeAmount.substring(2));
            }

            if (!AllZoneUtil.compare(life, lifeAmount, right)) {
                return false;
            }
        }

        if (pwAbility) {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="183">
<file line="73" path="/Users/dhudson/mtg/cardforge/src/forge/QuestData_Prefs.java"/>
<file line="97" path="/Users/dhudson/mtg/cardforge/src/forge/quest/data/QuestPreferences.java"/>
<codefragment>
<![CDATA[
    public static void grabPrefsFromFile() {
        try {
            BufferedReader input = new BufferedReader(new FileReader(ForgeProps.getFile(QUEST.PREFS)));
            String line = null;
            while ((line = input.readLine()) != null) {
                if (line.startsWith("#") || line.length() == 0)
                    continue;
                String[] split = line.split("=");

                if (split[0].equals("difficultyString"))
                    setDifficulty(split[1]);
                else if (split[0].equals("winsForBooster"))
                    setWinsForBooster(split[1]);
                else if (split[0].equals("winsForRankIncrease"))
                    setWinsForRank(split[1]);
                else if (split[0].equals("winsForMediumAI"))
                    setWinsForMediumAI(split[1]);
                else if (split[0].equals("winsForHardAI"))
                    setWinsForHardAI(split[1]);
                else if (split[0].equals("startingBasicLand"))
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="181">
<file line="149" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_AlterLife.java"/>
<file line="467" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_AlterLife.java"/>
<codefragment>
<![CDATA[
    static String loseLifeStackDescription(AbilityFactory af, SpellAbility sa) {
        HashMap<String, String> params = af.getMapParams();
        StringBuilder sb = new StringBuilder();
        int amount = AbilityFactory.calculateAmount(af.getHostCard(), params.get("LifeAmount"), sa);

        if (!(sa instanceof Ability_Sub))
            sb.append(sa.getSourceCard().getName()).append(" - ");
        else
            sb.append(" ");

        String conditionDesc = params.get("ConditionDescription");
        if (conditionDesc != null)
            sb.append(conditionDesc).append(" ");

        ArrayList<Player> tgtPlayers;
        Target tgt = af.getAbTgt();
        if (tgt != null)
            tgtPlayers = tgt.getTargetPlayers();
        else
            tgtPlayers = AbilityFactory.getDefinedPlayers(sa.getSourceCard(), params.get("Defined"), sa);

        for (Player player : tgtPlayers)
            sb.append(player).append(" ");

        sb.append("loses ").append(amount).append(" life.");
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="180">
<file line="353" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/Generate2ColorDeck.java"/>
<file line="378" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/Generate3ColorDeck.java"/>
<codefragment>
<![CDATA[
                    throw new RuntimeException("Generate3ColorDeck : get3ColorDeck -- looped too much -- undersize");

                int n = CardCounts.get(c.getName());
                tDeck.add(AllZone.getCardFactory().getCard(c.getName(), AllZone.getComputerPlayer()));
                CardCounts.put(c.getName(), n + 1);
                tmpDeck += "Added:" + c.getName() + "\n";
            }
        } else if (tDeck.size() > Size) {
            int diff = tDeck.size() - Size;

            for (int i = 0; i < diff; i++) {
                Card c = tDeck.get(r.nextInt(tDeck.size()));

                while (c.isBasicLand())    // don't remove basic lands
                    c = tDeck.get(r.nextInt(tDeck.size()));

                tDeck.remove(c);
                tmpDeck += "Removed:" + c.getName() + "\n";
            }
        }

        tmpDeck += "DeckSize:" + tDeck.size() + "\n";
        if (ForgeProps.getProperty("showdeck/3color", "false").equals("true"))
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="178">
<file line="1049" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Creatures.java"/>
<file line="70" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Sorceries.java"/>
<codefragment>
<![CDATA[
                @Override
                public void showMessage() {
                    if (index[0] == 0) AllZone.getDisplay().showMessage("Select target land you control.");
                    else AllZone.getDisplay().showMessage("Select target land opponent controls.");

                    ButtonUtil.enableOnlyCancel();
                }

                @Override
                public void selectButtonCancel() {
                    stop();
                }

                @Override
                public void selectCard(Card c, PlayerZone zone) {
                    //must target creature you control
                    if (index[0] == 0 && !c.getController().equals(card.getController())) return;

                    //must target creature you don't control
                    if (index[0] == 1 && c.getController().equals(card.getController())) return;


                    if (c.isLand() && zone.is(Constant.Zone.Battlefield) && CardFactoryUtil.canTarget(card, c)) {
                        target[index[0]] = c;
                        index[0]++;
                        showMessage();

                        if (index[0] == target.length) {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="178">
<file line="128" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<file line="1365" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<codefragment>
<![CDATA[
    private static String shuffleStackDescription(AbilityFactory af, SpellAbility sa) {
        HashMap<String, String> params = af.getMapParams();
        StringBuilder sb = new StringBuilder();

        if (!(sa instanceof Ability_Sub))
            sb.append(sa.getSourceCard().getName()).append(" - ");
        else
            sb.append(" ");

        String conditionDesc = params.get("ConditionDescription");
        if (conditionDesc != null)
            sb.append(conditionDesc).append(" ");

        ArrayList<Player> tgtPlayers;

        Target tgt = af.getAbTgt();
        if (tgt != null)
            tgtPlayers = tgt.getTargetPlayers();
        else
            tgtPlayers = AbilityFactory.getDefinedPlayers(sa.getSourceCard(), params.get("Defined"), sa);

        if (tgtPlayers.size() > 0) {
            Iterator<Player> it = tgtPlayers.iterator();
            while (it.hasNext()) {
                sb.append(it.next().getName());
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="178">
<file line="59" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadPictures_LQ.java"/>
<file line="95" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MigrateLocalMWSSetPictures_HQ.java"/>
<codefragment>
<![CDATA[
    private Gui_MigrateLocalMWSSetPictures_HQ(mCard[] c) {
        this.cards = c;
        addr = new JTextField(ForgeProps.getLocalized(PROXY_ADDRESS));
        port = new JTextField(ForgeProps.getLocalized(PROXY_PORT));
        bar = new JProgressBar(this);

        JPanel p0 = new JPanel();
        p0.setLayout(new BoxLayout(p0, BoxLayout.Y_AXIS));

        //Proxy Choice
        ButtonGroup bg = new ButtonGroup();
        String[] labels = {
                ForgeProps.getLocalized(NO_PROXY), ForgeProps.getLocalized(HTTP_PROXY),
                ForgeProps.getLocalized(SOCKS_PROXY)};
        for (int i = 0; i < types.length; i++) {
            JRadioButton rb = new JRadioButton(labels[i]);
            rb.addChangeListener(new ProxyHandler(i));
            bg.add(rb);
            p0.add(rb);
            if (i == 0) rb.setSelected(true);
        }

        //Proxy config
        p0.add(addr);
        p0.add(port);
//        JTextField[] tfs = {addr, port};
//        String[] labels = {"Address", "Port"};
//        for(int i = 0; i < labels.length; i++) {
//            JPanel p1 = new JPanel(new BorderLayout());
//            p0.add(p1);
////            p1.add(new JLabel(labels[i]), WEST);
//            p1.add(tfs[i]);
//        }

        //Start
        final JButton b = new JButton("Start copying");
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="174">
<file line="243" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<file line="188" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor.java"/>
<codefragment>
<![CDATA[
        bottomModel.resort();
    }//updateDisplay

    /**
     * <p>updateDisplay.</p>
     */
    public void updateDisplay() {
        //updateDisplay(this.top, this.bottom);

        topModel.clear();

        if (AllZone.getNameChanger().shouldChangeCardName()) {
            top = new CardList(AllZone.getNameChanger().changeCard(top.toArray()));
            bottom = new CardList(AllZone.getNameChanger().changeCard(bottom.toArray()));
        }

        Card c;
        String cardName;
        ReadBoosterPack pack = new ReadBoosterPack();

        // update top
        for (int i = 0; i < top.size(); i++) {
            c = top.get(i);

            // add rarity to card if this is a sealed card pool

            cardName = AllZone.getNameChanger().getOriginalName(c.getName());
            if (!pack.getRarity(cardName).equals("error")) {
                c.setRarity(pack.getRarity(cardName));
            }

            boolean filteredOut = filterByColor(c);

            if (!filteredOut) {
                filteredOut = filterByType(c);
            }

            if (!filteredOut) {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="173">
<file line="180" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Regenerate.java"/>
<file line="548" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Regenerate.java"/>
<codefragment>
<![CDATA[
    private static boolean regenerateAllCanPlayAI(final AbilityFactory af, final SpellAbility sa) {
        final HashMap<String, String> params = af.getMapParams();
        final Card hostCard = af.getHostCard();
        boolean chance = false;
        Cost abCost = af.getAbCost();
        if (abCost != null) {
            // AI currently disabled for these costs
            if (abCost.getSacCost() && !abCost.getSacThis()) {
                //only sacrifice something that's supposed to be sacrificed
                String type = abCost.getSacType();
                CardList typeList = AllZoneUtil.getPlayerCardsInPlay(AllZone.getComputerPlayer());
                typeList = typeList.getValidCards(type.split(","), hostCard.getController(), hostCard);
                if (ComputerUtil.getCardPreference(hostCard, "SacCost", typeList) == null)
                    return false;
            }
            if (abCost.getLifeCost()) {
                if (AllZone.getComputerPlayer().getLife() - abCost.getLifeAmount() < 4)
                    return false;
            }
        }

        if (!ComputerUtil.canPayCost(sa))
            return false;
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="172">
<file line="1328" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Instants.java"/>
<file line="1072" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Sorceries.java"/>
<codefragment>
<![CDATA[
                        else if (userChoice.contains(cardChoice[2])) stopSetNext(targetLand);
                        else {
                            setStackDescription.execute();

                            stopSetNext(new Input_PayManaCost(spell));
                        }
                    }
                }//showMessage()

                ArrayList<String> chooseTwo(ArrayList<String> choices) {
                    ArrayList<String> out = new ArrayList<String>();
                    Object o = GuiUtils.getChoiceOptional("Choose Two", choices.toArray());
                    if (o == null) return null;

                    out.add((String) o);
                    card.addSpellChoice((String) o);
                    choices.remove(out.get(0));
                    o = GuiUtils.getChoiceOptional("Choose Two", choices.toArray());
                    if (o == null) return null;

                    out.add((String) o);
                    card.addSpellChoice((String) o);
                    return out;
                }//chooseTwo()
            };//Input chooseTwoInput

            // Do not remove SpellAbilities created by AbilityFactory or Keywords.
            card.clearFirstSpellAbility();
            card.addSpellAbility(spell);

            card.setSpellWithChoices(true);
            spell.setBeforePayMana(chooseTwoInput);
        }//*************** END ************ END **************************


        //*************** START *********** START **************************
        else if (cardName.equals("Parallel Evolution")) {
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="166">
<file line="215" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay2.java"/>
<file line="374" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<codefragment>
<![CDATA[
        messageArea.setBorder(border);
    }

    /**
     * <p>addListeners.</p>
     */
    private void addListeners() {
        //mouse Card Detail
        playerHandPanel.addMouseMotionListener(GuiDisplayUtil.getCardDetailMouse(this));
        playerLandPanel.addMouseMotionListener(GuiDisplayUtil.getCardDetailMouse(this));
        playerCreaturePanel.addMouseMotionListener(GuiDisplayUtil.getCardDetailMouse(this));

        oppLandPanel.addMouseMotionListener(GuiDisplayUtil.getCardDetailMouse(this));
        oppCreaturePanel.addMouseMotionListener(GuiDisplayUtil.getCardDetailMouse(this));


        //opponent life mouse listener
        oppLifeLabel.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                inputControl.selectPlayer(AllZone.getComputerPlayer());
            }
        });

        //self life mouse listener
        playerLifeLabel.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                inputControl.selectPlayer(AllZone.getHumanPlayer());
            }
        });

        //self play (land) ---- Mouse
        playerLandPanel.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                Object o = playerLandPanel.getComponentAt(e.getPoint());
                if (o instanceof CardPanel) {
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="166">
<file line="1359" path="/Users/dhudson/mtg/cardforge/src/forge/CombatUtil.java"/>
<file line="1454" path="/Users/dhudson/mtg/cardforge/src/forge/CombatUtil.java"/>
<codefragment>
<![CDATA[
        int defenderDamage = defender.getNetAttack() + predictPowerBonusOfBlocker(attacker, defender);
        int attackerDamage = attacker.getNetAttack() + predictPowerBonusOfAttacker(attacker, defender, combat);
        if (AllZoneUtil.isCardInPlay("Doran, the Siege Tower")) {
            defenderDamage = defender.getNetDefense() + predictToughnessBonusOfBlocker(attacker, defender);
            attackerDamage = attacker.getNetDefense() + predictToughnessBonusOfAttacker(attacker, defender, combat);
        }

        int possibleDefenderPrevention = 0;
        int possibleAttackerPrevention = 0;
        if (!withoutAbilities) {
            possibleDefenderPrevention = ComputerUtil.possibleDamagePrevention(defender);
            possibleAttackerPrevention = ComputerUtil.possibleDamagePrevention(attacker);
        }

        // consider Damage Prevention/Replacement
        defenderDamage = attacker.predictDamage(defenderDamage, possibleAttackerPrevention, defender, true);
        attackerDamage = defender.predictDamage(attackerDamage, possibleDefenderPrevention, attacker, true);

        int defenderLife = defender.getKillDamage() + predictToughnessBonusOfBlocker(attacker, defender);
        int attackerLife = attacker.getKillDamage() + predictToughnessBonusOfAttacker(attacker, defender, combat);

        if (attacker.hasKeyword("Double Strike")) {
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="165">
<file line="649" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Auras.java"/>
<file line="1338" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Auras.java"/>
<codefragment>
<![CDATA[
                            AllZone.getGameAction().changeController(new CardList(crd), prevController[0], card.getController());
                        }
                    }//execute()
                };//Command

                Command onUnEnchant = new Command() {
                    private static final long serialVersionUID = 3426441132121179288L;

                    public void execute() {
                        if (card.isEnchanting()) {
                            Card crd = card.getEnchanting().get(0);
                            if (AllZoneUtil.isCardInPlay(crd)) {
                                if (crd.hasKeyword("Haste")) {
                                    crd.setSickness(false);
                                } else {
                                    crd.setSickness(true);
                                }

                                AllZone.getGameAction().changeController(new CardList(crd), crd.getController(), prevController[0]);
                            }
                        }

                    }//execute()
                };//Command

                Command onLeavesPlay = new Command() {
                    private static final long serialVersionUID = -639204333673364477L;

                    public void execute() {
                        if (card.isEnchanting()) {
                            Card crd = card.getEnchanting().get(0);
                            card.unEnchantCard(crd);
                        }
                    }
                };//Command
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="162">
<file line="64" path="/Users/dhudson/mtg/cardforge/src/forge/card/mana/ManaPool.java"/>
<file line="108" path="/Users/dhudson/mtg/cardforge/src/forge/card/mana/ManaPool.java"/>
<codefragment>
<![CDATA[
    public String getText() {
        Mana[] pool = floatingMana.toArray(new Mana[floatingMana.size()]);

        int[] normalMana = {0, 0, 0, 0, 0, 0};
        int[] snowMana = {0, 0, 0, 0, 0, 0};
        String[] manaStrings = {Constant.Color.White, Constant.Color.Blue, Constant.Color.Black, Constant.Color.Red, Constant.Color.Green, Constant.Color.Colorless};

        for (Mana m : pool) {
            if (m.isSnow())
                snowMana[map.get(m.getColor())] += m.getAmount();
            else
                normalMana[map.get(m.getColor())] += m.getAmount();
        }

        StringBuilder sbNormal = new StringBuilder();
]]>
</codefragment>
</duplication>
<duplication lines="52" tokens="159">
<file line="110" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadPictures_LQ.java"/>
<file line="144" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadSetPictures_LQ.java"/>
<codefragment>
<![CDATA[
        bar.setString(card + "/" + cards.length);
        //bar.setString(String.format(ForgeProps.getLocalized(card == cards.length? BAR_CLOSE:BAR_WAIT), this.card, cards.length));
        Dimension d = bar.getPreferredSize();
        d.width = 300;
        bar.setPreferredSize(d);

        //JOptionPane
        Object[] options = {b, close = new JButton(ForgeProps.getLocalized(BUTTONS.CANCEL))};
        dlg = new JOptionPane(p0, DEFAULT_OPTION, PLAIN_MESSAGE, null, options, options[1]);
    }

    /** {@inheritDoc} */
    @Override
    public int getMinimum() {
        return 0;
    }

    /** {@inheritDoc} */
    @Override
    public int getValue() {
        return card;
    }

    /** {@inheritDoc} */
    @Override
    public int getExtent() {
        return 0;
    }

    /** {@inheritDoc} */
    @Override
    public int getMaximum() {
        return cards == null ? 0 : cards.length;
    }

    /**
     * <p>update.</p>
     *
     * @param card a int.
     */
    private void update(int card) {
        this.card = card;

        final class Worker implements Runnable {
            private int card;

            Worker(int card) {
                this.card = card;
            }

            public void run() {
                fireStateChanged();
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="158">
<file line="284" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Protection.java"/>
<file line="430" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Pump.java"/>
<codefragment>
<![CDATA[
            list = getPumpCreatures(defense, attack);

        list = list.getValidCards(tgt.getValidTgts(), sa.getActivatingPlayer(), sa.getSourceCard());

        if (AllZone.getStack().size() == 0) {
            // If the cost is tapping, don't activate before declare attack/block
            if (sa.getPayCosts() != null && sa.getPayCosts().getTap()) {
                if (AllZone.getPhase().isBefore(Constant.Phase.Combat_Declare_Attackers) && AllZone.getPhase().isPlayerTurn(AllZone.getComputerPlayer()))
                    list.remove(sa.getSourceCard());
                if (AllZone.getPhase().isBefore(Constant.Phase.Combat_Declare_Blockers) && AllZone.getPhase().isPlayerTurn(AllZone.getHumanPlayer()))
                    list.remove(sa.getSourceCard());
            }
        }

        if (list.isEmpty())
            return mandatory && pumpMandatoryTarget(AF, sa, mandatory);
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="156">
<file line="405" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadSetPictures_LQ.java"/>
<file line="410" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MigrateLocalMWSSetPictures_HQ.java"/>
<codefragment>
<![CDATA[
            ArrayList<SetInfo> cSetInfo = c.getSets();
            if (cSetInfo.size() > 0) {
                for (int j = 0; j < cSetInfo.size(); j++) {
                    c.setCurSetCode(cSetInfo.get(j).Code);
                    String SC3 = c.getCurSetCode();
                    String SC2 = SetInfoUtil.getSetCode2_SetCode3(c.getCurSetCode());

                    int n = 0;
                    if (cSetInfo.get(j).PicCount > 0) {
                        n = cSetInfo.get(j).PicCount;

                        for (int k = 1; k <= n; k++) {
                            c.setRandomPicture(k);

                            imgFN = CardUtil.buildFilename(c);

                            if (imgFN.equals("none") || (!imgFN.contains(SC3) && !imgFN.contains(SC2))) {
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="155">
<file line="288" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_PreventDamage.java"/>
<file line="312" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Regenerate.java"/>
<codefragment>
<![CDATA[
    private static boolean regenMandatoryTarget(AbilityFactory af, SpellAbility sa, boolean mandatory) {
        final Card hostCard = af.getHostCard();
        Target tgt = sa.getTarget();
        tgt.resetTargets();
        // filter AIs battlefield by what I can target
        CardList targetables = AllZoneUtil.getCardsInPlay();
        targetables = targetables.getValidCards(tgt.getValidTgts(), AllZone.getComputerPlayer(), hostCard);
        CardList compTargetables = targetables.getController(AllZone.getComputerPlayer());

        if (targetables.size() == 0)
            return false;

        if (!mandatory && compTargetables.size() == 0)
            return false;

        if (compTargetables.size() > 0) {
            CardList combatants = compTargetables.getType("Creature");
            CardListUtil.sortByEvaluateCreature(combatants);
            if (AllZone.getPhase().is(Constant.Phase.Combat_Declare_Blockers_InstantAbility)) {
                for (Card c : combatants) {
                    if (c.getShield() == 0 && CombatUtil.combatantWouldBeDestroyed(c)) {
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="153">
<file line="1336" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Instants.java"/>
<file line="3266" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Sorceries.java"/>
<codefragment>
<![CDATA[
                private ArrayList<String> chooseTwo(ArrayList<String> choices) {
                    ArrayList<String> out = new ArrayList<String>();
                    Object o = GuiUtils.getChoiceOptional("Choose Two", choices.toArray());
                    if (o == null) return null;

                    out.add((String) o);
                    card.addSpellChoice((String) o);
                    choices.remove(out.get(0));
                    o = GuiUtils.getChoiceOptional("Choose Two", choices.toArray());
                    if (o == null) return null;

                    out.add((String) o);
                    card.addSpellChoice((String) o);
                    return out;
                }//chooseTwo()
            };//Input chooseTwoInput

            // Do not remove SpellAbilities created by AbilityFactory or Keywords.
            card.clearFirstSpellAbility();
            card.addSpellAbility(spell);

            card.setSpellWithChoices(true);
            spell.setBeforePayMana(chooseTwoInput);
        }//*************** END ************ END **************************


        //*************** START *********** START **************************
        else if (cardName.equals("Turn to Slag")) {
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="153">
<file line="782" path="/Users/dhudson/mtg/cardforge/src/forge/ComputerUtil.java"/>
<file line="822" path="/Users/dhudson/mtg/cardforge/src/forge/ComputerUtil.java"/>
<codefragment>
<![CDATA[
        for (int number = 1; number < 6; number++)
            for (int i = 0; i < manaSources.size(); i++) {
                Card card = manaSources.get(i);

                if (card.isCreature()) continue; //don't use creatures before other permanents

                int usableManaAbilities = 0;
                boolean needsLimitedResources = false;
                ArrayList<Ability_Mana> manaAbilities = card.getAIPlayableMana();

                for (Ability_Mana m : manaAbilities) {

                    Cost cost = m.getPayCosts();

                    //if the AI can't pay the additional costs skip the mana ability
                    if (cost != null) {
                        if (!canPayAdditionalCosts(m, player))
                            continue;
                        if (cost.getSubCounter() || cost.getLifeCost())
                            needsLimitedResources = true;
                    } else if (card.isTapped())
                        continue;

                    //don't use abilities with dangerous drawbacks
                    if (m.getSubAbility() != null) {
                        if (!m.getSubAbility().chkAI_Drawback())
                            continue;
                        needsLimitedResources = true; //TODO: check for good drawbacks (gainLife)
                    }
                    usableManaAbilities++;
                }

                if (usableManaAbilities == number && !needsLimitedResources && !sortedManaSources.contains(card))
]]>
</codefragment>
</duplication>
<duplication lines="42" tokens="152">
<file line="242" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<file line="234" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<codefragment>
<![CDATA[
				public void actionPerformed(ActionEvent arg0) {
            		GuiDisplayUtil.devModeUntapPerm();
            	}
            };
            //end DevMode Untap

            Object[] objDev = {
            		GuiDisplay4.canLoseByDecking,
            		viewAIHand,
            		viewAILibrary,
            		viewHumanLibrary,
            		generateMana,
            		setupBattleField,
            		tutor,
            		addCounter,
            		tapPerm,
            		untapPerm
            };
            for (Object o : objDev) {
                if (o instanceof ForgeAction)
                    devMenu.add(((ForgeAction) o).setupButton(new JMenuItem()));
                else if (o instanceof Component)
                    devMenu.add((Component) o);
                else if (o instanceof Action)
                    devMenu.add((Action) o);
            }
        }

        JMenuBar menuBar = new JMenuBar();
        menuBar.add(gameMenu);
        menuBar.add(gamePhases);
        menuBar.add(devMenu);
        menuBar.add(new MenuItem_HowToPlay());
        this.setJMenuBar(menuBar);
    }//addMenu()

    /**
     * <p>canLoseByDecking.</p>
     *
     * @return a boolean.
     */
    public boolean canLoseByDecking() {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="151">
<file line="142" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Debuff.java"/>
<file line="488" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Protection.java"/>
<codefragment>
<![CDATA[
    	StringBuilder sb = new StringBuilder();

    	ArrayList<Card> tgtCards;
    	Target tgt = af.getAbTgt();
    	if(tgt != null)
    		tgtCards = tgt.getTargetCards();
    	else
    		tgtCards = AbilityFactory.getDefinedCards(sa.getSourceCard(), params.get("Defined"), sa);

    	if(tgtCards.size() > 0) {

    		if(sa instanceof Ability_Sub)
    			sb.append(" ");
    		else
    			sb.append(host).append(" - ");

    		Iterator<Card> it = tgtCards.iterator();
            while (it.hasNext()) {
                Card tgtC = it.next();
                if (tgtC.isFaceDown()) sb.append("Morph");
                else sb.append(tgtC);

                if (it.hasNext()) sb.append(", ");
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="151">
<file line="832" path="/Users/dhudson/mtg/cardforge/src/forge/Card.java"/>
<file line="898" path="/Users/dhudson/mtg/cardforge/src/forge/Card.java"/>
<codefragment>
<![CDATA[
            AllZone.getTriggerHandler().runTrigger("CounterAdded", runParams);
        }
        
        if (counterName.equals(Counters.P1P1) || counterName.equals(Counters.M1M1)) {
            // +1/+1 counters should erase -1/-1 counters
            int plusOneCounters = 0;
            int minusOneCounters = 0;

            Counters p1Counter = Counters.P1P1;
            Counters m1Counter = Counters.M1M1;
            if (counters.containsKey(p1Counter))
                plusOneCounters = counters.get(p1Counter);
            if (counters.containsKey(m1Counter))
                minusOneCounters = counters.get(m1Counter);

            if (plusOneCounters == minusOneCounters) {
                counters.remove(m1Counter);
                counters.remove(p1Counter);
            }
            if (plusOneCounters > minusOneCounters) {
                counters.remove(m1Counter);
                counters.put(p1Counter, (Integer) (plusOneCounters - minusOneCounters));
            } else {
                counters.put(m1Counter, (Integer) (minusOneCounters - plusOneCounters));
                counters.remove(p1Counter);
            }
        }
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="150">
<file line="148" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_BoosterDraft.java"/>
<file line="530" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor.java"/>
<codefragment>
<![CDATA[
        setBounds(bounds);


        //TODO use this as soon the deck editor has resizable GUI
//        //Use both so that when "un"maximizing, the frame isn't tiny
//        setSize(1024, 740);
//        setExtendedState(Frame.MAXIMIZED_BOTH);
    }//setupAndDisplay()

    /**
     * <p>getStats.</p>
     *
     * @param deck a {@link forge.CardList} object.
     * @return a {@link java.lang.String} object.
     */
    private String getStats(CardList deck) {
        int total = deck.size();
        int creature = deck.getType("Creature").size();
        int land = deck.getType("Land").size();

        StringBuffer show = new StringBuffer();
        show.append("Total - ").append(total).append(", Creatures - ").append(creature).append(", Land - ").append(land);
        String[] color = Constant.Color.Colors;
        for (int i = 0; i < 5; i++)
            show.append(", ").append(color[i]).append(" - ").append(CardListUtil.getColor(deck, color[i]).size());

        return show.toString();
    }//getStats()

    /**
     * <p>Constructor for Gui_Quest_DeckEditor.</p>
     */
    public Gui_Quest_DeckEditor() {
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="148">
<file line="186" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<file line="1107" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<codefragment>
<![CDATA[
    private static boolean discardCanPlayAI(final AbilityFactory af, SpellAbility sa) {
        HashMap<String, String> params = af.getMapParams();
        // AI cannot use this properly until he can use SAs during Humans turn
        if (!ComputerUtil.canPayCost(sa))
            return false;

        Target tgt = af.getAbTgt();
        Card source = sa.getSourceCard();
        Cost abCost = af.getAbCost();

        if (abCost != null) {
            // AI currently disabled for these costs
            if (abCost.getSacCost()) {
                return false;
            }
            if (abCost.getLifeCost()) {
                if (AllZone.getComputerPlayer().getLife() - abCost.getLifeAmount() < 4)
                    return false;
            }
            if (abCost.getDiscardCost()) return false;

            if (abCost.getSubCounter()) {
                if (abCost.getCounterType().equals(Counters.P1P1)) return false; // Other counters should be used
            }

        }

        boolean humanHasHand = AllZoneUtil.getCardsInZone(Constant.Zone.Hand, AllZone.getHumanPlayer()).size() > 0;
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="148">
<file line="233" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadPictures_LQ.java"/>
<file line="310" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadSetPictures_LQ.java"/>
<codefragment>
<![CDATA[
                    try {
                        in = new BufferedInputStream(new URL(url).openConnection(p).getInputStream());
                        out = new BufferedOutputStream(new FileOutputStream(f));

                        while ((len = in.read(buf)) != -1) {
                            //user cancelled
                            if (cancel) {
                                in.close();
                                out.flush();
                                out.close();

                                //delete what was written so far
                                f.delete();

                                return;
                            }//if - cancel

                            out.write(buf, 0, len);
                        }//while - read and write file

                        in.close();
                        out.flush();
                        out.close();
                    } catch (MalformedURLException mURLe) {
                        System.out.println("Error - possibly missing URL for: " + cards[card].name);
                        //Log.error("LQ Pictures", "Malformed URL for: "+cards[card].name, mURLe);
                    }
                } catch (FileNotFoundException fnfe) {
                    System.out.println("Error - the LQ picture for " + cards[card].name + " could not be found on the server. [" + cards[card].url + "] - " + fnfe.getMessage());
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="148">
<file line="698" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<file line="565" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor.java"/>
<codefragment>
<![CDATA[
            jbInit();
        } catch (Exception ex) {
            ErrorViewer.showError(ex);
        }
    }

    /**
     * <p>getCard.</p>
     *
     * @return a {@link forge.Card} object.
     */
    public Card getCard() {
        return detail.getCard();
    }

    /** {@inheritDoc} */
    public void setCard(Card card) {
        detail.setCard(card);
        picture.setCard(card);
    }

    /**
     * <p>jbInit.</p>
     *
     * @throws java.lang.Exception if any.
     */
    private void jbInit() throws Exception {

        border1 = new EtchedBorder(EtchedBorder.RAISED, Color.white, new Color(148, 145, 140));
        titledBorder1 = new TitledBorder(BorderFactory.createEtchedBorder(Color.white, new Color(148, 145, 140)),
                "All Cards");
        border2 = BorderFactory.createEtchedBorder(Color.white, new Color(148, 145, 140));
        titledBorder2 = new TitledBorder(border2, "Deck");
        this.getContentPane().setLayout(null);
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="148">
<file line="166" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<file line="243" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<codefragment>
<![CDATA[
        bottomTable.repaint();
    }// updateDisplay

    /**
     * <p>updateDisplay.</p>
     */
    public void updateDisplay() {
        //updateDisplay(this.top, this.bottom);

        topModel.clear();

        if (AllZone.getNameChanger().shouldChangeCardName()) {
            top = new CardList(AllZone.getNameChanger().changeCard(top.toArray()));
            bottom = new CardList(AllZone.getNameChanger().changeCard(bottom.toArray()));
        }

        Card c;
        String cardName;
        ReadBoosterPack pack = new ReadBoosterPack();

        // update top
        for (int i = 0; i < top.size(); i++) {
            c = top.get(i);

            // add rarity to card if this is a sealed card pool

            cardName = AllZone.getNameChanger().getOriginalName(c.getName());
            if (!pack.getRarity(cardName).equals("error")) {
                c.setRarity(pack.getRarity(cardName));
            }
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="147">
<file line="870" path="/Users/dhudson/mtg/cardforge/src/forge/card/spellability/Cost.java"/>
<file line="1007" path="/Users/dhudson/mtg/cardforge/src/forge/card/spellability/Cost.java"/>
<codefragment>
<![CDATA[
                cost.append(", Pay ");
            cost.append(lifeAmount);
            cost.append(" Life");

            first = false;
        }

        if (discardCost) {
            cost.append(discardString(first));
            first = false;
        }

        if (sacCost) {
            cost.append(sacString(first));
            first = false;
        }

        if (exileCost) {
            cost.append(exileString(first));
            first = false;
        }

        if (exileFromHandCost) {
            cost.append(exileFromHandString(first));
            first = false;
        }

        if (exileFromGraveCost) {
            cost.append(exileFromGraveString(first));
            first = false;
        }

        if (exileFromTopCost) {
            cost.append(exileFromTopString(first));
            first = false;
        }

        if (returnCost) {
            cost.append(returnString(first));
            first = false;
        }

        if (first)    // No costs, append 0
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="147">
<file line="43" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MultipleBlockers3.java"/>
<file line="47" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MultipleBlockers4.java"/>
<codefragment>
<![CDATA[
    Gui_MultipleBlockers4(Card attacker, CardList creatureList, int damage, CardContainer display) {
        this();
        assignDamage = damage;
        updateDamageLabel();//update user message about assigning damage
        guiDisplay = display;
        att = attacker;
        blockers = creatureList;

        for (int i = 0; i < creatureList.size(); i++)
            creaturePanel.add(new CardPanel(creatureList.get(i)));

        if (att.hasKeyword("Trample")) {
            Card player = new Card();
            player.setName("Player");
            player.addIntrinsicKeyword("Shroud");
            player.addIntrinsicKeyword("Indestructible");
            creaturePanel.add(new CardPanel(player));
        }

        JDialog dialog = new JDialog(this, true);
        dialog.setTitle("Multiple Blockers");
        dialog.setContentPane(mainPanel);
        dialog.setSize(470, 260);
        dialog.setVisible(true);
    }

    /**
     * <p>Constructor for Gui_MultipleBlockers4.</p>
     */
    public Gui_MultipleBlockers4() {
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="146">
<file line="356" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Pump.java"/>
<file line="570" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Pump.java"/>
<codefragment>
<![CDATA[
        Card source = sa.getSourceCard();

        int defense;
        if (numDefense.contains("X") && source.getSVar("X").equals("Count$xPaid")) {
            // Set PayX here to maximum value.
            int xPay = ComputerUtil.determineLeftoverMana(sa);
            source.setSVar("PayX", Integer.toString(xPay));
            defense = xPay;
        } else
            defense = getNumDefense(sa);

        int attack;
        if (numAttack.contains("X") && source.getSVar("X").equals("Count$xPaid")) {
            // Set PayX here to maximum value.
            String toPay = source.getSVar("PayX");

            if (toPay.equals("")) {
                int xPay = ComputerUtil.determineLeftoverMana(sa);
                source.setSVar("PayX", Integer.toString(xPay));
                attack = xPay;
            } else
                attack = Integer.parseInt(toPay);
        } else
            attack = getNumAttack(sa);

        if (sa.getTarget() == null) {
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="146">
<file line="137" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<file line="208" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<codefragment>
<![CDATA[
            c = bottom.get(i);

            // add rarity to card if this is a sealed card pool
            if (!customMenu.getGameType().equals(Constant.GameType.Constructed))
                c.setRarity(pack.getRarity(c.getName()));

            //String PC = c.getSVar("PicCount");
            Random r = MyRandom.random;
            //int n = 0;
            //if (!PC.equals("")) {
            //    if (PC.matches("[0-9][0-9]?"))
            //    	n = Integer.parseInt(PC);
            //    if (n > 1)
            //        c.setRandomPicture(r.nextInt(n));
            //}

            if (c.getCurSetCode().equals(""))
                c.setCurSetCode(c.getMostRecentSet());

            if (!c.getCurSetCode().equals("")) {
                int n = SetInfoUtil.getSetInfo_Code(c.getSets(), c.getCurSetCode()).PicCount;
                if (n > 1)
                    c.setRandomPicture(r.nextInt(n - 1) + 1);

                c.setImageFilename(CardUtil.buildFilename(c));
            }

            bottomModel.addCard(c);
        }// for
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="145">
<file line="202" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Instants.java"/>
<file line="448" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Sorceries.java"/>
<codefragment>
<![CDATA[
                    CardList Pile1 = new CardList();
                    CardList Pile2 = new CardList();
                    boolean stop = false;
                    int Pile1CMC = 0;
                    int Pile2CMC = 0;


                    GuiUtils.getChoice("Revealing top " + Count + " cards of library: ", cards.toArray());
                    //Human chooses
                    if (card.getController().isComputer()) {
                        for (int i = 0; i < Count; i++) {
                            if (stop == false) {
                                choice = GuiUtils.getChoiceOptional("Choose cards to put into the first pile: ", cards.toArray());
                                if (choice != null) {
                                    Pile1.add(choice);
                                    cards.remove(choice);
                                    Pile1CMC = Pile1CMC + CardUtil.getConvertedManaCost(choice);
                                } else stop = true;
                            }
                        }
                        for (int i = 0; i < Count; i++) {
                            if (!Pile1.contains(exiled.get(i))) {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="145">
<file line="224" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Counters.java"/>
<file line="748" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Counters.java"/>
<codefragment>
<![CDATA[
            if (abCost.getSacCost() && !abCost.getSacThis()) {
                //only sacrifice something that's supposed to be sacrificed
                String sacType = abCost.getSacType();
                CardList typeList = AllZoneUtil.getPlayerCardsInPlay(AllZone.getComputerPlayer());
                typeList = typeList.getValidCards(sacType.split(","), source.getController(), source);
                if (ComputerUtil.getCardPreference(source, "SacCost", typeList) == null)
                    return false;
            }
            if (abCost.getLifeCost()) return false;
            if (abCost.getDiscardCost()) return false;

            if (abCost.getSubCounter()) {
                // A card has a 25% chance per counter to be able to pass through here
                // 4+ counters will always pass. 0 counters will never
                int currentNum = source.getCounters(abCost.getCounterType());
                double percent = .25 * (currentNum / abCost.getCounterNum());
                if (percent <= r.nextFloat())
                    return false;
            }
        }

        if (!ComputerUtil.canPayCost(sa))
            return false;
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="142">
<file line="127" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Animate.java"/>
<file line="336" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Animate.java"/>
<codefragment>
<![CDATA[
        Card source = sa.getSourceCard();
        Card host = af.getHostCard();
        Hashtable<String, String> svars = host.getSVars();

        //AF specific params
        int power = -1;
        if (params.containsKey("Power")) power = AbilityFactory.calculateAmount(host, params.get("Power"), sa);
        int toughness = -1;
        if (params.containsKey("Toughness"))
            toughness = AbilityFactory.calculateAmount(host, params.get("Toughness"), sa);

        boolean permanent = params.containsKey("Permanent") ? true : false;

        final ArrayList<String> types = new ArrayList<String>();
        if (params.containsKey("Types")) types.addAll(Arrays.asList(params.get("Types").split(",")));
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="138">
<file line="90" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<file line="175" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<codefragment>
<![CDATA[
        topModel.clear();

        if (AllZone.getNameChanger().shouldChangeCardName()) {
            top = new CardList(AllZone.getNameChanger().changeCard(top.toArray()));
            bottom = new CardList(AllZone.getNameChanger().changeCard(bottom.toArray()));
        }

        Card c;
        String cardName;
        ReadBoosterPack pack = new ReadBoosterPack();

        // update top
        for (int i = 0; i < top.size(); i++) {
            c = top.get(i);

            // add rarity to card if this is a sealed card pool

            cardName = AllZone.getNameChanger().getOriginalName(c.getName());
            if (!pack.getRarity(cardName).equals("error")) {
                c.setRarity(pack.getRarity(cardName));
            }
]]>
</codefragment>
</duplication>
<duplication lines="53" tokens="137">
<file line="217" path="/Users/dhudson/mtg/cardforge/src/forge/CardShopTableModel.java"/>
<file line="232" path="/Users/dhudson/mtg/cardforge/src/forge/TableModel.java"/>
<codefragment>
<![CDATA[
        return count;
    }

    /**
     * <p>getRowCount.</p>
     *
     * @return a int.
     */
    public int getRowCount() {
        return dataNoCopies.size();
    }

    /**
     * <p>getColumnCount.</p>
     *
     * @return a int.
     */
    public int getColumnCount() {
        return column.length;
    }

    /** {@inheritDoc} */
    @Override
    public String getColumnName(int n) {
        return column[n];
    }

    /** {@inheritDoc} */
    public Object getValueAt(int row, int column) {
        return getColumn(dataNoCopies.get(row), column);
    }

    /**
     * <p>Getter for the field <code>column</code>.</p>
     *
     * @param c a {@link forge.Card} object.
     * @param column a int.
     * @param column a int.
     * @return a {@link java.lang.Object} object.
     */
    private Object getColumn(Card c, int column) {
        switch (column) {
            case 0:
                return Integer.valueOf(countQuantity(c));
            case 1:
                return c.getName();
            case 2:
                return c.getManaCost();
            case 3:
                return TableSorter.getColor(c);
            case 4:
                return GuiDisplayUtil.formatCardType(c);
            case 5:
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="136">
<file line="225" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Instants.java"/>
<file line="471" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Sorceries.java"/>
<codefragment>
<![CDATA[
                                Pile2CMC = Pile2CMC + CardUtil.getConvertedManaCost(exiled.get(i));
                            }
                        }
                        StringBuilder sb = new StringBuilder();
                        sb.append("You have spilt the cards into the following piles" + "\r\n" + "\r\n");
                        sb.append("Pile 1: " + "\r\n");
                        for (int i = 0; i < Pile1.size(); i++) sb.append(Pile1.get(i).getName() + "\r\n");
                        sb.append("\r\n" + "Pile 2: " + "\r\n");
                        for (int i = 0; i < Pile2.size(); i++) sb.append(Pile2.get(i).getName() + "\r\n");
                        JOptionPane.showMessageDialog(null, sb, "", JOptionPane.INFORMATION_MESSAGE);
                        if (Pile1CMC >= Pile2CMC) {
                            JOptionPane.showMessageDialog(null, "Computer chooses the Pile 1", "", JOptionPane.INFORMATION_MESSAGE);
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="135">
<file line="1448" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Counters.java"/>
<file line="1635" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Counters.java"/>
<codefragment>
<![CDATA[
    private static void removeCounterAllResolve(final AbilityFactory af, final SpellAbility sa) {
        HashMap<String, String> params = af.getMapParams();

        String type = params.get("CounterType");
        int counterAmount = AbilityFactory.calculateAmount(af.getHostCard(), params.get("CounterNum"), sa);
        String valid = params.get("ValidCards");

        CardList cards = AllZoneUtil.getCardsInPlay();
        cards = cards.getValidCards(valid, sa.getSourceCard().getController(), sa.getSourceCard());

        Target tgt = sa.getTarget();
        if (tgt != null) {
            Player pl = sa.getTargetPlayer();
            cards = cards.getController(pl);
        }

        for (Card tgtCard : cards) {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="134">
<file line="203" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_CounterMagic.java"/>
<file line="267" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_CounterMagic.java"/>
<codefragment>
<![CDATA[
            if (unlessCost != null) {
                // Is this Usable Mana Sources? Or Total Available Mana?
                int usableManaSources = CardFactoryUtil.getUsableManaSources(AllZone.getHumanPlayer());
                int toPay = 0;
                boolean setPayX = false;
                if (unlessCost.equals("X") && source.getSVar(unlessCost).equals("Count$xPaid")) {
                    setPayX = true;
                    toPay = ComputerUtil.determineLeftoverMana(sa);
                } else
                    toPay = AbilityFactory.calculateAmount(source, unlessCost, sa);

                if (toPay == 0)
                    return false;

                if (toPay <= usableManaSources) {
                    // If this is a reusable Resource, feel free to play it most of the time
                    if (!sa.getPayCosts().isReusuableResource() || MyRandom.random.nextFloat() < .4)
                        return false;
                }

                if (setPayX)
                    source.setSVar("PayX", Integer.toString(toPay));
            }
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="133">
<file line="282" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ChangeZone.java"/>
<file line="923" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ChangeZone.java"/>
<codefragment>
<![CDATA[
        if (abCost != null) {
            // AI currently disabled for these costs
            if (abCost.getSacCost() && !abCost.getSacThis()) {
                //only sacrifice something that's supposed to be sacrificed
                String type = abCost.getSacType();
                CardList typeList = AllZoneUtil.getPlayerCardsInPlay(AllZone.getComputerPlayer());
                typeList = typeList.getValidCards(type.split(","), source.getController(), source);
                if (ComputerUtil.getCardPreference(source, "SacCost", typeList) == null)
                    return false;
            }
            if (abCost.getLifeCost()) {
                if (AllZone.getComputerPlayer().getLife() - abCost.getLifeAmount() < 4)
                    return false;
            }
            if (abCost.getDiscardCost()) return false;

            if (abCost.getSubCounter()) {
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="132">
<file line="300" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/GenerateConstructedMultiColorDeck.java"/>
<file line="352" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/GenerateConstructedMultiColorDeck.java"/>
<codefragment>
<![CDATA[
        out.addAll(CardListUtil.getGoldCards(in));
        out.shuffle();

        CardList artifact = in.filter(new CardListFilter() {
            public boolean addCard(Card c) {
                //is this really a colorless artifact and not something
                //wierd like Sarcomite Myr which is a colored artifact
                return c.isArtifact() &&
                        CardUtil.getColors(c).contains(Constant.Color.Colorless) &&
                        !Gui_NewGame.removeArtifacts.isSelected();
            }
        });
        out.addAll(artifact);

        out = out.filter(new CardListFilter() {
            public boolean addCard(Card c) {
                if (c.isCreature() &&
                        c.getNetAttack() <= 1 &&
                        Gui_NewGame.removeSmallCreatures.isSelected()) {
                    return false;
                }

                return true;
            }
        });

        out = filterBadCards(out, 3);
        return out;
    }


    /**
     * <p>filterBadCards.</p>
     *
     * @param list a {@link forge.CardList} object.
     * @param colors a int.
     * @return a {@link forge.CardList} object.
     */
    private CardList filterBadCards(CardList list, int colors) {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="132">
<file line="247" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/Generate2ColorDeck.java"/>
<file line="272" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/Generate3ColorDeck.java"/>
<codefragment>
<![CDATA[
                throw new RuntimeException("Generate3ColorDeck : get3ColorDeck -- looped too much -- Sp123");

            tDeck.add(AllZone.getCardFactory().getCard(c.getName(), AllZone.getComputerPlayer()));
            int n = CardCounts.get(c.getName());
            CardCounts.put(c.getName(), n + 1);
            tmpDeck += c.getName() + " " + c.getManaCost() + "\n";
        }

        // Add lands
        int numLands = 0;
        if (LandsPercentage > 0) {
            p = (float) ((float) LandsPercentage * .01);
            numLands = (int) (p * (float) Size);
        } else     // otherwise, just fill in the rest of the deck with basic lands
            numLands = Size - tDeck.size();

        tmpDeck += "numLands:" + numLands + "\n";

        int nDLands = (numLands / 4);
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="132">
<file line="299" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<file line="323" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<codefragment>
<![CDATA[
            Card c = AllZone.getCardFactory().getCard(aList, null);

            c.setRarity(pack.getRarity(c.getName()));
            if (map.containsKey(c.getName())) {
                c.setValue(map.get(c.getName()));
            } else //card is not on pricelist
            {
                System.out.println("Card " + c.getName() + " is not in the price list.");
                if (c.getRarity().equals("Common")) {
                    c.setValue(10);
                } else if (c.getRarity().equals("Uncommon")) {
                    c.setValue(50);
                } else if (c.getRarity().equals("Rare")) {
                    c.setValue(200);
                }
            }
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="132">
<file line="1265" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<file line="1262" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<codefragment>
<![CDATA[
    JPanel cdPanel = new JPanel();
    JLabel oppLifeLabel = new JLabel();
    JLabel oppIconLabel = new JLabel();
    JLabel playerLifeLabel = new JLabel();
    JLabel oppPCLabel = new JLabel();
    JLabel playerPCLabel = new JLabel();
    JLabel oppLibraryLabel = new JLabel(
            ForgeProps.getLocalized(COMPUTER_LIBRARY.BUTTON),
            SwingConstants.TRAILING);
    JLabel oppHandValue = new JLabel();
    JLabel oppLibraryValue = new JLabel();
    JLabel oppGraveValue = new JLabel();
    JLabel oppRemovedValue = new JLabel();
    JLabel playerHandValue = new JLabel();
    JLabel playerLibraryValue = new JLabel();
    JLabel playerGraveValue = new JLabel();
    JLabel playerFBValue = new JLabel();
    JLabel playerRemovedValue = new JLabel();

    CardDetailPanel detail = new CardDetailPanel(null);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="132">
<file line="744" path="/Users/dhudson/mtg/cardforge/src/forge/GameAction.java"/>
<file line="888" path="/Users/dhudson/mtg/cardforge/src/forge/GameAction.java"/>
<codefragment>
<![CDATA[
        if (c.isEnchanted()) {
            CardList list = new CardList(c.getEnchantedBy().toArray());
            list = list.filter(new CardListFilter() {
                public boolean addCard(Card crd) {
                    return crd.hasKeyword("Totem armor");
                }
            });
            CardListUtil.sortCMC(list);


            if (list.size() != 0) {
                final Card crd;
                if (list.size() == 1) {
                    crd = list.get(0);
                } else {
                    if (c.getController().isHuman())
                        crd = GuiUtils.getChoiceOptional("Select totem armor to destroy", list.toArray());
                    else
                        crd = list.get(0);
                }
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="130">
<file line="113" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<file line="133" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor.java"/>
<codefragment>
<![CDATA[
            Random r = MyRandom.random;
            //int n = 0;
            //if (!PC.equals("")) {
            //    if (PC.matches("[0-9][0-9]?"))
            //    	n = Integer.parseInt(PC);
            //    if (n > 1)
            //        c.setRandomPicture(r.nextInt(n));
            //}

            if (c.getCurSetCode().equals(""))
                c.setCurSetCode(c.getMostRecentSet());

            if (!c.getCurSetCode().equals("")) {
                int n = SetInfoUtil.getSetInfo_Code(c.getSets(), c.getCurSetCode()).PicCount;
                if (n > 1)
                    c.setRandomPicture(r.nextInt(n - 1) + 1);

                c.setImageFilename(CardUtil.buildFilename(c));
            }


            topModel.addCard(c);
        }//for

        //update bottom
        for (int i = 0; i < bottom.size(); i++) {
            c = bottom.get(i);
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="130">
<file line="2435" path="/Users/dhudson/mtg/cardforge/src/forge/GameActionUtil.java"/>
<file line="3189" path="/Users/dhudson/mtg/cardforge/src/forge/GameActionUtil.java"/>
<codefragment>
<![CDATA[
        CardList kinship = AllZoneUtil.getPlayerCardsInPlay(player, "Waterspout Weavers");

        PlayerZone library = AllZone.getZone(Constant.Zone.Library, player);
        // Players would not choose to trigger Kinship ability if library is empty.
        // Useful for games when the "Milling = Loss Condition" check box is unchecked.

        if (kinship.size() == 0 || library.size() <= 0)
            return;

        final String[] shareTypes = {"Merfolk", "Wizard"};
        final Card[] prevCardShown = {null};
        final Card peek[] = {null};

        for (final Card k : kinship) {
            Ability ability = new Ability(k, "0") {    // change to triggered abilities when ready
                @Override
                public void resolve() {
                    PlayerZone library = AllZone.getZone(Constant.Zone.Library, player);
                    if (library.size() <= 0)
                        return;

                    peek[0] = library.get(0);
                    boolean wantMerfolkBuff = false;
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="129">
<file line="176" path="/Users/dhudson/mtg/cardforge/src/forge/CardUtil.java"/>
<file line="309" path="/Users/dhudson/mtg/cardforge/src/forge/QuestData_BoosterPack.java"/>
<codefragment>
<![CDATA[
    private String getColor(Card c) {
        String m = c.getManaCost();
        Set<String> colors = new HashSet<String>();

        for (int i = 0; i < m.length(); i++) {
            switch (m.charAt(i)) {
                case ' ':
                    break;
                case 'G':
                    colors.add(Constant.Color.Green);
                    break;
                case 'W':
                    colors.add(Constant.Color.White);
                    break;
                case 'B':
                    colors.add(Constant.Color.Black);
                    break;
                case 'U':
                    colors.add(Constant.Color.Blue);
                    break;
                case 'R':
                    colors.add(Constant.Color.Red);
                    break;
            }
        }
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="128">
<file line="263" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Instants.java"/>
<file line="522" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Sorceries.java"/>
<codefragment>
<![CDATA[
                        for (int i = 0; i < Count; i++) if (!Pile1.contains(exiled.get(i))) Pile2.add(exiled.get(i));
                        StringBuilder sb = new StringBuilder();
                        sb.append("Choose a pile to add to your hand: " + "\r\n" + "\r\n");
                        sb.append("Pile 1: " + "\r\n");
                        for (int i = 0; i < Pile1.size(); i++) sb.append(Pile1.get(i).getName() + "\r\n");
                        sb.append("\r\n" + "Pile 2: " + "\r\n");
                        for (int i = 0; i < Pile2.size(); i++) sb.append(Pile2.get(i).getName() + "\r\n");
                        Object[] possibleValues = {"Pile 1", "Pile 2"};
                        Object q = JOptionPane.showOptionDialog(null, sb, "Brilliant Ultimatum",
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="127">
<file line="1484" path="/Users/dhudson/mtg/cardforge/src/forge/card/spellability/Cost_Payment.java"/>
<file line="1554" path="/Users/dhudson/mtg/cardforge/src/forge/card/spellability/Cost_Payment.java"/>
<codefragment>
<![CDATA[
                typeList = typeList.getValidCards(type.split(";"), spell.getActivatingPlayer(), spell.getSourceCard());
                AllZone.getDisplay().showMessage(msg.toString());
                ButtonUtil.enableOnlyCancel();
            }

            @Override
            public void selectButtonCancel() {
                cancel();
            }

            @Override
            public void selectCard(Card card, PlayerZone zone) {
                if (typeList.contains(card)) {
                    nExiles++;
                    payment.getAbility().addCostToHashList(card, "Exiled");
                    AllZone.getGameAction().exile(card);
                    typeList.remove(card);
                    //in case nothing else to exile
                    if (nExiles == nNeeded)
                        done();
                    else if (typeList.size() == 0)    // this really shouldn't happen
                        cancel();
                    else
                        showMessage();
                }
            }

            public void done() {
                payment.setPayExileFromHand(true);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="127">
<file line="1167" path="/Users/dhudson/mtg/cardforge/src/forge/card/spellability/Cost_Payment.java"/>
<file line="1477" path="/Users/dhudson/mtg/cardforge/src/forge/card/spellability/Cost_Payment.java"/>
<file line="1829" path="/Users/dhudson/mtg/cardforge/src/forge/card/spellability/Cost_Payment.java"/>
<codefragment>
<![CDATA[
                msg.append(nLeft).append(" ");
                msg.append(type);
                if (nLeft > 1) {
                    msg.append("s");
                }

                typeList = AllZoneUtil.getPlayerCardsInPlay(sa.getSourceCard().getController());
                typeList = typeList.getValidCards(type.split(";"), sa.getActivatingPlayer(), sa.getSourceCard());
                AllZone.getDisplay().showMessage(msg.toString());
                ButtonUtil.enableOnlyCancel();
            }

            @Override
            public void selectButtonCancel() {
                cancel();
            }

            @Override
            public void selectCard(Card card, PlayerZone zone) {
                if (typeList.contains(card)) {
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="127">
<file line="322" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_AlterLife.java"/>
<file line="1228" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_AlterLife.java"/>
<codefragment>
<![CDATA[
    private static void setLifeResolve(final AbilityFactory af, final SpellAbility sa) {
        HashMap<String, String> params = af.getMapParams();

        int lifeAmount = AbilityFactory.calculateAmount(af.getHostCard(), params.get("LifeAmount"), sa);
        ArrayList<Player> tgtPlayers;

        Target tgt = af.getAbTgt();
        if (tgt != null && !params.containsKey("Defined"))
            tgtPlayers = tgt.getTargetPlayers();
        else
            tgtPlayers = AbilityFactory.getDefinedPlayers(sa.getSourceCard(), params.get("Defined"), sa);

        for (Player p : tgtPlayers)
            if (tgt == null || p.canTarget(af.getHostCard()))
                p.setLife(lifeAmount, sa.getSourceCard());
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="127">
<file line="668" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<file line="1026" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplayUtil.java"/>
<codefragment>
<![CDATA[
        List<Card> tmp, diff;
        tmp = new ArrayList<Card>();
        for (arcane.ui.CardPanel cpa : p.cardPanels)
            tmp.add(cpa.gameCard);
        diff = new ArrayList<Card>(tmp);
        diff.removeAll(Arrays.asList(c));
        if (diff.size() == p.cardPanels.size())
            p.clear();
        else {
            for (Card card : diff) {
                p.removeCardPanel(p.getCardPanel(card.getUniqueNumber()));
            }
        }
        diff = new ArrayList<Card>(Arrays.asList(c));
        diff.removeAll(tmp);
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="125">
<file line="1020" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Creatures.java"/>
<file line="40" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Sorceries.java"/>
<codefragment>
<![CDATA[
            final SpellAbility spell = new Spell(card) {

                private static final long serialVersionUID = -3075569295823682336L;

                @Override
                public boolean canPlayAI() {
                    return false;
                }

                @Override
                public void resolve() {

                    Card crd0 = target[0];
                    Card crd1 = target[1];

                    if (crd0 != null && crd1 != null) {
                        Player p0 = crd0.getController();
                        Player p1 = crd1.getController();
                        AllZone.getGameAction().changeController(new CardList(crd0), p0, p1);
                        AllZone.getGameAction().changeController(new CardList(crd1), p1, p0);
                    }

                }//resolve()
            };//SpellAbility


            final Input input = new Input() {

                private static final long serialVersionUID = -1017253686774265770L;
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="125">
<file line="598" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Debuff.java"/>
<file line="874" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Pump.java"/>
<codefragment>
<![CDATA[
        final int defense = getNumDefense(sa);

        boolean chance = r.nextFloat() <= Math.pow(.6667, source.getAbilityUsed()); //to prevent runaway activations

        if (params.containsKey("ValidCards")) {
            valid = params.get("ValidCards");
        }

        CardList comp = AllZoneUtil.getPlayerCardsInPlay(AllZone.getComputerPlayer());
        comp = comp.getValidCards(valid, hostCard.getController(), hostCard);
        CardList human = AllZoneUtil.getPlayerCardsInPlay(AllZone.getHumanPlayer());
        human = human.getValidCards(valid, hostCard.getController(), hostCard);

        //only count creatures that can attack
        human = human.filter(new CardListFilter() {
            public boolean addCard(Card c) {
                return CombatUtil.canAttack(c) && !AF.isCurse();
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="124">
<file line="133" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/GenerateConstructedDeck.java"/>
<file line="300" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/GenerateConstructedMultiColorDeck.java"/>
<codefragment>
<![CDATA[
        out.addAll(CardListUtil.getColor(in, color3));
        out.shuffle();

        CardList artifact = in.filter(new CardListFilter() {
            public boolean addCard(Card c) {
                //is this really a colorless artifact and not something
                //wierd like Sarcomite Myr which is a colored artifact
                return c.isArtifact() &&
                        CardUtil.getColors(c).contains(Constant.Color.Colorless) &&
                        !Gui_NewGame.removeArtifacts.isSelected();
            }
        });
        out.addAll(artifact);

        out = out.filter(new CardListFilter() {
            public boolean addCard(Card c) {
                if (c.isCreature() &&
                        c.getNetAttack() <= 1 &&
                        Gui_NewGame.removeSmallCreatures.isSelected()) {
                    return false;
                }

                return true;
            }
        });

        out = filterBadCards(out, 3);
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="123">
<file line="40" path="/Users/dhudson/mtg/cardforge/src/forge/gui/input/Input_PayManaCost.java"/>
<file line="66" path="/Users/dhudson/mtg/cardforge/src/forge/gui/input/Input_PayManaCost.java"/>
<codefragment>
<![CDATA[
        originalManaCost = sa.getManaCost(); // Change
        originalCard = sa.getSourceCard();

        spell = sa;

        if (Phase.getGameBegins() == 1) {
            if (sa.getSourceCard().isCopiedSpell() && sa.isSpell()) {
                if (spell.getAfterPayMana() != null) stopSetNext(spell.getAfterPayMana());
                else {
                    manaCost = new ManaCost("0");
                    AllZone.getStack().add(spell);
                }
            } else {
                manaCost = AllZone.getGameAction().getSpellCostChange(sa, new ManaCost(originalManaCost));
            }
        } else {
            manaCost = new ManaCost(sa.getManaCost());
        }
    }
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="123">
<file line="5459" path="/Users/dhudson/mtg/cardforge/src/forge/Card.java"/>
<file line="482" path="/Users/dhudson/mtg/cardforge/src/forge/Player.java"/>
<codefragment>
<![CDATA[
        if (AllZoneUtil.isCardInPlay("Gratuitous Violence", source.getController())) {
            int amount = AllZoneUtil.getPlayerCardsInPlay(source.getController(), "Gratuitous Violence").size();
            for (int i = 0; i < amount; i++)
                restDamage += restDamage;
        }

        if (AllZoneUtil.isCardInPlay("Fire Servant", source.getController()) && source.isRed()
                && (source.isInstant() || source.isSorcery())) {
            int amount = AllZoneUtil.getPlayerCardsInPlay(source.getController(), "Fire Servant").size();
            for (int i = 0; i < amount; i++)
                restDamage += restDamage;
        }

        if (AllZoneUtil.isCardInPlay("Benevolent Unicorn") && source.isSpell()) {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="122">
<file line="177" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Choose.java"/>
<file line="419" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Choose.java"/>
<codefragment>
<![CDATA[
    private static boolean chooseColorTriggerAI(final AbilityFactory af, final SpellAbility sa, boolean mandatory) {
        if (!ComputerUtil.canPayCost(sa))
            return false;

        Target tgt = sa.getTarget();

        if (sa.getTarget() != null) {
            tgt.resetTargets();
            sa.getTarget().addTarget(AllZone.getComputerPlayer());
        } else {
            ArrayList<Player> tgtPlayers = AbilityFactory.getDefinedPlayers(sa.getSourceCard(), af.getMapParams().get("Defined"), sa);
            for (Player p : tgtPlayers)
                if (p.isHuman() && !mandatory)
                    return false;
        }
        return true;
    }

    /**
     * <p>chooseColorResolve.</p>
     *
     * @param af a {@link forge.card.abilityFactory.AbilityFactory} object.
     * @param sa a {@link forge.card.spellability.SpellAbility} object.
     */
    private static void chooseColorResolve(final AbilityFactory af, final SpellAbility sa) {
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="121">
<file line="20" path="/Users/dhudson/mtg/cardforge/src/forge/SetInfoUtil.java"/>
<file line="270" path="/Users/dhudson/mtg/cardforge/src/forge/SetInfoUtil.java"/>
<codefragment>
<![CDATA[
        ArrayList<String> fData = FileUtil.readFile("res/blockdata/blocks.txt");

        if (fData.size() > 0) {
            for (int i = 0; i < fData.size(); i++) {
                String s = fData.get(i);
                if (s.length() > 5) {
                    HashMap<String, String> sm = new HashMap<String, String>();

                    String ss[] = s.split("\\|");
                    for (int j = 0; j < ss.length; j++) {
                        String kv[] = ss[j].split(":");
                        sm.put(kv[0], kv[1]);
                    }
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="121">
<file line="1759" path="/Users/dhudson/mtg/cardforge/src/forge/GameAction.java"/>
<file line="1916" path="/Users/dhudson/mtg/cardforge/src/forge/GameAction.java"/>
<codefragment>
<![CDATA[
                                    for (int no = 0; no < Max; no++) Numbers[no] = String.valueOf(no);
                                    String Number_ManaCost = " ";
                                    if (Mana.toString().length() == 1)
                                        Number_ManaCost = Mana.toString().substring(0, 1);
                                    else if (Mana.toString().length() == 0)
                                        Number_ManaCost = "0";  // Should Never Occur
                                    else Number_ManaCost = Mana.toString().substring(0, 2);
                                    Number_ManaCost = Number_ManaCost.trim();

                                    for (int check = 0; check < Max; check++) {
                                        if (Number_ManaCost.equals(Numbers[check])) {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="120">
<file line="847" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_AlterLife.java"/>
<file line="133" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<codefragment>
<![CDATA[
            sb.append(sa.getSourceCard().getName()).append(" - ");
        else
            sb.append(" ");

        String conditionDesc = params.get("ConditionDescription");
        if (conditionDesc != null)
            sb.append(conditionDesc).append(" ");

        ArrayList<Player> tgtPlayers;

        Target tgt = af.getAbTgt();
        if (tgt != null)
            tgtPlayers = tgt.getTargetPlayers();
        else
            tgtPlayers = AbilityFactory.getDefinedPlayers(sa.getSourceCard(), params.get("Defined"), sa);

        if (tgtPlayers.size() > 0) {
            Iterator<Player> it = tgtPlayers.iterator();
            while(it.hasNext()) {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="120">
<file line="1190" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<file line="1186" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<codefragment>
<![CDATA[
        canLoseByDecking.setSelected(fp.millingLossCondition);

        return true;
    }

    /**
     * <p>savePrefs.</p>
     *
     * @return a boolean.
     */
    public boolean savePrefs() {
        Constant.Runtime.Mill[0] = canLoseByDecking.isSelected();
        ForgePreferences fp = Gui_NewGame.preferences;

        fp.bAIUpkeep = cbAIUpkeep.isSelected();
        fp.bAIDraw = cbAIDraw.isSelected();
        fp.bAIEOT = cbAIEndOfTurn.isSelected();
        fp.bAIBeginCombat = cbAIBeginCombat.isSelected();
        fp.bAIEndCombat = cbAIEndCombat.isSelected();

        fp.bHumanUpkeep = cbHumanUpkeep.isSelected();
        fp.bHumanDraw = cbHumanDraw.isSelected();
        fp.bHumanEOT = cbHumanEndOfTurn.isSelected();
        fp.bHumanBeginCombat = cbHumanBeginCombat.isSelected();
        fp.bHumanEndCombat = cbHumanEndCombat.isSelected();
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="119">
<file line="1055" path="/Users/dhudson/mtg/cardforge/src/forge/GameAction.java"/>
<file line="1096" path="/Users/dhudson/mtg/cardforge/src/forge/GameAction.java"/>
<codefragment>
<![CDATA[
                card = c.getCard(cardName, AllZone.getComputerPlayer());
                card.setUniqueNumber(nextUniqueNumber++);

                //if(card.isBasicLand()) {
                //String PC = card.getSVar("PicCount");
                //int n = 0;
                //if (PC.matches("[0-9][0-9]?"))
                //	n = Integer.parseInt(PC);
                //if (n > 1)
                //    card.setRandomPicture(generator.nextInt(n));
                //System.out.println("computer random number:" + card.getRandomPicture());
                //}

                if (!setCode.equals(""))
                    card.setCurSetCode(setCode);
                else if ((card.getSets().size() > 0)) // && card.getCurSetCode().equals(""))
                    card.setRandomSetCode();

                if (!card.getCurSetCode().equals("")) {
                    int n = SetInfoUtil.getSetInfo_Code(card.getSets(), card.getCurSetCode()).PicCount;
                    if (n > 1)
                        card.setRandomPicture(generator.nextInt(n - 1) + 1);

                    card.setImageFilename(CardUtil.buildFilename(card));
                }

                AllZone.getComputerLibrary().add(card);
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="119">
<file line="150" path="/Users/dhudson/mtg/cardforge/src/forge/ComputerAI_General.java"/>
<file line="193" path="/Users/dhudson/mtg/cardforge/src/forge/ComputerAI_General.java"/>
<codefragment>
<![CDATA[
    private CardList getAvailableSpellAbilities() {
        CardList all = AllZoneUtil.getPlayerHand(AllZone.getComputerPlayer());
        //Don't play permanents with Flash before humans declare attackers step
        all = all.filter(new CardListFilter() {
            public boolean addCard(Card c) {
                if (c.isPermanent()
                        && c.hasKeyword("Flash")
                        && (AllZone.getPhase().isPlayerTurn(AllZone.getComputerPlayer())
                        || AllZone.getPhase().isBefore(Constant.Phase.Combat_Declare_Attackers_InstantAbility)))
                    return false;
                return true;
            }
        });
        all.addAll(AllZoneUtil.getPlayerCardsInPlay(AllZone.getComputerPlayer()));
        all.addAll(CardFactoryUtil.getGraveyardActivationCards(AllZone.getComputerPlayer()));
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="117">
<file line="599" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Reveal.java"/>
<file line="595" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<codefragment>
<![CDATA[
        if (!ComputerUtil.canPayCost(sa))
            return false;

        Card source = sa.getSourceCard();
        Cost abCost = af.getAbCost();

        if (abCost != null) {
            // AI currently disabled for these costs
            if (abCost.getSacCost()) {
                return false;
            }
            if (abCost.getLifeCost()) {
                if (AllZone.getComputerPlayer().getLife() - abCost.getLifeAmount() < 4)
                    return false;
            }
            if (abCost.getDiscardCost()) return false;

            if (abCost.getSubCounter()) {
                if (abCost.getCounterType().equals(Counters.P1P1)) return false; // Other counters should be used
            }

        }
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="117">
<file line="544" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Destroy.java"/>
<file line="522" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Sacrifice.java"/>
<codefragment>
<![CDATA[
    public static String sacrificeAllStackDescription(final AbilityFactory af, SpellAbility sa) {
        // when getStackDesc is called, just build exactly what is happening

        StringBuilder sb = new StringBuilder();
        String name = af.getHostCard().getName();
        HashMap<String, String> params = af.getMapParams();

        String conditionDesc = params.get("ConditionDescription");
        if (conditionDesc != null)
            sb.append(conditionDesc).append(" ");

        ArrayList<Card> tgtCards;

        Target tgt = af.getAbTgt();
        if (tgt != null)
            tgtCards = tgt.getTargetCards();
        else {
            tgtCards = new ArrayList<Card>();
            tgtCards.add(sa.getSourceCard());
        }

        sb.append(name).append(" - Sacrifice permanents");
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="116">
<file line="236" path="/Users/dhudson/mtg/cardforge/src/forge/card/mana/ManaCost.java"/>
<file line="273" path="/Users/dhudson/mtg/cardforge/src/forge/card/mana/ManaCost.java"/>
<codefragment>
<![CDATA[
    public boolean addMana(Mana mana) {
        if (!isNeeded(mana)) throw new RuntimeException("ManaCost : addMana() error, mana not needed - " + mana);

        Mana_Part choice = null;

        for (int i = 0; i < manaPart.size(); i++) {
            Mana_Part m = (Mana_Part) manaPart.get(i);
            if (m.isNeeded(mana)) {
                // if m is a better to pay than choice
                if (choice == null) {
                    choice = m;
                    continue;
                }
                if (m.isColor(mana) && choice.isEasierToPay(m)) {
                    choice = m;
                }
            }
        }//for
        if (choice == null)
            return false;

        choice.reduce(mana);
        if (!mana.isColor(Constant.Color.Colorless)) {
]]>
</codefragment>
</duplication>
<duplication lines="67" tokens="116">
<file line="432" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadSetPictures_LQ.java"/>
<file line="446" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_MigrateLocalMWSSetPictures_HQ.java"/>
<codefragment>
<![CDATA[
                            CList.add(new mCard(SC3 + "\\" + newFileName, URLBase + SC2 + "\\" + fn, SC3));

                        }

                    }
                }

            }

            //Log.error(iName + ".jpg" + "\t" + URLs[0]);

        }

        //ArrayList<mCard> list = new ArrayList<mCard>();
        //File file;
        /*
        File base = ForgeProps.getFile(IMAGE_TOKEN);
        for(int i = 0; i < cardTokenLQ.length; i++) {
        	 file = new File(base, cardTokenLQ[i].name.substring(3, cardTokenLQ[i].name.length()));
            if(!file.exists()) CList.add(cardTokenLQ[i]);
        }
        */
        //return all card names and urls that are needed
        mCard[] out = new mCard[CList.size()];
        CList.toArray(out);

        for (int i = 0; i < out.length; i++)
            System.out.println(out[i].name + " " + out[i].url);
        return out;
    }//getNeededCards()
    /*
    private static mCard[] readFile(String ABC) {
        try {
        	FileReader zrc = new FileReader(ForgeProps.getFile(ABC));
        	BufferedReader in = new BufferedReader(zrc);
            String line;
            ArrayList<mCard> list = new ArrayList<mCard>();
            StringTokenizer tok;
            
            line = in.readLine();
            while(line != null && (!line.equals(""))) {
                tok = new StringTokenizer(line);
                list.add(new mCard(tok.nextToken(), tok.nextToken(), ""));
                
                line = in.readLine();
            }
            
            mCard[] out = new mCard[list.size()];
            list.toArray(out);
            return out;
            
        } catch(Exception ex) {
            ErrorViewer.showError(ex, "Gui_DownloadPictures: readFile() error");
            throw new RuntimeException("Gui_DownloadPictures : readFile() error");
        }
    }//readFile()
    */

    private class ProxyHandler implements ChangeListener {
        private int type;

        public ProxyHandler(int type) {
            this.type = type;
        }

        public void stateChanged(ChangeEvent e) {
            if (((AbstractButton) e.getSource()).isSelected()) {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="116">
<file line="2952" path="/Users/dhudson/mtg/cardforge/src/forge/GameActionUtil.java"/>
<file line="3036" path="/Users/dhudson/mtg/cardforge/src/forge/GameActionUtil.java"/>
<codefragment>
<![CDATA[
        CardList kinship = AllZoneUtil.getPlayerCardsInPlay(player, "Squeaking Pie Grubfellows");
        final Player opponent = player.getOpponent();

        PlayerZone library = AllZone.getZone(Constant.Zone.Library, player);
        // Players would not choose to trigger Kinship ability if library is empty.
        // Useful for games when the "Milling = Loss Condition" check box is unchecked.

        if (kinship.size() == 0 || library.size() <= 0)
            return;

        final String[] shareTypes = {"Goblin", "Shaman"};
        final Card[] prevCardShown = {null};
        final Card peek[] = {null};

        for (final Card k : kinship) {
            Ability ability = new Ability(k, "0") {    // change to triggered abilities when ready
                @Override
                public void resolve() {
                    PlayerZone library = AllZone.getZone(Constant.Zone.Library, player);
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="115">
<file line="544" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Counters.java"/>
<file line="863" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Counters.java"/>
<codefragment>
<![CDATA[
    private static void removeResolve(final AbilityFactory af, final SpellAbility sa) {
        HashMap<String, String> params = af.getMapParams();

        Card card = af.getHostCard();
        String type = params.get("CounterType");
        int counterAmount = AbilityFactory.calculateAmount(af.getHostCard(), params.get("CounterNum"), sa);

        ArrayList<Card> tgtCards;

        Target tgt = af.getAbTgt();
        if (tgt != null)
            tgtCards = tgt.getTargetCards();
        else {
            tgtCards = AbilityFactory.getDefinedCards(card, params.get("Defined"), sa);
        }

        for (Card tgtCard : tgtCards)
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="115">
<file line="282" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ChangeZone.java"/>
<file line="172" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_CounterMagic.java"/>
<codefragment>
<![CDATA[
        if (abCost != null) {
            // AI currently disabled for these costs
            if (abCost.getSacCost() && !abCost.getSacThis()) {
                //only sacrifice something that's supposed to be sacrificed
                String type = abCost.getSacType();
                CardList typeList = AllZoneUtil.getPlayerCardsInPlay(AllZone.getComputerPlayer());
                typeList = typeList.getValidCards(type.split(","), source.getController(), source);
                if (ComputerUtil.getCardPreference(source, "SacCost", typeList) == null)
                    return false;
            }
            if (abCost.getLifeCost()) {
                if (AllZone.getComputerPlayer().getLife() - abCost.getLifeAmount() < 4)
                    return false;
            }
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="115">
<file line="1118" path="/Users/dhudson/mtg/cardforge/src/forge/CombatUtil.java"/>
<file line="1287" path="/Users/dhudson/mtg/cardforge/src/forge/CombatUtil.java"/>
<codefragment>
<![CDATA[
        toughness += attacker.getKeywordMagnitude("Bushido");

        ArrayList<Trigger> registeredTriggers = AllZone.getTriggerHandler().getRegisteredTriggers();
        for (Trigger trigger : registeredTriggers) {
            HashMap<String, String> trigParams = trigger.getMapParams();
            Card source = trigger.getHostCard();

            if (!combatTriggerWillTrigger(attacker, defender, trigger, null) || !trigParams.containsKey("Execute"))
                continue;
            String ability = source.getSVar(trigParams.get("Execute"));
            AbilityFactory AF = new AbilityFactory();
            HashMap<String, String> abilityParams = AF.getMapParams(ability, source);
            if (abilityParams.containsKey("ValidTgts") || abilityParams.containsKey("Tgt"))
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="114">
<file line="132" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/GenerateConstructedMultiColorDeck.java"/>
<file line="168" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/GenerateConstructedMultiColorDeck.java"/>
<codefragment>
<![CDATA[
            Card land;
            for (int i = 0; i < numberBasic; i++) {

                land = AllZone.getCardFactory().getCard(map.get(color1).toString(), AllZone.getComputerPlayer());
                list.add(land);

                land = AllZone.getCardFactory().getCard(map.get(color2).toString(), AllZone.getComputerPlayer());
                list.add(land);

                land = AllZone.getCardFactory().getCard(map.get(color3).toString(), AllZone.getComputerPlayer());
                list.add(land);
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="114">
<file line="291" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Planeswalkers.java"/>
<file line="1374" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Planeswalkers.java"/>
<codefragment>
<![CDATA[
                int check = -1;

                @Override
                public void showMessage() {
                    if (check != AllZone.getPhase().getTurn()) {
                        check = AllZone.getPhase().getTurn();
                        turn[0] = AllZone.getPhase().getTurn();
                        AllZone.getStack().add(ability3);
                    }
                    stop();
                }//showMessage()
            });

            //ability 1: make 4/4 out of moutain
            final SpellAbility ability1 = new Ability(card, "0") {
                @Override
                public void resolve() {
                    card.addCounterFromNonEffect(Counters.LOYALTY, 1);
                    turn[0] = AllZone.getPhase().getTurn();
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="114">
<file line="60" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Mana.java"/>
<file line="321" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Mana.java"/>
<codefragment>
<![CDATA[
    public static SpellAbility createSpellManaReflected(final AbilityFactory AF, final String produced) {
        // No Spell has Reflected Mana, but might as well put it in for the future
        final SpellAbility spMana = new Spell(AF.getHostCard(), AF.getAbCost(), AF.getAbTgt()) {
            private static final long serialVersionUID = -5141246507533353605L;

            final AbilityFactory af = AF;
            // To get the mana to resolve properly, we need the spell to contain an Ability_Mana
            Cost tmp = new Cost("0", AF.getHostCard().getName(), false);
            Ability_Mana tmpMana = new Ability_Mana(AF.getHostCard(), tmp, produced) {
                private static final long serialVersionUID = 1454043766057140491L;

                @Override
                public boolean doTrigger(boolean mandatory) {
                    // TODO Auto-generated method stub
                    return false;
                }

                // TODO: maybe add can produce here, so old AI code can use reflected mana?
            };
            //tmpMana.setReflectedMana(true);

            public boolean canPlayAI() {
                return manaReflectedCanPlayAI(af);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="114">
<file line="519" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_AlterLife.java"/>
<file line="902" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_AlterLife.java"/>
<codefragment>
<![CDATA[
        String amountStr = params.get("Num");

        // TODO handle proper calculation of X values based on Cost and what would be paid
        //final int amount = AbilityFactory.calculateAmount(af.getHostCard(), amountStr, sa);

        if (abCost != null) {
            // AI currently disabled for these costs
            if (abCost.getSacCost()) {
                if (amountStr.contains("X"))
                    return false;
                if (!abCost.getSacThis()) {
                    //only sacrifice something that's supposed to be sacrificed
                    String type = abCost.getSacType();
                    CardList typeList = AllZoneUtil.getPlayerCardsInPlay(AllZone.getComputerPlayer());
                    typeList = typeList.getValidCards(type.split(","), source.getController(), source);
                    if (ComputerUtil.getCardPreference(source, "SacCost", typeList) == null)
                        return false;
                }
            }
            if (abCost.getLifeCost() && aiLife - abCost.getLifeAmount() <= 0) return false;
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="114">
<file line="400" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplayUtil.java"/>
<file line="594" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplayUtil.java"/>
<codefragment>
<![CDATA[
            for (int i = 0; i < list.size(); i++) {
                JPanel addPanel;
                c = list.get(i);
                addPanel = new CardPanel(c);

                boolean startANewStack = false;

                if (!isStackable(c)) {
                    startANewStack = true;
                } else {
                    String newColor = c.getName(); //CardUtil.getColor(c);

                    if (!newColor.equals(color)) {
                        startANewStack = true;
                        color = newColor;
                    }
                }


                if (i == 0) {
                    startANewStack = false;
                }

                if (!startANewStack && atInStack == Constant.Runtime.stackSize[0]) {
                    startANewStack = true;
                }


                if ((c.isEquipment() || c.isAura()) && (c.isEquipping() || c.isEnchanting())
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="113">
<file line="898" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_PermanentState.java"/>
<file line="1666" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_PermanentState.java"/>
<codefragment>
<![CDATA[
    private static void tapOrUntapResolve(final AbilityFactory af, final SpellAbility sa) {
        HashMap<String, String> params = af.getMapParams();
        Card card = sa.getSourceCard();

        ArrayList<Card> tgtCards;
        Target tgt = af.getAbTgt();
        if (tgt != null)
            tgtCards = tgt.getTargetCards();
        else {
            tgtCards = AbilityFactory.getDefinedCards(card, params.get("Defined"), sa);
        }

        for (Card tgtC : tgtCards) {
            if (AllZoneUtil.isCardInPlay(tgtC) && (tgt == null || CardFactoryUtil.canTarget(af.getHostCard(), tgtC))) {
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="113">
<file line="78" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<file line="132" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<codefragment>
<![CDATA[
    @Override
    public void setTitle(String message) {
        super.setTitle(message);
    }

    /** {@inheritDoc} */
    public void updateDisplay(CardList top, CardList bottom) {
        this.top = top;
        this.bottom = bottom;

        topModel.clear();
        bottomModel.clear();

        if (AllZone.getNameChanger().shouldChangeCardName()) {
            top = new CardList(AllZone.getNameChanger().changeCard(top.toArray()));
            bottom = new CardList(AllZone.getNameChanger().changeCard(bottom.toArray()));
        }

        Card c;
        String cardName;
        ReadBoosterPack pack = new ReadBoosterPack();
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="112">
<file line="1043" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Instants.java"/>
<file line="1127" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Instants.java"/>
<codefragment>
<![CDATA[
                    sb.append(card.getName()).append(" - Select target creatures, players, and/or planeswalkers.  Currently, (");
                    sb.append(targets.size()).append(") selected.");
                    sb.append(" Press OK when done.");
                    AllZone.getDisplay().showMessage(sb.toString());
                    ButtonUtil.enableAll();
                }

                @Override
                public void selectButtonCancel() {
                    targets.clear();
                    AllZone.getGameAction().moveToHand(card);
                    stop();
                }

                @Override
                public void selectCard(Card c, PlayerZone zone) {
                    if (zone.is(Constant.Zone.Battlefield) && !targets.contains(c)
                            && CardFactoryUtil.canTarget(card, c) &&
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="112">
<file line="259" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Counters.java"/>
<file line="178" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Destroy.java"/>
<codefragment>
<![CDATA[
        if (!ComputerUtil.canPayCost(sa))
            return false;

        // prevent run-away activations - first time will always return true
        boolean chance = r.nextFloat() <= Math.pow(.6667, source.getAbilityUsed());

        // Targeting
        if (abTgt != null) {
            abTgt.resetTargets();
            // target loop
            while (abTgt.getNumTargeted() < abTgt.getMaxTargets(sa.getSourceCard(), sa)) {
                if (list.size() == 0) {
                    if (abTgt.getNumTargeted() < abTgt.getMinTargets(sa.getSourceCard(), sa) || abTgt.getNumTargeted() == 0) {
                        abTgt.resetTargets();
                        return false;
                    } else {
                        // TODO is this good enough? for up to amounts?
                        break;
                    }
                }
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="112">
<file line="332" path="/Users/dhudson/mtg/cardforge/src/forge/SealedDeck.java"/>
<file line="296" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/Generate2ColorDeck.java"/>
<codefragment>
<![CDATA[
                String mc = tDeck.get(i).getManaCost();

                // count each mana symbol in the mana cost
                for (int j = 0; j < mc.length(); j++) {
                    char c = mc.charAt(j);

                    if (c == 'W')
                        ClrCnts[0].Count++;
                    else if (c == 'U')
                        ClrCnts[1].Count++;
                    else if (c == 'B')
                        ClrCnts[2].Count++;
                    else if (c == 'R')
                        ClrCnts[3].Count++;
                    else if (c == 'G')
                        ClrCnts[4].Count++;
                }
            }

            // total of all ClrCnts
            int totalColor = 0;
            for (int i = 0; i < 5; i++) {
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="112">
<file line="934" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_NewGame.java"/>
<file line="984" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_NewGame.java"/>
<codefragment>
<![CDATA[
        if (p.equals("H")) {
            c1 = GuiUtils.getChoice("Select first color.", colors.toArray()).toString();

            if (c1.equals("Random"))
                c1 = colors.get(r.nextInt(colors.size() - 1) + 1);

            colors.remove(c1);

            c2 = GuiUtils.getChoice("Select second color.", colors.toArray()).toString();

            if (c2.equals("Random"))
                c2 = colors.get(r.nextInt(colors.size() - 1) + 1);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="112">
<file line="348" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay2.java"/>
<file line="569" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<codefragment>
<![CDATA[
                    oppRemovedValue.setText("" + AllZone.getComputerExile().size());
                }
            };
            AllZone.getComputerHand().addObserver(o);
            AllZone.getComputerGraveyard().addObserver(o);
            AllZone.getComputerLibrary().addObserver(o);
        }


        //opponent life
        oppLifeLabel.setText("" + AllZone.getComputerPlayer().getLife());
        AllZone.getComputerPlayer().addObserver(new Observer() {
            public void update(Observable a, Object b) {
                int life = AllZone.getComputerPlayer().getLife();
                oppLifeLabel.setText("" + life);
            }
        });
        AllZone.getComputerPlayer().updateObservers();
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="112">
<file line="391" path="/Users/dhudson/mtg/cardforge/src/forge/BoosterDraftAI.java"/>
<file line="296" path="/Users/dhudson/mtg/cardforge/src/forge/deck/generate/Generate2ColorDeck.java"/>
<codefragment>
<![CDATA[
                String mc = tDeck.get(i).getManaCost();

                // count each mana symbol in the mana cost
                for (int j = 0; j < mc.length(); j++) {
                    char c = mc.charAt(j);

                    if (c == 'W')
                        ClrCnts[0].Count++;
                    else if (c == 'U')
                        ClrCnts[1].Count++;
                    else if (c == 'B')
                        ClrCnts[2].Count++;
                    else if (c == 'R')
                        ClrCnts[3].Count++;
                    else if (c == 'G')
                        ClrCnts[4].Count++;
                }
            }

            // total of all ClrCnts
            int totalColor = 0;
            for (int i = 0; i < 5; i++) {
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="110">
<file line="466" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Planeswalkers.java"/>
<file line="770" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Planeswalkers.java"/>
<codefragment>
<![CDATA[
                }//resolve()

                @Override
                public boolean canPlay() {
                    for (int i = 0; i < AllZone.getStack().size(); i++) {
                        if (AllZone.getStack().peekInstance(i).getSourceCard().equals(card)) return false;
                    }

                    return AllZone.getZone(card).is(Constant.Zone.Battlefield)
                            && turn[0] != AllZone.getPhase().getTurn()
                            && Phase.canCastSorcery(card.getController());
                }

                @Override
                public boolean canPlayAI() {
                    return false;
                }
            };//SpellAbility ability2
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="110">
<file line="546" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<file line="1034" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<codefragment>
<![CDATA[
        StringBuilder sb = new StringBuilder();

        ArrayList<Player> tgtPlayers;

        Target tgt = af.getAbTgt();
        if (tgt != null)
            tgtPlayers = tgt.getTargetPlayers();
        else
            tgtPlayers = AbilityFactory.getDefinedPlayers(sa.getSourceCard(), params.get("Defined"), sa);

        if (!(sa instanceof Ability_Sub))
            sb.append(sa.getSourceCard().getName()).append(" - ");
        else
            sb.append(" ");

        String conditionDesc = params.get("ConditionDescription");
        if (conditionDesc != null)
            sb.append(conditionDesc).append(" ");
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="110">
<file line="152" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_AlterLife.java"/>
<file line="130" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<codefragment>
<![CDATA[
        StringBuilder sb = new StringBuilder();

        if (!(sa instanceof Ability_Sub))
            sb.append(sa.getSourceCard().getName()).append(" - ");
        else
            sb.append(" ");

        String conditionDesc = params.get("ConditionDescription");
        if (conditionDesc != null)
            sb.append(conditionDesc).append(" ");

        ArrayList<Player> tgtPlayers;

        Target tgt = af.getAbTgt();
        if (tgt != null)
            tgtPlayers = tgt.getTargetPlayers();
        else
            tgtPlayers = AbilityFactory.getDefinedPlayers(sa.getSourceCard(), params.get("Defined"), sa);
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="110">
<file line="128" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<file line="93" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor.java"/>
<codefragment>
<![CDATA[
    private CardPicturePanel picture = new CardPicturePanel(null);
    private JPanel glassPane;

    /** {@inheritDoc} */
    @Override
    public void setTitle(String message) {
        super.setTitle(message);
    }

    /** {@inheritDoc} */
    public void updateDisplay(CardList top, CardList bottom) {

        this.top = top;
        this.bottom = bottom;

        topModel.clear();
        bottomModel.clear();

        if (AllZone.getNameChanger().shouldChangeCardName()) {
            top = new CardList(AllZone.getNameChanger().changeCard(top.toArray()));
            bottom = new CardList(AllZone.getNameChanger().changeCard(bottom.toArray()));
        }

        Card c;
        String cardName;
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="110">
<file line="5057" path="/Users/dhudson/mtg/cardforge/src/forge/GameActionUtil.java"/>
<file line="5132" path="/Users/dhudson/mtg/cardforge/src/forge/GameActionUtil.java"/>
<codefragment>
<![CDATA[
            String[] Keyword = Keyword_Details[2].split("/", 3);

            Keyword[0] = Keyword[0].replace("+", "");
            Keyword[1] = Keyword[1].replace("+", "");

            if (!Keyword[0].contains("X")) powerbonus = Integer.valueOf(Keyword[0]);
            else powerbonus = xValue;

            if (Keyword[1].contains("X")) toughnessbonus = xValue;
            else if (Keyword[1].contains("Y")) toughnessbonus = yValue;
            else toughnessbonus = Integer.valueOf(Keyword[1]);
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="110">
<file line="1120" path="/Users/dhudson/mtg/cardforge/src/forge/CombatUtil.java"/>
<file line="1232" path="/Users/dhudson/mtg/cardforge/src/forge/CombatUtil.java"/>
<codefragment>
<![CDATA[
        ArrayList<Trigger> registeredTriggers = AllZone.getTriggerHandler().getRegisteredTriggers();
        for (Trigger trigger : registeredTriggers) {
            HashMap<String, String> trigParams = trigger.getMapParams();
            Card source = trigger.getHostCard();

            if (!combatTriggerWillTrigger(attacker, defender, trigger, null) || !trigParams.containsKey("Execute"))
                continue;
            String ability = source.getSVar(trigParams.get("Execute"));
            AbilityFactory AF = new AbilityFactory();
            HashMap<String, String> abilityParams = AF.getMapParams(ability, source);
            if (abilityParams.containsKey("ValidTgts") || abilityParams.containsKey("Tgt"))
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="109">
<file line="99" path="/Users/dhudson/mtg/cardforge/src/forge/ReadBoosterPack.java"/>
<file line="178" path="/Users/dhudson/mtg/cardforge/src/forge/ReadBoosterPack.java"/>
<codefragment>
<![CDATA[
        for (int i = 0; i < 10; i++) {
            // Add basic land availability
            list.add(AllZone.getCardFactory().getCard("Forest", AllZone.getHumanPlayer()));
            list.add(AllZone.getCardFactory().getCard("Island", AllZone.getHumanPlayer()));
            list.add(AllZone.getCardFactory().getCard("Plains", AllZone.getHumanPlayer()));
            list.add(AllZone.getCardFactory().getCard("Mountain", AllZone.getHumanPlayer()));
            list.add(AllZone.getCardFactory().getCard("Swamp", AllZone.getHumanPlayer()));
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="109">
<file line="44" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<file line="48" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<codefragment>
<![CDATA[
public class GuiDisplay4 extends JFrame implements CardContainer, Display, NewConstants, NewConstants.GUI.GuiDisplay, NewConstants.LANG.GuiDisplay {
    /** Constant <code>serialVersionUID=4519302185194841060L</code> */
    private static final long serialVersionUID = 4519302185194841060L;

    private GuiInput inputControl;

    Font statFont = new Font("Dialog", Font.PLAIN, 12);
    Font lifeFont = new Font("Dialog", Font.PLAIN, 40);
    Font checkboxFont = new Font("Dialog", Font.PLAIN, 9);


    /** Constant <code>greenColor</code> */
    public static Color greenColor = new Color(0, 164, 0);

    private Action HUMAN_GRAVEYARD_ACTION;
    private Action HUMAN_REMOVED_ACTION;
    private Action HUMAN_FLASHBACK_ACTION;
    private Action COMPUTER_GRAVEYARD_ACTION;
    private Action COMPUTER_REMOVED_ACTION;
    private Action CONCEDE_ACTION;
    public Card cCardHQ;

    //private CardList multiBlockers = new CardList();

    /**
     * <p>Constructor for GuiDisplay4.</p>
     */
    public GuiDisplay4() {
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="108">
<file line="602" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Reveal.java"/>
<file line="193" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<codefragment>
<![CDATA[
        Card source = sa.getSourceCard();
        Cost abCost = af.getAbCost();

        if (abCost != null) {
            // AI currently disabled for these costs
            if (abCost.getSacCost()) {
                return false;
            }
            if (abCost.getLifeCost()) {
                if (AllZone.getComputerPlayer().getLife() - abCost.getLifeAmount() < 4)
                    return false;
            }
            if (abCost.getDiscardCost()) return false;

            if (abCost.getSubCounter()) {
                if (abCost.getCounterType().equals(Counters.P1P1)) return false; // Other counters should be used
            }

        }

        boolean bFlag = drawTargetAI(af, sa, true, false);
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="108">
<file line="56" path="/Users/dhudson/mtg/cardforge/src/forge/SealedDeck.java"/>
<file line="61" path="/Users/dhudson/mtg/cardforge/src/forge/SealedDeck.java"/>
<codefragment>
<![CDATA[
                else if (blockSets.size() == 3) {
                    setCombos.add(String.format("%s/%s/%s/%s/%s/%s", blockSets.get(0), blockSets.get(0), blockSets.get(0), blockSets.get(0), blockSets.get(0), blockSets.get(0)));
                    setCombos.add(String.format("%s/%s/%s/%s/%s/%s", blockSets.get(1), blockSets.get(1), blockSets.get(0), blockSets.get(0), blockSets.get(0), blockSets.get(0)));
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="107">
<file line="394" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Planeswalkers.java"/>
<file line="769" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Planeswalkers.java"/>
<codefragment>
<![CDATA[
                    }
                }//resolve()

                @Override
                public boolean canPlay() {
                    for (int i = 0; i < AllZone.getStack().size(); i++) {
                        if (AllZone.getStack().peekInstance(i).getSourceCard().equals(card)) return false;
                    }

                    return AllZone.getZone(card).is(Constant.Zone.Battlefield)
                            && turn[0] != AllZone.getPhase().getTurn()
                            && Phase.canCastSorcery(card.getController());
                }

                @Override
                public boolean canPlayAI() {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="107">
<file line="657" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Auras.java"/>
<file line="1209" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Auras.java"/>
<codefragment>
<![CDATA[
                    public void execute() {
                        if (card.isEnchanting()) {
                            Card crd = card.getEnchanting().get(0);
                            if (AllZoneUtil.isCardInPlay(crd)) {
                                if (crd.hasKeyword("Haste")) {
                                    crd.setSickness(false);
                                } else {
                                    crd.setSickness(true);
                                }

                                AllZone.getGameAction().changeController(new CardList(crd), crd.getController(), prevController[0]);
                            }
                        }

                    }//execute()
                };//Command

                Command onLeavesPlay = new Command() {
                    private static final long serialVersionUID = 7464815269438815827L;
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="107">
<file line="128" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Choose.java"/>
<file line="555" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Reveal.java"/>
<codefragment>
<![CDATA[
    private static String revealHandStackDescription(AbilityFactory af, SpellAbility sa) {
        HashMap<String, String> params = af.getMapParams();
        StringBuilder sb = new StringBuilder();

        if (!(sa instanceof Ability_Sub))
            sb.append(sa.getSourceCard()).append(" - ");
        else
            sb.append(" ");

        ArrayList<Player> tgtPlayers;

        Target tgt = af.getAbTgt();
        if (tgt != null)
            tgtPlayers = tgt.getTargetPlayers();
        else
            tgtPlayers = AbilityFactory.getDefinedPlayers(sa.getSourceCard(), params.get("Defined"), sa);
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="107">
<file line="212" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<file line="161" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor.java"/>
<codefragment>
<![CDATA[
            c.setRarity(c.getSVar("Rarity"));

            //String PC = c.getSVar("PicCount");
            Random r = MyRandom.random;
            //int n = 0;
            //if (!PC.equals("")){
            //	if (PC.matches("[0-9][0-9]?"))
            //		n = Integer.parseInt(PC);
            //	if (n > 1)
            //		c.setRandomPicture(r.nextInt(n));
            //}

            if (c.getCurSetCode().equals(""))
                c.setCurSetCode(c.getMostRecentSet());

            if (!c.getCurSetCode().equals("")) {
                int n = SetInfoUtil.getSetInfo_Code(c.getSets(), c.getCurSetCode()).PicCount;
                if (n > 1)
                    c.setRandomPicture(r.nextInt(n - 1) + 1);

                c.setImageFilename(CardUtil.buildFilename(c));
            }

            bottomModel.addCard(c);
        }//for
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="106">
<file line="395" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Planeswalkers.java"/>
<file line="466" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Planeswalkers.java"/>
<codefragment>
<![CDATA[
                }//resolve()

                @Override
                public boolean canPlay() {
                    for (int i = 0; i < AllZone.getStack().size(); i++) {
                        if (AllZone.getStack().peekInstance(i).getSourceCard().equals(card)) return false;
                    }

                    return AllZone.getZone(card).is(Constant.Zone.Battlefield)
                            && turn[0] != AllZone.getPhase().getTurn()
                            && Phase.canCastSorcery(card.getController());
                }

                @Override
                public boolean canPlayAI() {
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="106">
<file line="602" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Reveal.java"/>
<file line="1114" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<codefragment>
<![CDATA[
        Card source = sa.getSourceCard();
        Cost abCost = af.getAbCost();

        if (abCost != null) {
            // AI currently disabled for these costs
            if (abCost.getSacCost()) {
                return false;
            }
            if (abCost.getLifeCost()) {
                if (AllZone.getComputerPlayer().getLife() - abCost.getLifeAmount() < 4)
                    return false;
            }
            if (abCost.getDiscardCost()) return false;

            if (abCost.getSubCounter()) {
                if (abCost.getCounterType().equals(Counters.P1P1)) return false; // Other counters should be used
            }

        }

        boolean humanHasHand = AllZoneUtil.getCardsInZone(Constant.Zone.Hand, AllZone.getHumanPlayer()).size() > 0;
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="106">
<file line="105" path="/Users/dhudson/mtg/cardforge/src/forge/ReadBoosterPack.java"/>
<file line="186" path="/Users/dhudson/mtg/cardforge/src/forge/ReadBoosterPack.java"/>
<codefragment>
<![CDATA[
                list.add(AllZone.getCardFactory().getCard("Snow-Covered Forest", AllZone.getHumanPlayer()));
                list.add(AllZone.getCardFactory().getCard("Snow-Covered Island", AllZone.getHumanPlayer()));
                list.add(AllZone.getCardFactory().getCard("Snow-Covered Plains", AllZone.getHumanPlayer()));
                list.add(AllZone.getCardFactory().getCard("Snow-Covered Mountain", AllZone.getHumanPlayer()));
                list.add(AllZone.getCardFactory().getCard("Snow-Covered Swamp", AllZone.getHumanPlayer()));
            }
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="106">
<file line="588" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<file line="902" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<codefragment>
<![CDATA[
        this.getContentPane().add(statsLabel, "cell 0 7");

        jScrollPane2.getViewport().add(bottomTable, null);
        jScrollPane1.getViewport().add(topTable, null);

        glassPane = new JPanel() {
            private static final long serialVersionUID = 7394924497724994317L;

            @Override
            protected void paintComponent(java.awt.Graphics g) {
                Image image = ImageCache.getOriginalImage(picture.getCard());
                g.drawImage(image, glassPane.getWidth() - image.getWidth(null), glassPane.getHeight()
                        - image.getHeight(null), null);
            }
        };
        setGlassPane(glassPane);
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="106">
<file line="78" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<file line="97" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor.java"/>
<codefragment>
<![CDATA[
    @Override
    public void setTitle(String message) {
        super.setTitle(message);
    }

    /** {@inheritDoc} */
    public void updateDisplay(CardList top, CardList bottom) {

        this.top = top;
        this.bottom = bottom;

        topModel.clear();
        bottomModel.clear();

        if (AllZone.getNameChanger().shouldChangeCardName()) {
            top = new CardList(AllZone.getNameChanger().changeCard(top.toArray()));
            bottom = new CardList(AllZone.getNameChanger().changeCard(bottom.toArray()));
        }

        Card c;
        String cardName;
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="105">
<file line="654" path="/Users/dhudson/mtg/cardforge/src/org/jdesktop/swingx/MultiSplitLayout.java"/>
<file line="701" path="/Users/dhudson/mtg/cardforge/src/org/jdesktop/swingx/MultiSplitLayout.java"/>
<codefragment>
<![CDATA[
            return ((child != null) && child.isVisible()) ? child.getMinimumSize() : new Dimension(0, 0);
        } else if (root instanceof Divider) {
            if (!((Divider) root).isVisible())
                return new Dimension(0, 0);
            int divSize = getDividerSize();
            return new Dimension(divSize, divSize);
        } else {
            Split split = (Split) root;
            List<Node> splitChildren = split.getChildren();
            int width = 0;
            int height = 0;
            if (split.isRowLayout()) {
                for (Node splitChild : splitChildren) {
                    if (!splitChild.isVisible())
                        continue;
                    Dimension size = minimumNodeSize(splitChild);
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="105">
<file line="22" path="/Users/dhudson/mtg/cardforge/src/forge/card/trigger/Trigger_Taps.java"/>
<file line="22" path="/Users/dhudson/mtg/cardforge/src/forge/card/trigger/Trigger_TapsForMana.java"/>
<codefragment>
<![CDATA[
    public Trigger_TapsForMana(HashMap<String, String> params, Card host) {
        super(params, host);
    }

    /** {@inheritDoc} */
    @Override
    public boolean performTest(HashMap<String, Object> runParams) {
        Card tapper = (Card) runParams.get("Card");

        if (mapParams.containsKey("ValidCard")) {
            if (!tapper.isValidCard(mapParams.get("ValidCard").split(","), hostCard.getController(), hostCard)) {
                return false;
            }
        }

        return true;
    }

    /** {@inheritDoc} */
    @Override
    public Trigger getCopy() {
        Trigger copy = new Trigger_TapsForMana(mapParams, hostCard);
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="105">
<file line="276" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Creatures.java"/>
<file line="41" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Instants.java"/>
<codefragment>
<![CDATA[
                @Override
                public boolean canPlayAI() {
                    return getAttacker() != null;
                }

                public Card getAttacker() {
                    // target creatures that is going to attack
                    Combat c = ComputerUtil.getAttackers();
                    Card[] att = c.getAttackers();

                    // Effect best used on at least a couple creatures
                    if (att.length > 1) {
                        return att[0];
                    } else return null;
                }//getAttacker()

                String getKeywordBoost() {
                    String theColor = getChosenColor();
                    return "Protection from " + theColor;
                }//getKeywordBoost()

                String getChosenColor() {
                    // Choose color for protection in Brave the Elements
                    String color = "";
                    if (card.getController().isHuman()) {

                        // String[] colors = Constant.Color.Colors;
                        // colors[colors.length-1] = null;

                        // You can no longer choose to gain "protection from null".
                        String[] colors = Constant.Color.onlyColors;
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="105">
<file line="598" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<file line="1114" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<codefragment>
<![CDATA[
        Card source = sa.getSourceCard();
        Cost abCost = af.getAbCost();

        if (abCost != null) {
            // AI currently disabled for these costs
            if (abCost.getSacCost()) {
                return false;
            }
            if (abCost.getLifeCost()) {
                if (AllZone.getComputerPlayer().getLife() - abCost.getLifeAmount() < 4)
                    return false;
            }
            if (abCost.getDiscardCost()) return false;

            if (abCost.getSubCounter()) {
                if (abCost.getCounterType().equals(Counters.P1P1)) return false; // Other counters should be used
            }

        }
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="105">
<file line="235" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<file line="1179" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<codefragment>
<![CDATA[
        if ((AllZone.getPhase().is(Constant.Phase.End_Of_Turn) && AllZone.getPhase().isNextTurn(AllZone.getComputerPlayer())))
            chance = .9;    // 90% for end of opponents turn

        Random r = MyRandom.random;
        boolean randomReturn = r.nextFloat() <= Math.pow(chance, source.getAbilityUsed() + 1);

        if (AbilityFactory.playReusable(sa))
            randomReturn = true;

        // some other variables here, like handsize vs. maxHandSize

        Ability_Sub subAb = sa.getSubAbility();
        if (subAb != null)
            randomReturn &= subAb.chkAI_Drawback();
        return randomReturn;
    }//discardCanPlayAI()

    /**
     * <p>discardTargetAI.</p>
     *
     * @param af a {@link forge.card.abilityFactory.AbilityFactory} object.
     * @return a boolean.
     */
    private static boolean discardTargetAI(AbilityFactory af) {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="105">
<file line="193" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<file line="598" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_ZoneAffecting.java"/>
<codefragment>
<![CDATA[
        Card source = sa.getSourceCard();
        Cost abCost = af.getAbCost();

        if (abCost != null) {
            // AI currently disabled for these costs
            if (abCost.getSacCost()) {
                return false;
            }
            if (abCost.getLifeCost()) {
                if (AllZone.getComputerPlayer().getLife() - abCost.getLifeAmount() < 4)
                    return false;
            }
            if (abCost.getDiscardCost()) return false;

            if (abCost.getSubCounter()) {
                if (abCost.getCounterType().equals(Counters.P1P1)) return false; // Other counters should be used
            }

        }
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="104">
<file line="136" path="/Users/dhudson/mtg/cardforge/src/forge/card/spellability/SpellAbility_Condition.java"/>
<file line="145" path="/Users/dhudson/mtg/cardforge/src/forge/card/spellability/SpellAbility_Restriction.java"/>
<codefragment>
<![CDATA[
        if (!bAnyPlayer && !activator.equals(c.getController()))
            return false;

        if (activationLimit != -1 && numberTurnActivations >= activationLimit)
            return false;

        if (phases.size() > 0) {
            boolean isPhase = false;
            String currPhase = AllZone.getPhase().getPhase();
            for (String s : phases) {
                if (s.equals(currPhase)) {
                    isPhase = true;
                    break;
                }
            }

            if (!isPhase)
                return false;
        }

        if (nCardsInHand != -1) {
            if (AllZoneUtil.getPlayerHand(activator).size() != nCardsInHand)
                return false;
        }
        if (hellbent) {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="104">
<file line="155" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_AlterLife.java"/>
<file line="1069" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_AlterLife.java"/>
<codefragment>
<![CDATA[
            sb.append(sa.getSourceCard()).append(" -");
        else
            sb.append(" ");

        String conditionDesc = params.get("ConditionDescription");
        if (conditionDesc != null)
            sb.append(conditionDesc).append(" ");

        ArrayList<Player> tgtPlayers;

        Target tgt = af.getAbTgt();
        if (tgt != null)
            tgtPlayers = tgt.getTargetPlayers();
        else
            tgtPlayers = AbilityFactory.getDefinedPlayers(sa.getSourceCard(), params.get("Defined"), sa);

        for (Player player : tgtPlayers)
            sb.append(player).append(" ");

        sb.append("life total becomes ").append(amount).append(".");
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="103">
<file line="119" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Planeswalkers.java"/>
<file line="1353" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Planeswalkers.java"/>
<codefragment>
<![CDATA[
                    return 5 <= card.getCounters(Counters.LOYALTY)
                            && AllZone.getZone(card).is(Constant.Zone.Battlefield)
                            && turn[0] != AllZone.getPhase().getTurn()
                            && Phase.canCastSorcery(card.getController());
                }//canPlay()

                @Override
                public boolean canPlayAI() {
                    CardList list = AllZoneUtil.getPlayerCardsInPlay(AllZone.getComputerPlayer());
                    list = list.filter(new CardListFilter() {
                        public boolean addCard(Card c) {
                            return c.isEmblem()
                                    && c.hasKeyword("Mountains you control have 'tap: This land deals 1 damage to target creature or player.'");
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="103">
<file line="266" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Counters.java"/>
<file line="354" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Counters.java"/>
<codefragment>
<![CDATA[
            abTgt.resetTargets();
            // target loop
            while (abTgt.getNumTargeted() < abTgt.getMaxTargets(sa.getSourceCard(), sa)) {
                if (list.size() == 0) {
                    if (abTgt.getNumTargeted() < abTgt.getMinTargets(sa.getSourceCard(), sa) || abTgt.getNumTargeted() == 0) {
                        abTgt.resetTargets();
                        return false;
                    } else {
                        break;
                    }
                }

                if (af.isCurse()) {
                    choice = chooseCursedTarget(list, type, amount);
                } else {
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="103">
<file line="162" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadPictures_LQ.java"/>
<file line="227" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DownloadSetPictures_LQ.java"/>
<codefragment>
<![CDATA[
                System.out.println(card + "/" + cards.length + " - " + a);
            }
        }
        ;
        EventQueue.invokeLater(new Worker(card));
    }

    /**
     * <p>Getter for the field <code>dlg</code>.</p>
     *
     * @param frame a {@link javax.swing.JFrame} object.
     * @return a {@link javax.swing.JDialog} object.
     */
    public JDialog getDlg(JFrame frame) {
        final JDialog dlg = this.dlg.createDialog(frame, ForgeProps.getLocalized(TITLE));
        close.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dlg.setVisible(false);
            }
        });
        return dlg;
    }

    /**
     * <p>Setter for the field <code>cancel</code>.</p>
     *
     * @param cancel a boolean.
     */
    public void setCancel(boolean cancel) {
        this.cancel = cancel;
    }


    /**
     * <p>run.</p>
     */
    public void run() {
        BufferedInputStream in;
        BufferedOutputStream out;

        File base = ForgeProps.getFile(IMAGE_BASE);
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="103">
<file line="745" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay3.java"/>
<file line="735" path="/Users/dhudson/mtg/cardforge/src/forge/GuiDisplay4.java"/>
<codefragment>
<![CDATA[
                GuiDisplayUtil.setupPlayZone(oppPlayPanel, c);
            }
        });
        AllZone.getComputerBattlefield().updateObservers();
        //END - computer play

    }//addObservers()

    /**
     * <p>initComponents.</p>
     */
    private void initComponents() {
        //Preparing the Frame
        setTitle(ForgeProps.getLocalized(LANG.PROGRAM_NAME));
        if (!Gui_NewGame.useLAFFonts.isSelected()) setFont(new Font("Times New Roman", 0, 16));
        getContentPane().setLayout(new BorderLayout());
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent evt) {
                concede();
            }

            @Override
            public void windowClosed(WindowEvent e) {
                File f = ForgeProps.getFile(LAYOUT_NEW);
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="102">
<file line="498" path="/Users/dhudson/mtg/cardforge/src/org/jdesktop/swingx/graphics/GraphicsUtilities.java"/>
<file line="598" path="/Users/dhudson/mtg/cardforge/src/org/jdesktop/swingx/graphics/GraphicsUtilities.java"/>
<codefragment>
<![CDATA[
            } while (width != newWidth || height != newHeight);
        } finally {
            g2.dispose();
        }

        if (width != thumb.getWidth() || height != thumb.getHeight()) {
            temp = createCompatibleImage(image, width, height);
            g2 = temp.createGraphics();

            try {
                g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                        RenderingHints.VALUE_INTERPOLATION_BILINEAR);
                g2.drawImage(thumb, 0, 0, width, height, 0, 0, width, height, null);
            } finally {
                g2.dispose();
            }

            thumb = temp;
        }

        return thumb;
    }

    /**
     * <p>Returns an array of pixels, stored as integers, from a
     * <code>BufferedImage</code>. The pixels are grabbed from a rectangular
     * area defined by a location and two dimensions. Calling this method on
     * an image of type different from <code>BufferedImage.TYPE_INT_ARGB</code>
     * and <code>BufferedImage.TYPE_INT_RGB</code> will unmanage the image.</p>
     *
     * @param img    the source image
     * @param x      the x location at which to start grabbing pixels
     * @param y      the y location at which to start grabbing pixels
     * @param w      the width of the rectangle of pixels to grab
     * @param h      the height of the rectangle of pixels to grab
     * @param pixels a pre-allocated array of pixels of size w*h; can be null
     * @return <code>pixels</code> if non-null, a new array of integers
     *         otherwise
     * @throws java.lang.IllegalArgumentException
     *          is <code>pixels</code> is non-null and
     *          of length &lt; w*h
     */
    public static int[] getPixels(BufferedImage img,
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="102">
<file line="721" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Pump.java"/>
<file line="945" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Pump.java"/>
<codefragment>
<![CDATA[
            if (!AllZoneUtil.isCardInPlay(tgtC))
                continue;

            final int a = getNumAttack(sa);
            final int d = getNumDefense(sa);

            tgtC.addTempAttackBoost(a);
            tgtC.addTempDefenseBoost(d);

            for (int i = 0; i < Keywords.size(); i++) {
                if (!Keywords.get(i).equals("none"))
                    tgtC.addExtrinsicKeyword(Keywords.get(i));
            }

            if (!params.containsKey("Permanent")) {
                // If not Permanent, remove Pumped at EOT
                final Command untilEOT = new Command() {
                    private static final long serialVersionUID = 5415795460189457660L;
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="101">
<file line="385" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Debuff.java"/>
<file line="406" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Protection.java"/>
<codefragment>
<![CDATA[
        while(tgt.getNumTargeted() < tgt.getMinTargets(source, sa)) {
            if(forced.isEmpty())
                break;

            Card c;
            if(forced.getNotType("Creature").size() == 0)
                c = CardFactoryUtil.AI_getWorstCreature(forced);
            else
                c = CardFactoryUtil.AI_getCheapestPermanent(forced, source, true);

            forced.remove(c);

            tgt.addTarget(c);
        }

        if(tgt.getNumTargeted() < tgt.getMinTargets(sa.getSourceCard(), sa)) {
            tgt.resetTargets();
            return false;
        }

        return true;
    }//protectMandatoryTarget()

    /**
     * <p>protectTriggerAI.</p>
     *
     * @param af a {@link forge.card.abilityFactory.AbilityFactory} object.
     * @param sa a {@link forge.card.spellability.SpellAbility} object.
     * @param mandatory a boolean.
     * @return a boolean.
     */
    private static boolean protectTriggerAI(AbilityFactory af, SpellAbility sa, boolean mandatory) {
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="101">
<file line="1294" path="/Users/dhudson/mtg/cardforge/src/forge/ComputerUtil.java"/>
<file line="1333" path="/Users/dhudson/mtg/cardforge/src/forge/ComputerUtil.java"/>
<codefragment>
<![CDATA[
        Player controller = card.getController();
        CardList l = AllZoneUtil.getPlayerCardsInPlay(controller);
        for (Card c : l)
            for (SpellAbility sa : c.getSpellAbility())
                // if SA is from AF_Counter don't add to getPlayable
                //This try/catch should fix the "computer is thinking" bug
                try {
                    if (sa.canPlay() && ComputerUtil.canPayCost(sa, controller) && sa.getAbilityFactory() != null && sa.isAbility()) {
                        AbilityFactory af = sa.getAbilityFactory();
                        HashMap<String, String> mapParams = af.getMapParams();
                        if (mapParams.get("AB").equals("PreventDamage")) {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="100">
<file line="1166" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Auras.java"/>
<file line="1303" path="/Users/dhudson/mtg/cardforge/src/forge/card/cardFactory/CardFactory_Auras.java"/>
<codefragment>
<![CDATA[
                    }//canPlayAI()

                    @Override
                    public void resolve() {
                        AllZone.getGameAction().moveToPlay(card);

                        Card c = getTargetCard();

                        if (AllZoneUtil.isCardInPlay(c)
                                && CardFactoryUtil.canTarget(card, c)) card.enchantCard(c);

                    }//resolve()
                };//SpellAbility
                // Do not remove SpellAbilities created by AbilityFactory or Keywords.
                card.clearFirstSpellAbility();
                spell.setDescription("");
                card.addSpellAbility(spell);

                final Player[] prevController = new Player[1];
                prevController[0] = null;

                Command onEnchant = new Command() {
                    private static final long serialVersionUID = -2519887209491512000L;
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="100">
<file line="352" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Debuff.java"/>
<file line="493" path="/Users/dhudson/mtg/cardforge/src/forge/card/abilityFactory/AbilityFactory_Pump.java"/>
<codefragment>
<![CDATA[
    private boolean pumpMandatoryTarget(AbilityFactory af, SpellAbility sa, boolean mandatory) {
        CardList list = AllZoneUtil.getCardsInPlay();
        Target tgt = sa.getTarget();
        list = list.getValidCards(tgt.getValidTgts(), sa.getActivatingPlayer(), sa.getSourceCard());

        if (list.size() < tgt.getMinTargets(sa.getSourceCard(), sa)) {
            tgt.resetTargets();
            return false;
        }

        // Remove anything that's already been targeted
        for (Card c : tgt.getTargetCards())
            list.remove(c);

        CardList pref;
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="100">
<file line="48" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<file line="48" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_Quest_DeckEditor.java"/>
<codefragment>
<![CDATA[
    public TableModel bottomModel;

    private JScrollPane jScrollPane1 = new JScrollPane();
    private JScrollPane jScrollPane2 = new JScrollPane();
    private JButton removeButton = new JButton();
    @SuppressWarnings("unused")
    // border1
    private Border border1;
    private TitledBorder titledBorder1;
    private Border border2;
    private TitledBorder titledBorder2;
    private JButton addButton = new JButton();
    private JButton analysisButton = new JButton();
    private JButton changePictureButton = new JButton();
    private JButton removePictureButton = new JButton();
    private JLabel statsLabel = new JLabel();
    private JTable topTable = new JTable();
    private JTable bottomTable = new JTable();
    private GridLayout gridLayout1 = new GridLayout();
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="100">
<file line="109" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_CardShop.java"/>
<file line="174" path="/Users/dhudson/mtg/cardforge/src/forge/Gui_DeckEditor.java"/>
<codefragment>
<![CDATA[
                filteredOut = filterByType(c);
            }

            //String PC = c.getSVar("PicCount");
            Random r = MyRandom.random;
            //int n = 0;
            //if (!PC.equals("")) {
            //    if (PC.matches("[0-9][0-9]?"))
            //    	n = Integer.parseInt(PC);
            //    if (n > 1)
            //        c.setRandomPicture(r.nextInt(n));
            //}

            if (c.getCurSetCode().equals(""))
                c.setCurSetCode(c.getMostRecentSet());

            if (!c.getCurSetCode().equals("")) {
                int n = SetInfoUtil.getSetInfo_Code(c.getSets(), c.getCurSetCode()).PicCount;
                if (n > 1)
                    c.setRandomPicture(r.nextInt(n - 1) + 1);

                c.setImageFilename(CardUtil.buildFilename(c));
            }
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="100">
<file line="1917" path="/Users/dhudson/mtg/cardforge/src/forge/GameAction.java"/>
<file line="209" path="/Users/dhudson/mtg/cardforge/src/forge/MagicStack.java"/>
<codefragment>
<![CDATA[
        String Number_ManaCost = " ";

        if (Mana.toString().length() == 1)
            Number_ManaCost = Mana.toString().substring(0, 1);

        else if (Mana.toString().length() == 0)
            Number_ManaCost = "0"; // Should Never Occur

        else
            Number_ManaCost = Mana.toString().substring(0, 2);
        Number_ManaCost = Number_ManaCost.trim();

        for (int check = 0; check < Max; check++) {
            if (Number_ManaCost.equals(Numbers[check])) {

                if (check - MultiKickerPaid < 0) {
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="100">
<file line="686" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_DeckAnalysis.java"/>
<file line="704" path="/Users/dhudson/mtg/cardforge/src/forge/GUI_DeckAnalysis.java"/>
<codefragment>
<![CDATA[
        } else {
            if (rList.size() >= 40) {
                jList1Model =
                        new DefaultComboBoxModel(
                                new String[]{rList.getCard(0).getName(),
                                        rList.getCard(1).getName(),
                                        rList.getCard(2).getName(),
                                        rList.getCard(3).getName(),
                                        rList.getCard(4).getName(),
                                        rList.getCard(5).getName(),
                                        rList.getCard(6).getName()});
]]>
</codefragment>
</duplication>
</pmd-cpd>